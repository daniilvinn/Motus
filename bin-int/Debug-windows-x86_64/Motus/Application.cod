; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30038.1 

include listing.inc

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_01GFHCPBMG@C@				; `string'
PUBLIC	??_C@_05IMBNNINJ@trace@				; `string'
PUBLIC	??_C@_05GFCDIDHO@debug@				; `string'
PUBLIC	??_C@_04NIDJFNBE@info@				; `string'
PUBLIC	??_C@_07FPLKDJGL@warning@			; `string'
PUBLIC	??_C@_05KKCIMGE@error@				; `string'
PUBLIC	??_C@_08CBBMEOFB@critical@			; `string'
PUBLIC	??_C@_03MCADLMAF@off@				; `string'
PUBLIC	??_C@_01GAPBHFFA@T@				; `string'
PUBLIC	??_C@_01CKDDGHAB@D@				; `string'
PUBLIC	??_C@_01JPJNBJEM@I@				; `string'
PUBLIC	??_C@_01ELNMCGJD@W@				; `string'
PUBLIC	??_C@_01DDCIFGEA@E@				; `string'
PUBLIC	??_C@_01MJMHLOMK@O@				; `string'
PUBLIC	??_C@_02PCIJFNDE@?$AN?6@			; `string'
PUBLIC	??_C@_03KOEHGMDN@Sun@				; `string'
PUBLIC	??_C@_03PDAGKDH@Mon@				; `string'
PUBLIC	??_C@_03NAGEINEP@Tue@				; `string'
PUBLIC	??_C@_03MHOMLAJA@Wed@				; `string'
PUBLIC	??_C@_03IOFIKPDN@Thu@				; `string'
PUBLIC	??_C@_03IDIOELNC@Fri@				; `string'
PUBLIC	??_C@_03FEFJNEK@Sat@				; `string'
PUBLIC	??_C@_06OOPIFAJ@Sunday@				; `string'
PUBLIC	??_C@_06JLEDEDGH@Monday@			; `string'
PUBLIC	??_C@_07BAAGCFCM@Tuesday@			; `string'
PUBLIC	??_C@_09DLIGFAKA@Wednesday@			; `string'
PUBLIC	??_C@_08HACCIKIA@Thursday@			; `string'
PUBLIC	??_C@_06JECMNKMI@Friday@			; `string'
PUBLIC	??_C@_08INBOOONO@Saturday@			; `string'
PUBLIC	??_C@_03JIHJHPIE@Jan@				; `string'
PUBLIC	??_C@_03HJBDCHOM@Feb@				; `string'
PUBLIC	??_C@_03ODNJBKGA@Mar@				; `string'
PUBLIC	??_C@_03LEOLGMJP@Apr@				; `string'
PUBLIC	??_C@_03CNMDKL@May@				; `string'
PUBLIC	??_C@_03IDFGHECI@Jun@				; `string'
PUBLIC	??_C@_03LBGABGKK@Jul@				; `string'
PUBLIC	??_C@_03IFJFEIGA@Aug@				; `string'
PUBLIC	??_C@_04FFDEGOGK@Sept@				; `string'
PUBLIC	??_C@_03BMAOKBAD@Oct@				; `string'
PUBLIC	??_C@_03JPJOFNIA@Nov@				; `string'
PUBLIC	??_C@_03MKABNOCG@Dec@				; `string'
PUBLIC	??_C@_07CGJPFGJA@January@			; `string'
PUBLIC	??_C@_08GNJGEPFN@February@			; `string'
PUBLIC	??_C@_05HPCKOFNC@March@				; `string'
PUBLIC	??_C@_05DMJDNLEJ@April@				; `string'
PUBLIC	??_C@_04CNLMGBGM@June@				; `string'
PUBLIC	??_C@_04MIEPOIFP@July@				; `string'
PUBLIC	??_C@_06LBBHFDDG@August@			; `string'
PUBLIC	??_C@_09BHHEALKD@September@			; `string'
PUBLIC	??_C@_07JJNFCEND@October@			; `string'
PUBLIC	??_C@_08HCHEGEOA@November@			; `string'
PUBLIC	??_C@_08EDHMEBNP@December@			; `string'
msvcjmc	SEGMENT
__02E23235_vcruntime_new@h DB 01H
__256B8DBF_cstddef DB 01H
__367CC694_corecrt_memcpy_s@h DB 01H
__35D7DDB3_corecrt_memory@h DB 01H
__DC9673E3_corecrt_wstring@h DB 01H
__A29A7DFB_string@h DB 01H
__09340588_corecrt_math@h DB 01H
__24E9E95F_stdlib@h DB 01H
__80A05712_cstdlib DB 01H
__D1154D4E_type_traits DB 01H
__45F4AF76_corecrt_wtime@h DB 01H
__8AA3BE86_time@h DB 01H
__8476F639_xthreads@h DB 01H
__2FB352A6_atomic DB 01H
__2485135C_null_mutex@h DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__5467428D_corecrt_wconio@h DB 01H
__4442441F_corecrt_wio@h DB 01H
__186FF47F_stat@h DB 01H
__534C724A_wchar@h DB 01H
__44860E64_limits DB 01H
__01D54700_ratio DB 01H
__206B08EE_chrono DB 01H
__B0C4CEA9_malloc@h DB 01H
__BDCC0984_vcruntime_exception@h DB 01H
__89F7010A_exception DB 01H
__65F43743_vcruntime_typeinfo@h DB 01H
__0C3682BF_typeinfo DB 01H
__7CE971A6_xutility DB 01H
__DD38B15A_xmemory DB 01H
__F82802EA_memory DB 01H
__CB45C7EF_tuple DB 01H
__3033C7F7_xpolymorphic_allocator@h DB 01H
__A9EB37C6_xstring DB 01H
__7242C389_ctype@h DB 01H
__8CFB8476_string DB 01H
__6D66DEAE_cmath DB 01H
__317CA204_xbit_ops@h DB 01H
__02C91EC8_xhash DB 01H
__E62577D2_functional DB 01H
__00B93B57_stdexcept DB 01H
__79ECA8A5_xcall_once@h DB 01H
__C6B1BA85_system_error DB 01H
__256F9D9D_core@h DB 01H
__633B43DE_algorithm DB 01H
__D46D55E5_xfacet DB 01H
__13BF6177_xlocinfo DB 01H
__76D543F7_xlocale DB 01H
__2A5A1664_xiosbase DB 01H
__5AD9B48B_xlocmes DB 01H
__E85225E0_xlocnum DB 01H
__C33030D8_xlocmon DB 01H
__B7A2C865_xloctime DB 01H
__84FFAAFB_corecrt_io@h DB 01H
__ACE4895D_format@h DB 01H
__5B5F2777_format-inl@h DB 01H
__8ABA18DF_common-inl@h DB 01H
__085EDADA_common@h DB 01H
__23657A5C_thread DB 01H
__13784D50_mutex DB 01H
__848C1E2A_condition_variable DB 01H
__757018B7_periodic_worker-inl@h DB 01H
__10F855B2_periodic_worker@h DB 01H
__90A1F774_basetsd@h DB 01H
__3C23D660_guiddef@h DB 01H
__AF541008_winnt@h DB 01H
__0D001789_processthreadsapi@h DB 01H
__F972325D_memoryapi@h DB 01H
__76CD430D_winerror@h DB 01H
__737D49DB_winbase@h DB 01H
__1B9502AC_winuser@h DB 01H
__0396F1A5_stralign@h DB 01H
__F755426D_os-inl@h DB 01H
__D08F34F5_log_msg-inl@h DB 01H
__C6EE143E_log_msg@h DB 01H
__F57254B2_log_msg_buffer-inl@h DB 01H
__B199D979_circular_q@h DB 01H
__B7AD57D7_log_msg_buffer@h DB 01H
__D800A915_backtracer-inl@h DB 01H
__D850C33E_backtracer@h DB 01H
__15DCB498_sink-inl@h DB 01H
__09E19D5B_unordered_map DB 01H
__75501961_fmt_helper@h DB 01H
__1894C905_formatter@h DB 01H
__649CEF7B_pattern_formatter-inl@h DB 01H
__71B57A2C_pattern_formatter@h DB 01H
__092B7E84_vector DB 01H
__4B9C778B_logger-inl@h DB 01H
__40D449C1_logger@h DB 01H
__EADF0B84_console_globals@h DB 01H
__9CA48D24_list DB 01H
__3EDD2DED_registry-inl@h DB 01H
__C6DF7998_registry@h DB 01H
__C55ABF74_spdlog-inl@h DB 01H
__08C15978_Logger@h DB 01H
__0CAC54C1_Application@h DB 01H
__CD889865_Application@cpp DB 01H
__1C0C46CB_initializer_list DB 01H
__6D45C6E6_iterator DB 01H
__B7ADD299_utility DB 01H
__40B2458B_xstddef DB 01H
__83FB8DDC_xatomic@h DB 01H
__5CB911C8_array DB 01H
__1E36F3C3_xtr1common DB 01H
__F92B288A_wincolor_sink-inl@h DB 01H
__D11912F4_sink@h DB 01H
__3A4EA8BD_wincolor_sink@h DB 01H
msvcjmc	ENDS
;	COMDAT ??_C@_08EDHMEBNP@December@
CONST	SEGMENT
??_C@_08EDHMEBNP@December@ DB 'December', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HCHEGEOA@November@
CONST	SEGMENT
??_C@_08HCHEGEOA@November@ DB 'November', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JJNFCEND@October@
CONST	SEGMENT
??_C@_07JJNFCEND@October@ DB 'October', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09BHHEALKD@September@
CONST	SEGMENT
??_C@_09BHHEALKD@September@ DB 'September', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LBBHFDDG@August@
CONST	SEGMENT
??_C@_06LBBHFDDG@August@ DB 'August', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MIEPOIFP@July@
CONST	SEGMENT
??_C@_04MIEPOIFP@July@ DB 'July', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04CNLMGBGM@June@
CONST	SEGMENT
??_C@_04CNLMGBGM@June@ DB 'June', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05DMJDNLEJ@April@
CONST	SEGMENT
??_C@_05DMJDNLEJ@April@ DB 'April', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HPCKOFNC@March@
CONST	SEGMENT
??_C@_05HPCKOFNC@March@ DB 'March', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08GNJGEPFN@February@
CONST	SEGMENT
??_C@_08GNJGEPFN@February@ DB 'February', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CGJPFGJA@January@
CONST	SEGMENT
??_C@_07CGJPFGJA@January@ DB 'January', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03MKABNOCG@Dec@
CONST	SEGMENT
??_C@_03MKABNOCG@Dec@ DB 'Dec', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JPJOFNIA@Nov@
CONST	SEGMENT
??_C@_03JPJOFNIA@Nov@ DB 'Nov', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03BMAOKBAD@Oct@
CONST	SEGMENT
??_C@_03BMAOKBAD@Oct@ DB 'Oct', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04FFDEGOGK@Sept@
CONST	SEGMENT
??_C@_04FFDEGOGK@Sept@ DB 'Sept', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IFJFEIGA@Aug@
CONST	SEGMENT
??_C@_03IFJFEIGA@Aug@ DB 'Aug', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LBGABGKK@Jul@
CONST	SEGMENT
??_C@_03LBGABGKK@Jul@ DB 'Jul', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IDFGHECI@Jun@
CONST	SEGMENT
??_C@_03IDFGHECI@Jun@ DB 'Jun', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CNMDKL@May@
CONST	SEGMENT
??_C@_03CNMDKL@May@ DB 'May', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LEOLGMJP@Apr@
CONST	SEGMENT
??_C@_03LEOLGMJP@Apr@ DB 'Apr', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03ODNJBKGA@Mar@
CONST	SEGMENT
??_C@_03ODNJBKGA@Mar@ DB 'Mar', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HJBDCHOM@Feb@
CONST	SEGMENT
??_C@_03HJBDCHOM@Feb@ DB 'Feb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JIHJHPIE@Jan@
CONST	SEGMENT
??_C@_03JIHJHPIE@Jan@ DB 'Jan', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08INBOOONO@Saturday@
CONST	SEGMENT
??_C@_08INBOOONO@Saturday@ DB 'Saturday', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JECMNKMI@Friday@
CONST	SEGMENT
??_C@_06JECMNKMI@Friday@ DB 'Friday', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HACCIKIA@Thursday@
CONST	SEGMENT
??_C@_08HACCIKIA@Thursday@ DB 'Thursday', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09DLIGFAKA@Wednesday@
CONST	SEGMENT
??_C@_09DLIGFAKA@Wednesday@ DB 'Wednesday', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BAAGCFCM@Tuesday@
CONST	SEGMENT
??_C@_07BAAGCFCM@Tuesday@ DB 'Tuesday', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JLEDEDGH@Monday@
CONST	SEGMENT
??_C@_06JLEDEDGH@Monday@ DB 'Monday', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OOPIFAJ@Sunday@
CONST	SEGMENT
??_C@_06OOPIFAJ@Sunday@ DB 'Sunday', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03FEFJNEK@Sat@
CONST	SEGMENT
??_C@_03FEFJNEK@Sat@ DB 'Sat', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IDIOELNC@Fri@
CONST	SEGMENT
??_C@_03IDIOELNC@Fri@ DB 'Fri', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IOFIKPDN@Thu@
CONST	SEGMENT
??_C@_03IOFIKPDN@Thu@ DB 'Thu', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MHOMLAJA@Wed@
CONST	SEGMENT
??_C@_03MHOMLAJA@Wed@ DB 'Wed', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NAGEINEP@Tue@
CONST	SEGMENT
??_C@_03NAGEINEP@Tue@ DB 'Tue', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PDAGKDH@Mon@
CONST	SEGMENT
??_C@_03PDAGKDH@Mon@ DB 'Mon', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KOEHGMDN@Sun@
CONST	SEGMENT
??_C@_03KOEHGMDN@Sun@ DB 'Sun', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PCIJFNDE@?$AN?6@
CONST	SEGMENT
??_C@_02PCIJFNDE@?$AN?6@ DB 0dH, 0aH, 00H		; `string'
CONST	ENDS
CONST	SEGMENT
?default_eol@os@details@spdlog@@3QEBDEB DQ FLAT:??_C@_02PCIJFNDE@?$AN?6@ ; spdlog::details::os::default_eol
?folder_seps@os@details@spdlog@@3QBDB DB 05cH		; spdlog::details::os::folder_seps
	DB	02fH
	DB	00H
	ORG $+1
?folder_seps_filename@os@details@spdlog@@3QBDB DB 05cH	; spdlog::details::os::folder_seps_filename
	DB	02fH
	DB	00H
	ORG $+1
?months@details@spdlog@@3V?$array@PEBD$0M@@std@@B DQ FLAT:??_C@_03JIHJHPIE@Jan@ ; spdlog::details::months
	DQ	FLAT:??_C@_03HJBDCHOM@Feb@
	DQ	FLAT:??_C@_03ODNJBKGA@Mar@
	DQ	FLAT:??_C@_03LEOLGMJP@Apr@
	DQ	FLAT:??_C@_03CNMDKL@May@
	DQ	FLAT:??_C@_03IDFGHECI@Jun@
	DQ	FLAT:??_C@_03LBGABGKK@Jul@
	DQ	FLAT:??_C@_03IFJFEIGA@Aug@
	DQ	FLAT:??_C@_04FFDEGOGK@Sept@
	DQ	FLAT:??_C@_03BMAOKBAD@Oct@
	DQ	FLAT:??_C@_03JPJOFNIA@Nov@
	DQ	FLAT:??_C@_03MKABNOCG@Dec@
?full_months@details@spdlog@@3V?$array@PEBD$0M@@std@@B DQ FLAT:??_C@_07CGJPFGJA@January@ ; spdlog::details::full_months
	DQ	FLAT:??_C@_08GNJGEPFN@February@
	DQ	FLAT:??_C@_05HPCKOFNC@March@
	DQ	FLAT:??_C@_05DMJDNLEJ@April@
	DQ	FLAT:??_C@_03CNMDKL@May@
	DQ	FLAT:??_C@_04CNLMGBGM@June@
	DQ	FLAT:??_C@_04MIEPOIFP@July@
	DQ	FLAT:??_C@_06LBBHFDDG@August@
	DQ	FLAT:??_C@_09BHHEALKD@September@
	DQ	FLAT:??_C@_07JJNFCEND@October@
	DQ	FLAT:??_C@_08HCHEGEOA@November@
	DQ	FLAT:??_C@_08EDHMEBNP@December@
CONST	ENDS
;	COMDAT ??_C@_01MJMHLOMK@O@
CONST	SEGMENT
??_C@_01MJMHLOMK@O@ DB 'O', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01DDCIFGEA@E@
CONST	SEGMENT
??_C@_01DDCIFGEA@E@ DB 'E', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01ELNMCGJD@W@
CONST	SEGMENT
??_C@_01ELNMCGJD@W@ DB 'W', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01JPJNBJEM@I@
CONST	SEGMENT
??_C@_01JPJNBJEM@I@ DB 'I', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D@
CONST	SEGMENT
??_C@_01CKDDGHAB@D@ DB 'D', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01GAPBHFFA@T@
CONST	SEGMENT
??_C@_01GAPBHFFA@T@ DB 'T', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03MCADLMAF@off@
CONST	SEGMENT
??_C@_03MCADLMAF@off@ DB 'off', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08CBBMEOFB@critical@
CONST	SEGMENT
??_C@_08CBBMEOFB@critical@ DB 'critical', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KKCIMGE@error@
CONST	SEGMENT
??_C@_05KKCIMGE@error@ DB 'error', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07FPLKDJGL@warning@
CONST	SEGMENT
??_C@_07FPLKDJGL@warning@ DB 'warning', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NIDJFNBE@info@
CONST	SEGMENT
??_C@_04NIDJFNBE@info@ DB 'info', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05GFCDIDHO@debug@
CONST	SEGMENT
??_C@_05GFCDIDHO@debug@ DB 'debug', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IMBNNINJ@trace@
CONST	SEGMENT
??_C@_05IMBNNINJ@trace@ DB 'trace', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01GFHCPBMG@C@
CONST	SEGMENT
??_C@_01GFHCPBMG@C@ DB 'C', 00H				; `string'
CONST	ENDS
PUBLIC	??_H@YAXPEAX_K1P6APEAX0@Z@Z			; `vector constructor iterator'
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z ; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z ; __empty_global_delete
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
PUBLIC	?_Check_C_return@std@@YAHH@Z			; std::_Check_C_return
PUBLIC	?_Load_barrier@std@@YAXW4memory_order@1@@Z	; std::_Load_barrier
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	fprintf
PUBLIC	?now@system_clock@chrono@std@@SA?AV?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@23@XZ ; std::chrono::system_clock::now
PUBLIC	??0?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@QEAA@AEBV?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@12@@Z ; std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<__int64,std::ratio<1,10000000> > >::time_point<std::chrono::system_clock,std::chrono::duration<__int64,std::ratio<1,10000000> > >
PUBLIC	??$?0_J$0A@@?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@chrono@std@@QEAA@AEB_J@Z ; std::chrono::duration<__int64,std::ratio<1,10000000> >::duration<__int64,std::ratio<1,10000000> ><__int64,0>
PUBLIC	??0exception@std@@QEAA@QEBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QEAA@AEBV01@@Z		; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AEAA@QEBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UEAA@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QEAA@AEBV01@@Z		; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UEAAPEAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QEAA@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UEAA@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QEAA@AEBV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UEAAPEAXI@Z	; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
PUBLIC	??0?$allocator@D@std@@QEAA@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAPEADAEAV?$allocator@D@2@_K@Z ; std::_Default_allocator_traits<std::allocator<char> >::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
PUBLIC	?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?is_constant_evaluated@detail@v8@fmt@@YA_NXZ	; fmt::v8::detail::is_constant_evaluated
PUBLIC	?assert_fail@detail@v8@fmt@@YAXPEBDH0@Z		; fmt::v8::detail::assert_fail
PUBLIC	??0?$buffer@D@detail@v8@fmt@@IEAA@PEAD_K1@Z	; fmt::v8::detail::buffer<char>::buffer<char>
PUBLIC	?set@?$buffer@D@detail@v8@fmt@@IEAAXPEAD_K@Z	; fmt::v8::detail::buffer<char>::set
PUBLIC	?size@?$buffer@D@detail@v8@fmt@@QEBA_KXZ	; fmt::v8::detail::buffer<char>::size
PUBLIC	?capacity@?$buffer@D@detail@v8@fmt@@QEBA_KXZ	; fmt::v8::detail::buffer<char>::capacity
PUBLIC	?data@?$buffer@D@detail@v8@fmt@@QEAAPEADXZ	; fmt::v8::detail::buffer<char>::data
PUBLIC	?try_resize@?$buffer@D@detail@v8@fmt@@QEAAX_K@Z	; fmt::v8::detail::buffer<char>::try_resize
PUBLIC	?try_reserve@?$buffer@D@detail@v8@fmt@@QEAAX_K@Z ; fmt::v8::detail::buffer<char>::try_reserve
PUBLIC	??$to_unsigned@_J@detail@v8@fmt@@YA_K_J@Z	; fmt::v8::detail::to_unsigned<__int64>
PUBLIC	??0?$basic_string_view@D@v8@fmt@@QEAA@PEBD_K@Z	; fmt::v8::basic_string_view<char>::basic_string_view<char>
PUBLIC	??0?$basic_string_view@D@v8@fmt@@QEAA@PEBD@Z	; fmt::v8::basic_string_view<char>::basic_string_view<char>
PUBLIC	?size@?$basic_string_view@D@v8@fmt@@QEBA_KXZ	; fmt::v8::basic_string_view<char>::size
PUBLIC	?begin@?$basic_string_view@D@v8@fmt@@QEBAPEBDXZ	; fmt::v8::basic_string_view<char>::begin
PUBLIC	?end@?$basic_string_view@D@v8@fmt@@QEBAPEBDXZ	; fmt::v8::basic_string_view<char>::end
PUBLIC	??0id@locale@std@@QEAA@_K@Z			; std::locale::id::id
PUBLIC	??$_Adl_verify_range@PEADPEAD@std@@YAXAEBQEAD0@Z ; std::_Adl_verify_range<char *,char *>
PUBLIC	??0source_loc@spdlog@@QEAA@XZ			; spdlog::source_loc::source_loc
PUBLIC	?deallocate@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@AEAAXXZ ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::deallocate
PUBLIC	?grow@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@MEAAX_K@Z ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::grow
PUBLIC	??0?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAA@AEBV?$allocator@D@std@@@Z ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::basic_memory_buffer<char,250,std::allocator<char> >
PUBLIC	??1?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAA@XZ ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::~basic_memory_buffer<char,250,std::allocator<char> >
PUBLIC	?move@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@AEAAXAEAV123@@Z ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::move
PUBLIC	??4?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAAAEAV012@$$QEAV012@@Z ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::operator=
PUBLIC	?resize@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAAX_K@Z ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::resize
PUBLIC	?lock@_Mutex_base@std@@QEAAXXZ			; std::_Mutex_base::lock
PUBLIC	?unlock@_Mutex_base@std@@QEAAXXZ		; std::_Mutex_base::unlock
PUBLIC	?_Mymtx@_Mutex_base@std@@AEAAPEAU_Mtx_internal_imp_t@@XZ ; std::_Mutex_base::_Mymtx
PUBLIC	??0?$lock_guard@Vmutex@std@@@std@@QEAA@AEAVmutex@1@@Z ; std::lock_guard<std::mutex>::lock_guard<std::mutex>
PUBLIC	??1?$lock_guard@Vmutex@std@@@std@@QEAA@XZ	; std::lock_guard<std::mutex>::~lock_guard<std::mutex>
PUBLIC	?get@?$_Ptr_base@Vlogger@spdlog@@@std@@IEBAPEAVlogger@spdlog@@XZ ; std::_Ptr_base<spdlog::logger>::get
PUBLIC	??0log_msg@details@spdlog@@QEAA@V?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@Usource_loc@2@V?$basic_string_view@D@v8@fmt@@W4level_enum@level@2@2@Z ; spdlog::details::log_msg::log_msg
PUBLIC	??0log_msg@details@spdlog@@QEAA@Usource_loc@2@V?$basic_string_view@D@v8@fmt@@W4level_enum@level@2@1@Z ; spdlog::details::log_msg::log_msg
PUBLIC	?now@os@details@spdlog@@YA?AV?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@XZ ; spdlog::details::os::now
PUBLIC	?_thread_id@os@details@spdlog@@YA_KXZ		; spdlog::details::os::_thread_id
PUBLIC	?thread_id@os@details@spdlog@@YA_KXZ		; spdlog::details::os::thread_id
PUBLIC	?update_string_views@log_msg_buffer@details@spdlog@@AEAAXXZ ; spdlog::details::log_msg_buffer::update_string_views
PUBLIC	??0log_msg_buffer@details@spdlog@@QEAA@AEBUlog_msg@12@@Z ; spdlog::details::log_msg_buffer::log_msg_buffer
PUBLIC	??4log_msg_buffer@details@spdlog@@QEAAAEAV012@$$QEAV012@@Z ; spdlog::details::log_msg_buffer::operator=
PUBLIC	??1log_msg_buffer@details@spdlog@@QEAA@XZ	; spdlog::details::log_msg_buffer::~log_msg_buffer
PUBLIC	??$append@D@?$buffer@D@detail@v8@fmt@@QEAAXPEBD0@Z ; fmt::v8::detail::buffer<char>::append<char>
PUBLIC	??$move@AEAV?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@@std@@YA$$QEAV?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@AEAV123@@Z ; std::move<fmt::v8::basic_memory_buffer<char,250,std::allocator<char> > &>
PUBLIC	?load@?$_Atomic_storage@_N$00@std@@QEBA_NW4memory_order@2@@Z ; std::_Atomic_storage<bool,1>::load
PUBLIC	??A?$vector@Vlog_msg_buffer@details@spdlog@@V?$allocator@Vlog_msg_buffer@details@spdlog@@@std@@@std@@QEAAAEAVlog_msg_buffer@details@spdlog@@_K@Z ; std::vector<spdlog::details::log_msg_buffer,std::allocator<spdlog::details::log_msg_buffer> >::operator[]
PUBLIC	?push_back@?$circular_q@Vlog_msg_buffer@details@spdlog@@@details@spdlog@@QEAAX$$QEAVlog_msg_buffer@23@@Z ; spdlog::details::circular_q<spdlog::details::log_msg_buffer>::push_back
PUBLIC	?enabled@backtracer@details@spdlog@@QEBA_NXZ	; spdlog::details::backtracer::enabled
PUBLIC	?push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z ; spdlog::details::backtracer::push_back
PUBLIC	?log@logger@spdlog@@QEAAXUsource_loc@2@W4level_enum@level@2@V?$basic_string_view@D@v8@fmt@@@Z ; spdlog::logger::log
PUBLIC	?should_log@logger@spdlog@@QEBA_NW4level_enum@level@2@@Z ; spdlog::logger::should_log
PUBLIC	?load@?$_Atomic_storage@H$03@std@@QEBAHW4memory_order@2@@Z ; std::_Atomic_storage<int,4>::load
PUBLIC	?log_it_@logger@spdlog@@IEAAXAEBUlog_msg@details@2@_N1@Z ; spdlog::logger::log_it_
PUBLIC	??$?0U?$char_traits@D@std@@V?$allocator@D@1@@?$basic_string_view@D@v8@fmt@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; fmt::v8::basic_string_view<char>::basic_string_view<char><std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?CVlogger@spdlog@@$0A@@?$shared_ptr@Vlogger@spdlog@@@std@@QEBAPEAVlogger@spdlog@@XZ ; std::shared_ptr<spdlog::logger>::operator-><spdlog::logger,0>
PUBLIC	?GetCoreLogger@Logger@Motus@@SAAEAV?$shared_ptr@Vlogger@spdlog@@@std@@XZ ; Motus::Logger::GetCoreLogger
PUBLIC	?GetClientLogger@Logger@Motus@@SAAEAV?$shared_ptr@Vlogger@spdlog@@@std@@XZ ; Motus::Logger::GetClientLogger
PUBLIC	??4Logger@Motus@@QEAAAEAV01@AEBV01@@Z		; Motus::Logger::operator=
PUBLIC	??4Logger@Motus@@QEAAAEAV01@$$QEAV01@@Z		; Motus::Logger::operator=
PUBLIC	??0Application@Motus@@QEAA@XZ			; Motus::Application::Application
PUBLIC	??1Application@Motus@@UEAA@XZ			; Motus::Application::~Application
PUBLIC	?Run@Application@Motus@@QEAAXXZ			; Motus::Application::Run
PUBLIC	??0Application@Motus@@QEAA@AEBV01@@Z		; Motus::Application::Application
PUBLIC	??4Application@Motus@@QEAAAEAV01@AEBV01@@Z	; Motus::Application::operator=
PUBLIC	??_GApplication@Motus@@UEAAPEAXI@Z		; Motus::Application::`scalar deleting destructor'
PUBLIC	??_EApplication@Motus@@UEAAPEAXI@Z		; Motus::Application::`vector deleting destructor'
PUBLIC	??$info@$$BY0CC@D@logger@spdlog@@QEAAXAEAY0CC@$$CBD@Z ; spdlog::logger::info<char [34]>
PUBLIC	??$_Atomic_address_as@HU?$_Atomic_padded@H@std@@@std@@YAPEDHAEBU?$_Atomic_padded@H@0@@Z ; std::_Atomic_address_as<int,std::_Atomic_padded<int> >
PUBLIC	??$move@AEAVlog_msg_buffer@details@spdlog@@@std@@YA$$QEAVlog_msg_buffer@details@spdlog@@AEAV123@@Z ; std::move<spdlog::details::log_msg_buffer &>
PUBLIC	??$_Atomic_address_as@DU?$_Atomic_padded@_N@std@@@std@@YAPEDDAEBU?$_Atomic_padded@_N@0@@Z ; std::_Atomic_address_as<char,std::_Atomic_padded<bool> >
PUBLIC	??$const_check@_N@detail@v8@fmt@@YA_N_N@Z	; fmt::v8::detail::const_check<bool>
PUBLIC	??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z ; std::move<std::allocator<char> &>
PUBLIC	??$make_checked@D@detail@v8@fmt@@YA?AV?$checked_array_iterator@PEAD@stdext@@PEAD_K@Z ; fmt::v8::detail::make_checked<char>
PUBLIC	??0?$checked_array_iterator@PEAD@stdext@@QEAA@QEAD_K1@Z ; stdext::checked_array_iterator<char *>::checked_array_iterator<char *>
PUBLIC	?_Verify_offset@?$checked_array_iterator@PEAD@stdext@@QEBAX_J@Z ; stdext::checked_array_iterator<char *>::_Verify_offset
PUBLIC	?_Unwrapped@?$checked_array_iterator@PEAD@stdext@@QEBAPEADXZ ; stdext::checked_array_iterator<char *>::_Unwrapped
PUBLIC	?_Seek_to@?$checked_array_iterator@PEAD@stdext@@QEAAXPEAD@Z ; stdext::checked_array_iterator<char *>::_Seek_to
PUBLIC	??$uninitialized_copy@PEADV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEAD0V12@@Z ; std::uninitialized_copy<char *,stdext::checked_array_iterator<char *> >
PUBLIC	??$_Unfancy@D@std@@YAPEADPEAD@Z			; std::_Unfancy<char>
PUBLIC	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
PUBLIC	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z	; std::_Deallocate<16,0>
PUBLIC	??$_Get_size_of_n@$00@std@@YA_K_K@Z		; std::_Get_size_of_n<1>
PUBLIC	??$_Verify_range@D@std@@YAXQEBD0@Z		; std::_Verify_range<char>
PUBLIC	??$uninitialized_copy_n@PEBD_KV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEBD_KV12@@Z ; std::uninitialized_copy_n<char const *,unsigned __int64,stdext::checked_array_iterator<char *> >
PUBLIC	??$log@$$BY0CC@D@logger@spdlog@@QEAAXW4level_enum@level@1@AEAY0CC@$$CBD@Z ; spdlog::logger::log<char [34]>
PUBLIC	??$_Get_unwrapped@AEBQEAD@std@@YA?A_TAEBQEAD@Z	; std::_Get_unwrapped<char * const &>
PUBLIC	??$_Idl_distance@PEADPEAD@std@@YA?A_PAEBQEAD0@Z	; std::_Idl_distance<char *,char *>
PUBLIC	??$_Get_unwrapped_n@AEAV?$checked_array_iterator@PEAD@stdext@@_J@std@@YA?A_TAEAV?$checked_array_iterator@PEAD@stdext@@_J@Z ; std::_Get_unwrapped_n<stdext::checked_array_iterator<char *> &,__int64>
PUBLIC	??$_Uninitialized_copy_unchecked@PEADPEAD@std@@YAPEADPEADQEAD0@Z ; std::_Uninitialized_copy_unchecked<char *,char *>
PUBLIC	??$_Seek_wrapped@V?$checked_array_iterator@PEAD@stdext@@PEAD@std@@YAXAEAV?$checked_array_iterator@PEAD@stdext@@$$QEAPEAD@Z ; std::_Seek_wrapped<stdext::checked_array_iterator<char *>,char *>
PUBLIC	??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z	; std::forward<char * &>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Get_unwrapped_n@AEBQEBD_K@std@@YA?A_TAEBQEBD_K@Z ; std::_Get_unwrapped_n<char const * const &,unsigned __int64>
PUBLIC	??$_Get_unwrapped_n@AEAV?$checked_array_iterator@PEAD@stdext@@_K@std@@YA?A_TAEAV?$checked_array_iterator@PEAD@stdext@@_K@Z ; std::_Get_unwrapped_n<stdext::checked_array_iterator<char *> &,unsigned __int64>
PUBLIC	??$_Copy_memmove@PEBDPEAD@std@@YAPEADPEBD0PEAD@Z ; std::_Copy_memmove<char const *,char *>
PUBLIC	??$_Seek_wrapped@V?$checked_array_iterator@PEAD@stdext@@AEAPEAD@std@@YAXAEAV?$checked_array_iterator@PEAD@stdext@@AEAPEAD@Z ; std::_Seek_wrapped<stdext::checked_array_iterator<char *>,char * &>
PUBLIC	??$_Copy_memmove@PEADPEAD@std@@YAPEADPEAD00@Z	; std::_Copy_memmove<char *,char *>
PUBLIC	??0?$_Uninitialized_backout@PEAD@std@@QEAA@PEAD@Z ; std::_Uninitialized_backout<char *>::_Uninitialized_backout<char *>
PUBLIC	??1?$_Uninitialized_backout@PEAD@std@@QEAA@XZ	; std::_Uninitialized_backout<char *>::~_Uninitialized_backout<char *>
PUBLIC	?_Release@?$_Uninitialized_backout@PEAD@std@@QEAAPEADXZ ; std::_Uninitialized_backout<char *>::_Release
PUBLIC	??$_Emplace_back@AEAD@?$_Uninitialized_backout@PEAD@std@@QEAAXAEAD@Z ; std::_Uninitialized_backout<char *>::_Emplace_back<char &>
PUBLIC	??$forward@PEAD@std@@YA$$QEAPEADAEAPEAD@Z	; std::forward<char *>
PUBLIC	??$_Destroy_range@PEADPEAD@std@@YAXPEADQEAD@Z	; std::_Destroy_range<char *,char *>
PUBLIC	??$_To_address@PEBD@std@@YA?A_PAEBQEBD@Z	; std::_To_address<char const *>
PUBLIC	??$_To_address@PEAD@std@@YA?A_PAEBQEAD@Z	; std::_To_address<char *>
PUBLIC	??$forward@AEAD@std@@YAAEADAEAD@Z		; std::forward<char &>
PUBLIC	??$_Construct_in_place@DAEAD@std@@YAXAEAD0@Z	; std::_Construct_in_place<char,char &>
PUBLIC	??$addressof@D@std@@YAPEADAEAD@Z		; std::addressof<char>
PUBLIC	??$_Voidify_iter@PEAD@std@@YAPEAXPEAD@Z		; std::_Voidify_iter<char *>
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0BF@FBDAHHJI@Invalid?5memory?5order@	; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GH@NNNPPLLH@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1MO@BCADAPLD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1CO@JOMFDNFG@?$AA?$CC?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy@ ; `string'
PUBLIC	?__LINE__Var@?0??_Load_barrier@std@@YAXW4memory_order@2@@Z@4JA ; `std::_Load_barrier'::`1'::__LINE__Var
PUBLIC	??_C@_1CG@GPPLBDPC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAo?$AAa?$AAd?$AA_?$AAb?$AAa?$AAr?$AAr@ ; `string'
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	_TI3?AVbad_array_new_length@std@@
PUBLIC	_CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
PUBLIC	?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA ; `std::_Adjust_manually_vector_aligned'::`1'::__LINE__Var
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_0GI@KDIDHNIL@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1NA@FOAKNOEL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_7?$buffer@D@detail@v8@fmt@@6B@		; fmt::v8::detail::buffer<char>::`vftable'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_0FK@ILDHDHAM@C?3?2Users?2DANIL?2source?2repos?2Mot@ ; `string'
PUBLIC	??_C@_0BM@NGPMNKJI@?$CFs?3?$CFd?3?5assertion?5failed?3?5?$CFs@ ; `string'
PUBLIC	??_7?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@6B@ ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::`vftable'
PUBLIC	?tid@?1??thread_id@os@details@spdlog@@YA_KXZ@4_KB ; `spdlog::details::os::thread_id'::`2'::tid
PUBLIC	??__J?1??thread_id@os@details@spdlog@@YA_KXZ@51	; `spdlog::details::os::thread_id'::`2'::`local static thread guard'
PUBLIC	??_7Application@Motus@@6B@			; Motus::Application::`vftable'
PUBLIC	??_C@_0CC@MLJOHFGA@Application?5created?5successfull@ ; `string'
PUBLIC	??_C@_0GH@IJJCCHP@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1MO@MBPFCBOF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ ; `string'
PUBLIC	??_C@_1PK@GDDHBHML@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa@ ; `string'
PUBLIC	??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ ; `string'
PUBLIC	??_C@_0P@LKAHFCLP@negative?5value@		; `string'
PUBLIC	??_C@_0FI@IKCGCHNG@C?3?2Users?2DANIL?2source?2repos?2Mot@ ; `string'
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_C@_0BB@KBEKGHFK@integer?5overflow@		; `string'
PUBLIC	??_C@_0GJ@LJDCNNIF@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1NC@HPCGBKBF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1CM@MJCLAPGA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAG?$AAe?$AAt?$AA_?$AAu?$AAn?$AAw?$AAr?$AAa@ ; `string'
PUBLIC	??_C@_1CG@NMONALKO@?$AA?$CC?$AAi?$AAn?$AAt?$AAe?$AAg?$AAe?$AAr?$AA?5?$AAo?$AAv?$AAe?$AAr?$AAf?$AAl@ ; `string'
PUBLIC	??_C@_0DJ@IMDMDBOM@cannot?5seek?5checked_array_itera@ ; `string'
PUBLIC	??_C@_0GJ@MPPPDAKC@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1NC@DKNICPIG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1GO@KEIDFPGF@?$AAs?$AAt?$AAd?$AAe?$AAx?$AAt?$AA?3?$AA?3?$AAc?$AAh?$AAe?$AAc?$AAk?$AAe?$AAd@ ; `string'
PUBLIC	??_C@_1HG@FONEJMKF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAc?$AAh@ ; `string'
PUBLIC	??_C@_0DG@GKAODMBN@cannot?5seek?5checked_array_itera@ ; `string'
PUBLIC	??_C@_1HA@NOCFBGDF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAc?$AAh@ ; `string'
PUBLIC	??_C@_0DH@NPIEPPEB@checked_array_iterator?5construc@ ; `string'
PUBLIC	??_C@_1HO@MKKPHLPN@?$AAs?$AAt?$AAd?$AAe?$AAx?$AAt?$AA?3?$AA?3?$AAc?$AAh?$AAe?$AAc?$AAk?$AAe?$AAd@ ; `string'
PUBLIC	??_C@_1HC@HFANKADA@?$AA?$CC?$AAc?$AAh?$AAe?$AAc?$AAk?$AAe?$AAd?$AA_?$AAa?$AAr?$AAr?$AAa?$AAy?$AA_@ ; `string'
PUBLIC	??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@	; `string'
PUBLIC	??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@ ; `string'
PUBLIC	??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@ ; `string'
PUBLIC	??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@ ; `string'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$buffer@D@detail@v8@fmt@@6B@		; fmt::v8::detail::buffer<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$buffer@D@detail@v8@fmt@@@8		; fmt::v8::detail::buffer<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$buffer@D@detail@v8@fmt@@8		; fmt::v8::detail::buffer<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$buffer@D@detail@v8@fmt@@8		; fmt::v8::detail::buffer<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$buffer@D@detail@v8@fmt@@8	; fmt::v8::detail::buffer<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@6B@ ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@@8 ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@8 ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@8 ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@8 ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Application@Motus@@6B@			; Motus::Application::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVApplication@Motus@@@8			; Motus::Application `RTTI Type Descriptor'
PUBLIC	??_R3Application@Motus@@8			; Motus::Application::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Application@Motus@@8			; Motus::Application::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Application@Motus@@8		; Motus::Application::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??_M@YAXPEAX_K1P6AX0@Z@Z:PROC			; `eh vector destructor iterator'
EXTRN	_purecall:PROC
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	??_V@YAXPEAX_K@Z:PROC				; operator delete[]
EXTRN	_invalid_parameter:PROC
EXTRN	_CrtDbgReport:PROC
EXTRN	memmove:PROC
EXTRN	strlen:PROC
EXTRN	_Xtime_get_ticks:PROC
EXTRN	_Mtx_lock:PROC
EXTRN	_Mtx_unlock:PROC
EXTRN	?_Throw_C_error@std@@YAXH@Z:PROC		; std::_Throw_C_error
EXTRN	__acrt_iob_func:PROC
EXTRN	__stdio_common_vfprintf:PROC
EXTRN	terminate:PROC
EXTRN	__std_exception_copy:PROC
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UEAAPEAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UEAAPEAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	__imp_GetCurrentThreadId:PROC
EXTRN	_CxxThrowException:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck_EH4:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	?s_CoreLogger@Logger@Motus@@0V?$shared_ptr@Vlogger@spdlog@@@std@@A:BYTE ; Motus::Logger::s_CoreLogger
EXTRN	?s_ClientLogger@Logger@Motus@@0V?$shared_ptr@Vlogger@spdlog@@@std@@A:BYTE ; Motus::Logger::s_ClientLogger
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_tls_index:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?tid@?1??thread_id@os@details@spdlog@@YA_KXZ@4_KB
_TLS	SEGMENT
?tid@?1??thread_id@os@details@spdlog@@YA_KXZ@4_KB DQ 01H DUP (?) ; `spdlog::details::os::thread_id'::`2'::tid
_TLS	ENDS
;	COMDAT ??__J?1??thread_id@os@details@spdlog@@YA_KXZ@51
_TLS	SEGMENT
??__J?1??thread_id@os@details@spdlog@@YA_KXZ@51 DD 01H DUP (?) ; `spdlog::details::os::thread_id'::`2'::`local static thread guard'
_TLS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DQ 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DQ 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD imagerel $LN7
	DD	imagerel $LN7+172
	DD	imagerel $unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??2@YAPEAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Check_C_return@std@@YAHH@Z DD imagerel $LN4
	DD	imagerel $LN4+66
	DD	imagerel $unwind$?_Check_C_return@std@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Load_barrier@std@@YAXW4memory_order@1@@Z DD imagerel $LN17
	DD	imagerel $LN17+232
	DD	imagerel $unwind$?_Load_barrier@std@@YAXW4memory_order@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+102
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fprintf DD imagerel $LN3
	DD	imagerel $LN3+152
	DD	imagerel $unwind$fprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?now@system_clock@chrono@std@@SA?AV?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@23@XZ DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$?now@system_clock@chrono@std@@SA?AV?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@23@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@QEAA@AEBV?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@12@@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??0?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@QEAA@AEBV?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0_J$0A@@?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@chrono@std@@QEAA@AEB_J@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??$?0_J$0A@@?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@chrono@std@@QEAA@AEB_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBDH@Z DD imagerel $LN3
	DD	imagerel $LN3+116
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+123
	DD	imagerel $unwind$??0exception@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+96
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@AEAA@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$??0bad_alloc@std@@AEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_alloc@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??1bad_alloc@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_alloc@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_array_new_length@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??1bad_array_new_length@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Throw_bad_array_new_length@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?_Throw_bad_array_new_length@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD imagerel $LN21
	DD	imagerel $LN21+449
	DD	imagerel $unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD imagerel $LN4
	DD	imagerel $LN4+100
	DD	imagerel $unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@D@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??0?$allocator@D@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAPEADAEAV?$allocator@D@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$?allocate@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAPEADAEAV?$allocator@D@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ DD imagerel $LN4
	DD	imagerel $LN4+99
	DD	imagerel $unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+84
	DD	imagerel $unwind$?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?is_constant_evaluated@detail@v8@fmt@@YA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?is_constant_evaluated@detail@v8@fmt@@YA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assert_fail@detail@v8@fmt@@YAXPEBDH0@Z DD imagerel $LN3
	DD	imagerel $LN3+106
	DD	imagerel $unwind$?assert_fail@detail@v8@fmt@@YAXPEBDH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$buffer@D@detail@v8@fmt@@IEAA@PEAD_K1@Z DD imagerel $LN3
	DD	imagerel $LN3+134
	DD	imagerel $unwind$??0?$buffer@D@detail@v8@fmt@@IEAA@PEAD_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?set@?$buffer@D@detail@v8@fmt@@IEAAXPEAD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$?set@?$buffer@D@detail@v8@fmt@@IEAAXPEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$buffer@D@detail@v8@fmt@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$?size@?$buffer@D@detail@v8@fmt@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?capacity@?$buffer@D@detail@v8@fmt@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$?capacity@?$buffer@D@detail@v8@fmt@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?data@?$buffer@D@detail@v8@fmt@@QEAAPEADXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$?data@?$buffer@D@detail@v8@fmt@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?try_resize@?$buffer@D@detail@v8@fmt@@QEAAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+137
	DD	imagerel $unwind$?try_resize@?$buffer@D@detail@v8@fmt@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?try_reserve@?$buffer@D@detail@v8@fmt@@QEAAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+106
	DD	imagerel $unwind$?try_reserve@?$buffer@D@detail@v8@fmt@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$to_unsigned@_J@detail@v8@fmt@@YA_K_J@Z DD imagerel $LN5
	DD	imagerel $LN5+84
	DD	imagerel $unwind$??$to_unsigned@_J@detail@v8@fmt@@YA_K_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string_view@D@v8@fmt@@QEAA@PEBD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+93
	DD	imagerel $unwind$??0?$basic_string_view@D@v8@fmt@@QEAA@PEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string_view@D@v8@fmt@@QEAA@PEBD@Z DD imagerel $LN7
	DD	imagerel $LN7+172
	DD	imagerel $unwind$??0?$basic_string_view@D@v8@fmt@@QEAA@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$basic_string_view@D@v8@fmt@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$?size@?$basic_string_view@D@v8@fmt@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?begin@?$basic_string_view@D@v8@fmt@@QEBAPEBDXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?begin@?$basic_string_view@D@v8@fmt@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?end@?$basic_string_view@D@v8@fmt@@QEBAPEBDXZ DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$?end@?$basic_string_view@D@v8@fmt@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0id@locale@std@@QEAA@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??0id@locale@std@@QEAA@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Adl_verify_range@PEADPEAD@std@@YAXAEBQEAD0@Z DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$??$_Adl_verify_range@PEADPEAD@std@@YAXAEBQEAD0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0source_loc@spdlog@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$??0source_loc@spdlog@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+125
	DD	imagerel $unwind$?deallocate@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?grow@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@MEAAX_K@Z DD imagerel $LN9
	DD	imagerel $LN9+461
	DD	imagerel $unwind$?grow@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@MEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAA@AEBV?$allocator@D@std@@@Z DD imagerel $LN3
	DD	imagerel $LN3+122
	DD	imagerel $unwind$??0?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAA@AEBV?$allocator@D@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$??1?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?move@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@AEAAXAEAV123@@Z DD imagerel $LN5
	DD	imagerel $LN5+337
	DD	imagerel $unwind$?move@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@AEAAXAEAV123@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAAAEAV012@$$QEAV012@@Z DD imagerel $LN5
	DD	imagerel $LN5+126
	DD	imagerel $unwind$??4?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAAAEAV012@$$QEAV012@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$?resize@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?lock@_Mutex_base@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?lock@_Mutex_base@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?unlock@_Mutex_base@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$?unlock@_Mutex_base@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Mymtx@_Mutex_base@std@@AEAAPEAU_Mtx_internal_imp_t@@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?_Mymtx@_Mutex_base@std@@AEAAPEAU_Mtx_internal_imp_t@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$lock_guard@Vmutex@std@@@std@@QEAA@AEAVmutex@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??0?$lock_guard@Vmutex@std@@@std@@QEAA@AEAVmutex@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$lock_guard@Vmutex@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??1?$lock_guard@Vmutex@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get@?$_Ptr_base@Vlogger@spdlog@@@std@@IEBAPEAVlogger@spdlog@@XZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?get@?$_Ptr_base@Vlogger@spdlog@@@std@@IEBAPEAVlogger@spdlog@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0log_msg@details@spdlog@@QEAA@V?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@Usource_loc@2@V?$basic_string_view@D@v8@fmt@@W4level_enum@level@2@2@Z DD imagerel $LN3
	DD	imagerel $LN3+216
	DD	imagerel $unwind$??0log_msg@details@spdlog@@QEAA@V?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@Usource_loc@2@V?$basic_string_view@D@v8@fmt@@W4level_enum@level@2@2@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0log_msg@details@spdlog@@QEAA@Usource_loc@2@V?$basic_string_view@D@v8@fmt@@W4level_enum@level@2@1@Z DD imagerel $LN3
	DD	imagerel $LN3+485
	DD	imagerel $unwind$??0log_msg@details@spdlog@@QEAA@Usource_loc@2@V?$basic_string_view@D@v8@fmt@@W4level_enum@level@2@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?now@os@details@spdlog@@YA?AV?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@XZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$?now@os@details@spdlog@@YA?AV?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_thread_id@os@details@spdlog@@YA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$?_thread_id@os@details@spdlog@@YA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?thread_id@os@details@spdlog@@YA_KXZ DD imagerel $LN4
	DD	imagerel $LN4+216
	DD	imagerel $unwind$?thread_id@os@details@spdlog@@YA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?update_string_views@log_msg_buffer@details@spdlog@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+262
	DD	imagerel $unwind$?update_string_views@log_msg_buffer@details@spdlog@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0log_msg_buffer@details@spdlog@@QEAA@AEBUlog_msg@12@@Z DD imagerel $LN4
	DD	imagerel $LN4+313
	DD	imagerel $unwind$??0log_msg_buffer@details@spdlog@@QEAA@AEBUlog_msg@12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0log_msg_buffer@details@spdlog@@QEAA@AEBUlog_msg@12@@Z@4HA DD imagerel ?dtor$0@?0???0log_msg_buffer@details@spdlog@@QEAA@AEBUlog_msg@12@@Z@4HA
	DD	imagerel ?dtor$0@?0???0log_msg_buffer@details@spdlog@@QEAA@AEBUlog_msg@12@@Z@4HA+43
	DD	imagerel $unwind$?dtor$0@?0???0log_msg_buffer@details@spdlog@@QEAA@AEBUlog_msg@12@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4log_msg_buffer@details@spdlog@@QEAAAEAV012@$$QEAV012@@Z DD imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$??4log_msg_buffer@details@spdlog@@QEAAAEAV012@$$QEAV012@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1log_msg_buffer@details@spdlog@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??1log_msg_buffer@details@spdlog@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$append@D@?$buffer@D@detail@v8@fmt@@QEAAXPEBD0@Z DD imagerel $LN6
	DD	imagerel $LN6+328
	DD	imagerel $unwind$??$append@D@?$buffer@D@detail@v8@fmt@@QEAAXPEBD0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAV?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@@std@@YA$$QEAV?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@AEAV123@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$move@AEAV?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@@std@@YA$$QEAV?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@AEAV123@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?load@?$_Atomic_storage@_N$00@std@@QEBA_NW4memory_order@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$?load@?$_Atomic_storage@_N$00@std@@QEBA_NW4memory_order@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$vector@Vlog_msg_buffer@details@spdlog@@V?$allocator@Vlog_msg_buffer@details@spdlog@@@std@@@std@@QEAAAEAVlog_msg_buffer@details@spdlog@@_K@Z DD imagerel $LN12
	DD	imagerel $LN12+231
	DD	imagerel $unwind$??A?$vector@Vlog_msg_buffer@details@spdlog@@V?$allocator@Vlog_msg_buffer@details@spdlog@@@std@@@std@@QEAAAEAVlog_msg_buffer@details@spdlog@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$circular_q@Vlog_msg_buffer@details@spdlog@@@details@spdlog@@QEAAX$$QEAVlog_msg_buffer@23@@Z DD imagerel $LN5
	DD	imagerel $LN5+267
	DD	imagerel $unwind$?push_back@?$circular_q@Vlog_msg_buffer@details@spdlog@@@details@spdlog@@QEAAX$$QEAVlog_msg_buffer@23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?enabled@backtracer@details@spdlog@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$?enabled@backtracer@details@spdlog@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z DD imagerel $LN5
	DD	imagerel $LN5+239
	DD	imagerel $unwind$?push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z@4HA DD imagerel ?dtor$0@?0??push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z@4HA
	DD	imagerel ?dtor$0@?0??push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z@4HA DD imagerel ?dtor$1@?0??push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z@4HA
	DD	imagerel ?dtor$1@?0??push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z@4HA+39
	DD	imagerel $unwind$?dtor$1@?0??push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?log@logger@spdlog@@QEAAXUsource_loc@2@W4level_enum@level@2@V?$basic_string_view@D@v8@fmt@@@Z DD imagerel $LN4
	DD	imagerel $LN4+503
	DD	imagerel $unwind$?log@logger@spdlog@@QEAAXUsource_loc@2@W4level_enum@level@2@V?$basic_string_view@D@v8@fmt@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?should_log@logger@spdlog@@QEBA_NW4level_enum@level@2@@Z DD imagerel $LN5
	DD	imagerel $LN5+114
	DD	imagerel $unwind$?should_log@logger@spdlog@@QEBA_NW4level_enum@level@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?load@?$_Atomic_storage@H$03@std@@QEBAHW4memory_order@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$?load@?$_Atomic_storage@H$03@std@@QEBAHW4memory_order@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?log_it_@logger@spdlog@@IEAAXAEBUlog_msg@details@2@_N1@Z DD imagerel $LN5
	DD	imagerel $LN5+158
	DD	imagerel $unwind$?log_it_@logger@spdlog@@IEAAXAEBUlog_msg@details@2@_N1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0U?$char_traits@D@std@@V?$allocator@D@1@@?$basic_string_view@D@v8@fmt@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD imagerel $LN3
	DD	imagerel $LN3+98
	DD	imagerel $unwind$??$?0U?$char_traits@D@std@@V?$allocator@D@1@@?$basic_string_view@D@v8@fmt@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?CVlogger@spdlog@@$0A@@?$shared_ptr@Vlogger@spdlog@@@std@@QEBAPEAVlogger@spdlog@@XZ DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$?CVlogger@spdlog@@$0A@@?$shared_ptr@Vlogger@spdlog@@@std@@QEBAPEAVlogger@spdlog@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetCoreLogger@Logger@Motus@@SAAEAV?$shared_ptr@Vlogger@spdlog@@@std@@XZ DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?GetCoreLogger@Logger@Motus@@SAAEAV?$shared_ptr@Vlogger@spdlog@@@std@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetClientLogger@Logger@Motus@@SAAEAV?$shared_ptr@Vlogger@spdlog@@@std@@XZ DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$?GetClientLogger@Logger@Motus@@SAAEAV?$shared_ptr@Vlogger@spdlog@@@std@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4Logger@Motus@@QEAAAEAV01@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$??4Logger@Motus@@QEAAAEAV01@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4Logger@Motus@@QEAAAEAV01@$$QEAV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$??4Logger@Motus@@QEAAAEAV01@$$QEAV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Application@Motus@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+104
	DD	imagerel $unwind$??0Application@Motus@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1Application@Motus@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$??1Application@Motus@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Run@Application@Motus@@QEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+50
	DD	imagerel $unwind$?Run@Application@Motus@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0Application@Motus@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??0Application@Motus@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4Application@Motus@@QEAAAEAV01@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$??4Application@Motus@@QEAAAEAV01@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GApplication@Motus@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$??_GApplication@Motus@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_EApplication@Motus@@UEAAPEAXI@Z DD imagerel $LN6
	DD	imagerel $LN6+194
	DD	imagerel $unwind$??_EApplication@Motus@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$info@$$BY0CC@D@logger@spdlog@@QEAAXAEAY0CC@$$CBD@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$??$info@$$BY0CC@D@logger@spdlog@@QEAAXAEAY0CC@$$CBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Atomic_address_as@HU?$_Atomic_padded@H@std@@@std@@YAPEDHAEBU?$_Atomic_padded@H@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$_Atomic_address_as@HU?$_Atomic_padded@H@std@@@std@@YAPEDHAEBU?$_Atomic_padded@H@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAVlog_msg_buffer@details@spdlog@@@std@@YA$$QEAVlog_msg_buffer@details@spdlog@@AEAV123@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$move@AEAVlog_msg_buffer@details@spdlog@@@std@@YA$$QEAVlog_msg_buffer@details@spdlog@@AEAV123@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Atomic_address_as@DU?$_Atomic_padded@_N@std@@@std@@YAPEDDAEBU?$_Atomic_padded@_N@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$_Atomic_address_as@DU?$_Atomic_padded@_N@std@@@std@@YAPEDDAEBU?$_Atomic_padded@_N@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$const_check@_N@detail@v8@fmt@@YA_N_N@Z DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$??$const_check@_N@detail@v8@fmt@@YA_N_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$make_checked@D@detail@v8@fmt@@YA?AV?$checked_array_iterator@PEAD@stdext@@PEAD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$??$make_checked@D@detail@v8@fmt@@YA?AV?$checked_array_iterator@PEAD@stdext@@PEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$checked_array_iterator@PEAD@stdext@@QEAA@QEAD_K1@Z DD imagerel $LN12
	DD	imagerel $LN12+249
	DD	imagerel $unwind$??0?$checked_array_iterator@PEAD@stdext@@QEAA@QEAD_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Verify_offset@?$checked_array_iterator@PEAD@stdext@@QEBAX_J@Z DD imagerel $LN23
	DD	imagerel $LN23+364
	DD	imagerel $unwind$?_Verify_offset@?$checked_array_iterator@PEAD@stdext@@QEBAX_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Unwrapped@?$checked_array_iterator@PEAD@stdext@@QEBAPEADXZ DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$?_Unwrapped@?$checked_array_iterator@PEAD@stdext@@QEBAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Seek_to@?$checked_array_iterator@PEAD@stdext@@QEAAXPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$?_Seek_to@?$checked_array_iterator@PEAD@stdext@@QEAAXPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$uninitialized_copy@PEADV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEAD0V12@@Z DD imagerel $LN3
	DD	imagerel $LN3+284
	DD	imagerel $unwind$??$uninitialized_copy@PEADV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEAD0V12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@D@std@@YAPEADPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$_Unfancy@D@std@@YAPEADPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+94
	DD	imagerel $unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+98
	DD	imagerel $unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$00@std@@YA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$_Get_size_of_n@$00@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Verify_range@D@std@@YAXQEBD0@Z DD imagerel $LN12
	DD	imagerel $LN12+179
	DD	imagerel $unwind$??$_Verify_range@D@std@@YAXQEBD0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$uninitialized_copy_n@PEBD_KV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEBD_KV12@@Z DD imagerel $LN4
	DD	imagerel $LN4+271
	DD	imagerel $unwind$??$uninitialized_copy_n@PEBD_KV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEBD_KV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$log@$$BY0CC@D@logger@spdlog@@QEAAXW4level_enum@level@1@AEAY0CC@$$CBD@Z DD imagerel $LN3
	DD	imagerel $LN3+243
	DD	imagerel $unwind$??$log@$$BY0CC@D@logger@spdlog@@QEAAXW4level_enum@level@1@AEAY0CC@$$CBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped@AEBQEAD@std@@YA?A_TAEBQEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$_Get_unwrapped@AEBQEAD@std@@YA?A_TAEBQEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Idl_distance@PEADPEAD@std@@YA?A_PAEBQEAD0@Z DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$??$_Idl_distance@PEADPEAD@std@@YA?A_PAEBQEAD0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped_n@AEAV?$checked_array_iterator@PEAD@stdext@@_J@std@@YA?A_TAEAV?$checked_array_iterator@PEAD@stdext@@_J@Z DD imagerel $LN13
	DD	imagerel $LN13+243
	DD	imagerel $unwind$??$_Get_unwrapped_n@AEAV?$checked_array_iterator@PEAD@stdext@@_J@std@@YA?A_TAEAV?$checked_array_iterator@PEAD@stdext@@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Uninitialized_copy_unchecked@PEADPEAD@std@@YAPEADPEADQEAD0@Z DD imagerel $LN7
	DD	imagerel $LN7+227
	DD	imagerel $unwind$??$_Uninitialized_copy_unchecked@PEADPEAD@std@@YAPEADPEADQEAD0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Uninitialized_copy_unchecked@PEADPEAD@std@@YAPEADPEADQEAD0@Z@4HA DD imagerel ?dtor$0@?0???$_Uninitialized_copy_unchecked@PEADPEAD@std@@YAPEADPEADQEAD0@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Uninitialized_copy_unchecked@PEADPEAD@std@@YAPEADPEADQEAD0@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???$_Uninitialized_copy_unchecked@PEADPEAD@std@@YAPEADPEADQEAD0@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Seek_wrapped@V?$checked_array_iterator@PEAD@stdext@@PEAD@std@@YAXAEAV?$checked_array_iterator@PEAD@stdext@@$$QEAPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??$_Seek_wrapped@V?$checked_array_iterator@PEAD@stdext@@PEAD@std@@YAXAEAV?$checked_array_iterator@PEAD@stdext@@$$QEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD imagerel $LN13
	DD	imagerel $LN13+275
	DD	imagerel $unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped_n@AEBQEBD_K@std@@YA?A_TAEBQEBD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$??$_Get_unwrapped_n@AEBQEBD_K@std@@YA?A_TAEBQEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_unwrapped_n@AEAV?$checked_array_iterator@PEAD@stdext@@_K@std@@YA?A_TAEAV?$checked_array_iterator@PEAD@stdext@@_K@Z DD imagerel $LN12
	DD	imagerel $LN12+228
	DD	imagerel $unwind$??$_Get_unwrapped_n@AEAV?$checked_array_iterator@PEAD@stdext@@_K@std@@YA?A_TAEAV?$checked_array_iterator@PEAD@stdext@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEBDPEAD@std@@YAPEADPEBD0PEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+196
	DD	imagerel $unwind$??$_Copy_memmove@PEBDPEAD@std@@YAPEADPEBD0PEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Seek_wrapped@V?$checked_array_iterator@PEAD@stdext@@AEAPEAD@std@@YAXAEAV?$checked_array_iterator@PEAD@stdext@@AEAPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??$_Seek_wrapped@V?$checked_array_iterator@PEAD@stdext@@AEAPEAD@std@@YAXAEAV?$checked_array_iterator@PEAD@stdext@@AEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Copy_memmove@PEADPEAD@std@@YAPEADPEAD00@Z DD imagerel $LN3
	DD	imagerel $LN3+196
	DD	imagerel $unwind$??$_Copy_memmove@PEADPEAD@std@@YAPEADPEAD00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Uninitialized_backout@PEAD@std@@QEAA@PEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??0?$_Uninitialized_backout@PEAD@std@@QEAA@PEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Uninitialized_backout@PEAD@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$??1?$_Uninitialized_backout@PEAD@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@?$_Uninitialized_backout@PEAD@std@@QEAAPEADXZ DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$?_Release@?$_Uninitialized_backout@PEAD@std@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Emplace_back@AEAD@?$_Uninitialized_backout@PEAD@std@@QEAAXAEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+127
	DD	imagerel $unwind$??$_Emplace_back@AEAD@?$_Uninitialized_backout@PEAD@std@@QEAAXAEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@PEAD@std@@YA$$QEAPEADAEAPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$forward@PEAD@std@@YA$$QEAPEADAEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_range@PEADPEAD@std@@YAXPEADQEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$??$_Destroy_range@PEADPEAD@std@@YAXPEADQEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ DD imagerel ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
	DD	imagerel ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ+51
	DD	imagerel $unwind$??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_To_address@PEBD@std@@YA?A_PAEBQEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$_To_address@PEBD@std@@YA?A_PAEBQEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_To_address@PEAD@std@@YA?A_PAEBQEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??$_To_address@PEAD@std@@YA?A_PAEBQEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEAD@std@@YAAEADAEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$forward@AEAD@std@@YAAEADAEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@DAEAD@std@@YAXAEAD0@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??$_Construct_in_place@DAEAD@std@@YAXAEAD0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@D@std@@YAPEADAEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$addressof@D@std@@YAPEADAEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAD@std@@YAPEAXPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$_Voidify_iter@PEAD@std@@YAPEAXPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ DD imagerel ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
	DD	imagerel ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ+51
	DD	imagerel $unwind$??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
pdata	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??id$initializer$@?$numpunct@_W@std@@2P6AXXZEA@@3P6AXXZEA DQ FLAT:??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; ??id$initializer$@?$numpunct@_W@std@@2P6AXXZEA@@3P6AXXZEA
CRT$XCU	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@Application@Motus@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Application@Motus@@8 DD imagerel ??_R0?AVApplication@Motus@@@8 ; Motus::Application::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3Application@Motus@@8
rdata$r	ENDS
;	COMDAT ??_R2Application@Motus@@8
rdata$r	SEGMENT
??_R2Application@Motus@@8 DD imagerel ??_R1A@?0A@EA@Application@Motus@@8 ; Motus::Application::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3Application@Motus@@8
rdata$r	SEGMENT
??_R3Application@Motus@@8 DD 00H			; Motus::Application::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2Application@Motus@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVApplication@Motus@@@8
data$rs	SEGMENT
??_R0?AVApplication@Motus@@@8 DQ FLAT:??_7type_info@@6B@ ; Motus::Application `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVApplication@Motus@@', 00H
data$rs	ENDS
;	COMDAT ??_R4Application@Motus@@6B@
rdata$r	SEGMENT
??_R4Application@Motus@@6B@ DD 01H			; Motus::Application::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVApplication@Motus@@@8
	DD	imagerel ??_R3Application@Motus@@8
	DD	imagerel ??_R4Application@Motus@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@8 DD imagerel ??_R0?AV?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@@8 ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@8
rdata$r	SEGMENT
??_R2?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@8 DD imagerel ??_R1A@?0A@EA@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@8 ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@?$buffer@D@detail@v8@fmt@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@8
rdata$r	SEGMENT
??_R3?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@8 DD 00H ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@@8
data$rs	SEGMENT
??_R0?AV?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@@8 DQ FLAT:??_7type_info@@6B@ ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@'
	DB	'fmt@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@6B@
rdata$r	SEGMENT
??_R4?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@6B@ DD 01H ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AV?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@@8
	DD	imagerel ??_R3?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@8
	DD	imagerel ??_R4?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$buffer@D@detail@v8@fmt@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$buffer@D@detail@v8@fmt@@8 DD imagerel ??_R0?AV?$buffer@D@detail@v8@fmt@@@8 ; fmt::v8::detail::buffer<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$buffer@D@detail@v8@fmt@@8
rdata$r	ENDS
;	COMDAT ??_R2?$buffer@D@detail@v8@fmt@@8
rdata$r	SEGMENT
??_R2?$buffer@D@detail@v8@fmt@@8 DD imagerel ??_R1A@?0A@EA@?$buffer@D@detail@v8@fmt@@8 ; fmt::v8::detail::buffer<char>::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$buffer@D@detail@v8@fmt@@8
rdata$r	SEGMENT
??_R3?$buffer@D@detail@v8@fmt@@8 DD 00H			; fmt::v8::detail::buffer<char>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2?$buffer@D@detail@v8@fmt@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$buffer@D@detail@v8@fmt@@@8
data$rs	SEGMENT
??_R0?AV?$buffer@D@detail@v8@fmt@@@8 DQ FLAT:??_7type_info@@6B@ ; fmt::v8::detail::buffer<char> `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$buffer@D@detail@v8@fmt@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$buffer@D@detail@v8@fmt@@6B@
rdata$r	SEGMENT
??_R4?$buffer@D@detail@v8@fmt@@6B@ DD 01H		; fmt::v8::detail::buffer<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AV?$buffer@D@detail@v8@fmt@@@8
	DD	imagerel ??_R3?$buffer@D@detail@v8@fmt@@8
	DD	imagerel ??_R4?$buffer@D@detail@v8@fmt@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD imagerel ??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD imagerel ??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bad_alloc@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 01H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	imagerel ??_R3bad_array_new_length@std@@8
	DD	imagerel ??_R4bad_array_new_length@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD imagerel ??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD imagerel ??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 01H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	imagerel ??_R3bad_alloc@std@@8
	DD	imagerel ??_R4bad_alloc@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@
CONST	SEGMENT
??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@
CONST	SEGMENT
??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@ DB '"'
	DB	00H, 't', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 's', 00H, 'p', 00H
	DB	'o', 00H, 's', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'p', 00H, 'o'
	DB	00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' ', 00H
	DB	'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
CONST	SEGMENT
??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'V', 00H
	DB	'e', 00H, 'r', 00H, 'i', 00H, 'f', 00H, 'y', 00H, '_', 00H, 'r'
	DB	00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@
CONST	SEGMENT
??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@ DB 'transposed pointer ran'
	DB	'ge', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1HC@HFANKADA@?$AA?$CC?$AAc?$AAh?$AAe?$AAc?$AAk?$AAe?$AAd?$AA_?$AAa?$AAr?$AAr?$AAa?$AAy?$AA_@
CONST	SEGMENT
??_C@_1HC@HFANKADA@?$AA?$CC?$AAc?$AAh?$AAe?$AAc?$AAk?$AAe?$AAd?$AA_?$AAa?$AAr?$AAr?$AAa?$AAy?$AA_@ DB '"'
	DB	00H, 'c', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, 'e', 00H
	DB	'd', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y'
	DB	00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'c', 00H, 't', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'e', 00H, 'x', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H
	DB	' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a', 00H, 'n'
	DB	00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1HO@MKKPHLPN@?$AAs?$AAt?$AAd?$AAe?$AAx?$AAt?$AA?3?$AA?3?$AAc?$AAh?$AAe?$AAc?$AAk?$AAe?$AAd@
CONST	SEGMENT
??_C@_1HO@MKKPHLPN@?$AAs?$AAt?$AAd?$AAe?$AAx?$AAt?$AA?3?$AA?3?$AAc?$AAh?$AAe?$AAc?$AAk?$AAe?$AAd@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, 'e', 00H, 'x', 00H, 't', 00H, ':', 00H
	DB	':', 00H, 'c', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, 'e'
	DB	00H, 'd', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, 'a', 00H
	DB	'y', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'h', 00H
	DB	'a', 00H, 'r', 00H, ' ', 00H, '*', 00H, '>', 00H, ':', 00H, ':'
	DB	00H, 'c', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, 'e', 00H
	DB	'd', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y'
	DB	00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@NPIEPPEB@checked_array_iterator?5construc@
CONST	SEGMENT
??_C@_0DH@NPIEPPEB@checked_array_iterator?5construc@ DB 'checked_array_it'
	DB	'erator construction index out of range', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@NOCFBGDF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAc?$AAh@
CONST	SEGMENT
??_C@_1HA@NOCFBGDF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAc?$AAh@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 's', 00H, 'e', 00H, 'e', 00H, 'k', 00H, ' ', 00H, 'c'
	DB	00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, 'e', 00H, 'd', 00H
	DB	'_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, '_'
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'a', 00H
	DB	'f', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'e', 00H, 'n'
	DB	00H, 'd', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@GKAODMBN@cannot?5seek?5checked_array_itera@
CONST	SEGMENT
??_C@_0DG@GKAODMBN@cannot?5seek?5checked_array_itera@ DB 'cannot seek che'
	DB	'cked_array_iterator iterator after end', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HG@FONEJMKF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAc?$AAh@
CONST	SEGMENT
??_C@_1HG@FONEJMKF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAc?$AAh@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 's', 00H, 'e', 00H, 'e', 00H, 'k', 00H, ' ', 00H, 'c'
	DB	00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, 'e', 00H, 'd', 00H
	DB	'_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, '_'
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'b', 00H
	DB	'e', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'e', 00H, ' ', 00H, 'b'
	DB	00H, 'e', 00H, 'g', 00H, 'i', 00H, 'n', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GO@KEIDFPGF@?$AAs?$AAt?$AAd?$AAe?$AAx?$AAt?$AA?3?$AA?3?$AAc?$AAh?$AAe?$AAc?$AAk?$AAe?$AAd@
CONST	SEGMENT
??_C@_1GO@KEIDFPGF@?$AAs?$AAt?$AAd?$AAe?$AAx?$AAt?$AA?3?$AA?3?$AAc?$AAh?$AAe?$AAc?$AAk?$AAe?$AAd@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, 'e', 00H, 'x', 00H, 't', 00H, ':', 00H
	DB	':', 00H, 'c', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, 'e'
	DB	00H, 'd', 00H, '_', 00H, 'a', 00H, 'r', 00H, 'r', 00H, 'a', 00H
	DB	'y', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'h', 00H
	DB	'a', 00H, 'r', 00H, ' ', 00H, '*', 00H, '>', 00H, ':', 00H, ':'
	DB	00H, '_', 00H, 'V', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'f', 00H
	DB	'y', 00H, '_', 00H, 'o', 00H, 'f', 00H, 'f', 00H, 's', 00H, 'e'
	DB	00H, 't', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1NC@DKNICPIG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NC@DKNICPIG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '9', 00H, '.', 00H, '3', 00H, '0', 00H, '0', 00H
	DB	'3', 00H, '7', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'i', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0GJ@MPPPDAKC@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GJ@MPPPDAKC@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.29.30037\include\iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@IMDMDBOM@cannot?5seek?5checked_array_itera@
CONST	SEGMENT
??_C@_0DJ@IMDMDBOM@cannot?5seek?5checked_array_itera@ DB 'cannot seek che'
	DB	'cked_array_iterator iterator before begin', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@NMONALKO@?$AA?$CC?$AAi?$AAn?$AAt?$AAe?$AAg?$AAe?$AAr?$AA?5?$AAo?$AAv?$AAe?$AAr?$AAf?$AAl@
CONST	SEGMENT
??_C@_1CG@NMONALKO@?$AA?$CC?$AAi?$AAn?$AAt?$AAe?$AAg?$AAe?$AAr?$AA?5?$AAo?$AAv?$AAe?$AAr?$AAf?$AAl@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'g', 00H, 'e', 00H
	DB	'r', 00H, ' ', 00H, 'o', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 'f'
	DB	00H, 'l', 00H, 'o', 00H, 'w', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@MJCLAPGA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAG?$AAe?$AAt?$AA_?$AAu?$AAn?$AAw?$AAr?$AAa@
CONST	SEGMENT
??_C@_1CM@MJCLAPGA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAG?$AAe?$AAt?$AA_?$AAu?$AAn?$AAw?$AAr?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'G', 00H
	DB	'e', 00H, 't', 00H, '_', 00H, 'u', 00H, 'n', 00H, 'w', 00H, 'r'
	DB	00H, 'a', 00H, 'p', 00H, 'p', 00H, 'e', 00H, 'd', 00H, '_', 00H
	DB	'n', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1NC@HPCGBKBF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NC@HPCGBKBF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '9', 00H, '.', 00H, '3', 00H, '0', 00H, '0', 00H
	DB	'3', 00H, '7', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'u', 00H
	DB	't', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0GJ@LJDCNNIF@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GJ@LJDCNNIF@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.29.30037\include\xutility', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KBEKGHFK@integer?5overflow@
CONST	SEGMENT
??_C@_0BB@KBEKGHFK@integer?5overflow@ DB 'integer overflow', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FI@IKCGCHNG@C?3?2Users?2DANIL?2source?2repos?2Mot@
CONST	SEGMENT
??_C@_0FI@IKCGCHNG@C?3?2Users?2DANIL?2source?2repos?2Mot@ DB 'C:\Users\DA'
	DB	'NIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\fmt'
	DB	'\bundled\core.h', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LKAHFCLP@negative?5value@
CONST	SEGMENT
??_C@_0P@LKAHFCLP@negative?5value@ DB 'negative value', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
CONST	SEGMENT
??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1PK@GDDHBHML@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa@
CONST	SEGMENT
??_C@_1PK@GDDHBHML@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H, 'l'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 'p', 00H
	DB	'd', 00H, 'l', 00H, 'o', 00H, 'g', 00H, ':', 00H, ':', 00H, 'd'
	DB	00H, 'e', 00H, 't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 's', 00H
	DB	':', 00H, ':', 00H, 'l', 00H, 'o', 00H, 'g', 00H, '_', 00H, 'm'
	DB	00H, 's', 00H, 'g', 00H, '_', 00H, 'b', 00H, 'u', 00H, 'f', 00H
	DB	'f', 00H, 'e', 00H, 'r', 00H, ',', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 't', 00H, 'd', 00H
	DB	':', 00H, ':', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '<', 00H, 'c', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 's', 00H, 'p'
	DB	00H, 'd', 00H, 'l', 00H, 'o', 00H, 'g', 00H, ':', 00H, ':', 00H
	DB	'd', 00H, 'e', 00H, 't', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 's'
	DB	00H, ':', 00H, ':', 00H, 'l', 00H, 'o', 00H, 'g', 00H, '_', 00H
	DB	'm', 00H, 's', 00H, 'g', 00H, '_', 00H, 'b', 00H, 'u', 00H, 'f'
	DB	00H, 'f', 00H, 'e', 00H, 'r', 00H, '>', 00H, ' ', 00H, '>', 00H
	DB	':', 00H, ':', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '[', 00H, ']', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
CONST	SEGMENT
??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ DB 'vector subscrip'
	DB	't out of range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1MO@MBPFCBOF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MO@MBPFCBOF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '9', 00H, '.', 00H, '3', 00H, '0', 00H, '0', 00H
	DB	'3', 00H, '7', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GH@IJJCCHP@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GH@IJJCCHP@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Prog'
	DB	'ram Files (x86)\Microsoft Visual Studio\2019\Community\VC\Too'
	DB	'ls\MSVC\14.29.30037\include\vector', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@MLJOHFGA@Application?5created?5successfull@
CONST	SEGMENT
??_C@_0CC@MLJOHFGA@Application?5created?5successfull@ DB 'Application cre'
	DB	'ated successfully.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7Application@Motus@@6B@
CONST	SEGMENT
??_7Application@Motus@@6B@ DQ FLAT:??_R4Application@Motus@@6B@ ; Motus::Application::`vftable'
	DQ	FLAT:??_EApplication@Motus@@UEAAPEAXI@Z
CONST	ENDS
;	COMDAT ??_7?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@6B@
CONST	SEGMENT
??_7?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@6B@ DQ FLAT:??_R4?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@6B@ ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::`vftable'
	DQ	FLAT:?grow@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@MEAAX_K@Z
CONST	ENDS
;	COMDAT ??_C@_0BM@NGPMNKJI@?$CFs?3?$CFd?3?5assertion?5failed?3?5?$CFs@
CONST	SEGMENT
??_C@_0BM@NGPMNKJI@?$CFs?3?$CFd?3?5assertion?5failed?3?5?$CFs@ DB '%s:%d:'
	DB	' assertion failed: %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FK@ILDHDHAM@C?3?2Users?2DANIL?2source?2repos?2Mot@
CONST	SEGMENT
??_C@_0FK@ILDHDHAM@C?3?2Users?2DANIL?2source?2repos?2Mot@ DB 'C:\Users\DA'
	DB	'NIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\fmt'
	DB	'\bundled\format.h', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_7?$buffer@D@detail@v8@fmt@@6B@
CONST	SEGMENT
??_7?$buffer@D@detail@v8@fmt@@6B@ DQ FLAT:??_R4?$buffer@D@detail@v8@fmt@@6B@ ; fmt::v8::detail::buffer<char>::`vftable'
	DQ	FLAT:_purecall
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
CONST	SEGMENT
??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'd', 00H, 'j', 00H, 'u', 00H, 's', 00H, 't', 00H, '_', 00H, 'm'
	DB	00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@FOAKNOEL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NA@FOAKNOEL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '9', 00H, '.', 00H, '3', 00H, '0', 00H, '0', 00H
	DB	'3', 00H, '7', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@KDIDHNIL@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GI@KDIDHNIL@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.29.30037\include\xmemory', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA DD 099H ; `std::_Adjust_manually_vector_aligned'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0exception@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24 DD 010H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_alloc@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT _CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	imagerel _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_TI3?AVbad_array_new_length@std@@ DD 00H
	DD	imagerel ??1bad_array_new_length@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DQ FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DQ	FLAT:??_Ebad_array_new_length@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DQ FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DQ	FLAT:??_Ebad_alloc@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_1CG@GPPLBDPC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAo?$AAa?$AAd?$AA_?$AAb?$AAa?$AAr?$AAr@
CONST	SEGMENT
??_C@_1CG@GPPLBDPC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAo?$AAa?$AAd?$AA_?$AAb?$AAa?$AAr?$AAr@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'L', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, '_', 00H, 'b', 00H, 'a', 00H, 'r'
	DB	00H, 'r', 00H, 'i', 00H, 'e', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Load_barrier@std@@YAXW4memory_order@2@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Load_barrier@std@@YAXW4memory_order@2@@Z@4JA DD 017cH ; `std::_Load_barrier'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CO@JOMFDNFG@?$AA?$CC?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy@
CONST	SEGMENT
??_C@_1CO@JOMFDNFG@?$AA?$CC?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy@ DB '"'
	DB	00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r'
	DB	00H, 'y', 00H, ' ', 00H, 'o', 00H, 'r', 00H, 'd', 00H, 'e', 00H
	DB	'r', 00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1MO@BCADAPLD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MO@BCADAPLD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '9', 00H, '.', 00H, '3', 00H, '0', 00H, '0', 00H
	DB	'3', 00H, '7', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'm', 00H, 'i', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GH@NNNPPLLH@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GH@NNNPPLLH@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.29.30037\include\atomic', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FBDAHHJI@Invalid?5memory?5order@
CONST	SEGMENT
??_C@_0BF@FBDAHHJI@Invalid?5memory?5order@ DB 'Invalid memory order', 00H ; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAD@std@@YAPEAXPEAD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@D@std@@YAPEADAEAD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@DAEAD@std@@YAXAEAD0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEAD@std@@YAAEADAEAD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_To_address@PEAD@std@@YA?A_PAEBQEAD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_To_address@PEBD@std@@YA?A_PAEBQEBD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_range@PEADPEAD@std@@YAXPEADQEAD@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@PEAD@std@@YA$$QEAPEADAEAPEAD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Emplace_back@AEAD@?$_Uninitialized_backout@PEAD@std@@QEAAXAEAD@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@?$_Uninitialized_backout@PEAD@std@@QEAAPEADXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Uninitialized_backout@PEAD@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Uninitialized_backout@PEAD@std@@QEAA@PEAD@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEADPEAD@std@@YAPEADPEAD00@Z DD 025051d01H
	DD	0118231dH
	DD	070110039H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Seek_wrapped@V?$checked_array_iterator@PEAD@stdext@@AEAPEAD@std@@YAXAEAV?$checked_array_iterator@PEAD@stdext@@AEAPEAD@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Copy_memmove@PEBDPEAD@std@@YAPEADPEBD0PEAD@Z DD 025051d01H
	DD	0118231dH
	DD	070110039H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped_n@AEAV?$checked_array_iterator@PEAD@stdext@@_K@std@@YA?A_TAEAV?$checked_array_iterator@PEAD@stdext@@_K@Z DD 035051801H
	DD	01133318H
	DD	0700c0023H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped_n@AEBQEBD_K@std@@YA?A_TAEBQEBD_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD 035051301H
	DD	010e3313H
	DD	07007002bH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Seek_wrapped@V?$checked_array_iterator@PEAD@stdext@@PEAD@std@@YAXAEAV?$checked_array_iterator@PEAD@stdext@@$$QEAPEAD@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Uninitialized_copy_unchecked@PEADPEAD@std@@YAPEADPEADQEAD0@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Uninitialized_copy_unchecked@PEADPEAD@std@@YAPEADPEADQEAD0@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Uninitialized_copy_unchecked@PEADPEAD@std@@YAPEADPEADQEAD0@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Uninitialized_copy_unchecked@PEADPEAD@std@@YAPEADPEADQEAD0@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Uninitialized_copy_unchecked@PEADPEAD@std@@YAPEADPEADQEAD0@Z DB 028H
	DD	imagerel $stateUnwindMap$??$_Uninitialized_copy_unchecked@PEADPEAD@std@@YAPEADPEADQEAD0@Z
	DD	imagerel $ip2state$??$_Uninitialized_copy_unchecked@PEADPEAD@std@@YAPEADPEADQEAD0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Uninitialized_copy_unchecked@PEADPEAD@std@@YAPEADPEADQEAD0@Z DD 025053611H
	DD	0118231dH
	DD	070110027H
	DD	05010H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Uninitialized_copy_unchecked@PEADPEAD@std@@YAPEADPEADQEAD0@Z
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Uninitialized_copy_unchecked@PEADPEAD@std@@YAPEADPEADQEAD0@Z$rtcName$0 DB 05fH ; std::_Uninitialized_copy_unchecked<char *,char *>
	DB	042H
	DB	061H
	DB	063H
	DB	06bH
	DB	06fH
	DB	075H
	DB	074H
	DB	00H
	ORG $+7
??$_Uninitialized_copy_unchecked@PEADPEAD@std@@YAPEADPEADQEAD0@Z$rtcVarDesc DD 028H ; std::_Uninitialized_copy_unchecked<char *,char *>
	DD	010H
	DQ	FLAT:??$_Uninitialized_copy_unchecked@PEADPEAD@std@@YAPEADPEADQEAD0@Z$rtcName$0
	ORG $+48
??$_Uninitialized_copy_unchecked@PEADPEAD@std@@YAPEADPEADQEAD0@Z$rtcFrameData DD 01H ; std::_Uninitialized_copy_unchecked<char *,char *>
	DD	00H
	DQ	FLAT:??$_Uninitialized_copy_unchecked@PEADPEAD@std@@YAPEADPEADQEAD0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped_n@AEAV?$checked_array_iterator@PEAD@stdext@@_J@std@@YA?A_TAEAV?$checked_array_iterator@PEAD@stdext@@_J@Z DD 035051801H
	DD	01133318H
	DD	0700c0023H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Idl_distance@PEADPEAD@std@@YA?A_PAEBQEAD0@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_unwrapped@AEBQEAD@std@@YA?A_TAEBQEAD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$log@$$BY0CC@D@logger@spdlog@@QEAAXW4level_enum@level@1@AEAY0CC@$$CBD@Z DD 025061d01H
	DD	0118231dH
	DD	070110046H
	DD	0500f6010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$uninitialized_copy_n@PEBD_KV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEBD_KV12@@Z DD 025063c01H
	DD	011e2323H
	DD	070170028H
	DD	050156016H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$uninitialized_copy_n@PEBD_KV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEBD_KV12@@Z$rtcName$0 DB 05fH ; std::uninitialized_copy_n<char const *,unsigned __int64,stdext::checked_array_iterator<char *> >
	DB	055H
	DB	044H
	DB	065H
	DB	073H
	DB	074H
	DB	00H
	ORG $+9
??$uninitialized_copy_n@PEBD_KV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEBD_KV12@@Z$rtcVarDesc DD 068H ; std::uninitialized_copy_n<char const *,unsigned __int64,stdext::checked_array_iterator<char *> >
	DD	08H
	DQ	FLAT:??$uninitialized_copy_n@PEBD_KV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEBD_KV12@@Z$rtcName$0
	ORG $+48
??$uninitialized_copy_n@PEBD_KV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEBD_KV12@@Z$rtcFrameData DD 01H ; std::uninitialized_copy_n<char const *,unsigned __int64,stdext::checked_array_iterator<char *> >
	DD	00H
	DQ	FLAT:??$uninitialized_copy_n@PEBD_KV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEBD_KV12@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Verify_range@D@std@@YAXQEBD0@Z DD 035051801H
	DD	01133318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$00@std@@YA_K_K@Z DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD 025051819H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@D@std@@YAPEADPEAD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$uninitialized_copy@PEADV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEAD0V12@@Z DD 025063c01H
	DD	011e2323H
	DD	07017002eH
	DD	050156016H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$uninitialized_copy@PEADV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEAD0V12@@Z$rtcName$0 DB 05fH ; std::uninitialized_copy<char *,stdext::checked_array_iterator<char *> >
	DB	055H
	DB	046H
	DB	069H
	DB	072H
	DB	073H
	DB	074H
	DB	00H
??$uninitialized_copy@PEADV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEAD0V12@@Z$rtcName$1 DB 05fH ; std::uninitialized_copy<char *,stdext::checked_array_iterator<char *> >
	DB	055H
	DB	04cH
	DB	061H
	DB	073H
	DB	074H
	DB	00H
	ORG $+1
??$uninitialized_copy@PEADV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEAD0V12@@Z$rtcVarDesc DD 048H ; std::uninitialized_copy<char *,stdext::checked_array_iterator<char *> >
	DD	08H
	DQ	FLAT:??$uninitialized_copy@PEADV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEAD0V12@@Z$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:??$uninitialized_copy@PEADV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEAD0V12@@Z$rtcName$0
	ORG $+96
??$uninitialized_copy@PEADV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEAD0V12@@Z$rtcFrameData DD 02H ; std::uninitialized_copy<char *,stdext::checked_array_iterator<char *> >
	DD	00H
	DQ	FLAT:??$uninitialized_copy@PEADV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEAD0V12@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Seek_to@?$checked_array_iterator@PEAD@stdext@@QEAAXPEAD@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Unwrapped@?$checked_array_iterator@PEAD@stdext@@QEBAPEADXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Verify_offset@?$checked_array_iterator@PEAD@stdext@@QEBAX_J@Z DD 035051801H
	DD	01133318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$checked_array_iterator@PEAD@stdext@@QEAA@QEAD_K1@Z DD 035052201H
	DD	011d3322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$make_checked@D@detail@v8@fmt@@YA?AV?$checked_array_iterator@PEAD@stdext@@PEAD_K@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$const_check@_N@detail@v8@fmt@@YA_N_N@Z DD 025051201H
	DD	010d2312H
	DD	07006001dH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Atomic_address_as@DU?$_Atomic_padded@_N@std@@@std@@YAPEDDAEBU?$_Atomic_padded@_N@0@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAVlog_msg_buffer@details@spdlog@@@std@@YA$$QEAVlog_msg_buffer@details@spdlog@@AEAV123@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Atomic_address_as@HU?$_Atomic_padded@H@std@@@std@@YAPEDHAEBU?$_Atomic_padded@H@0@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$info@$$BY0CC@D@logger@spdlog@@QEAAXAEAY0CC@$$CBD@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??_EApplication@Motus@@UEAAPEAXI@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??_EApplication@Motus@@UEAAPEAXI@Z DB 060H
	DD	imagerel $ip2state$??_EApplication@Motus@@UEAAPEAXI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_EApplication@Motus@@UEAAPEAXI@Z DD 025051719H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??_EApplication@Motus@@UEAAPEAXI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GApplication@Motus@@UEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4Application@Motus@@QEAAAEAV01@AEBV01@@Z DD 05051601H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Application@Motus@@QEAA@AEBV01@@Z DD 05051601H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Run@Application@Motus@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1Application@Motus@@UEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0Application@Motus@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4Logger@Motus@@QEAAAEAV01@$$QEAV01@@Z DD 05051601H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4Logger@Motus@@QEAAAEAV01@AEBV01@@Z DD 05051601H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetClientLogger@Logger@Motus@@SAAEAV?$shared_ptr@Vlogger@spdlog@@@std@@XZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetCoreLogger@Logger@Motus@@SAAEAV?$shared_ptr@Vlogger@spdlog@@@std@@XZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?CVlogger@spdlog@@$0A@@?$shared_ptr@Vlogger@spdlog@@@std@@QEBAPEAVlogger@spdlog@@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0U?$char_traits@D@std@@V?$allocator@D@1@@?$basic_string_view@D@v8@fmt@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?log_it_@logger@spdlog@@IEAAXAEBUlog_msg@details@2@_N1@Z DD 025052201H
	DD	011d2322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	03aH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?load@?$_Atomic_storage@H$03@std@@QEBAHW4memory_order@2@@Z DD 025051701H
	DD	01122317H
	DD	0700b0025H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?should_log@logger@spdlog@@QEBA_NW4level_enum@level@2@@Z DD 025051701H
	DD	01122317H
	DD	0700b001fH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?log@logger@spdlog@@QEAAXUsource_loc@2@W4level_enum@level@2@V?$basic_string_view@D@v8@fmt@@@Z DD 035063c01H
	DD	011e3323H
	DD	070170090H
	DD	050156016H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?log@logger@spdlog@@QEAAXUsource_loc@2@W4level_enum@level@2@V?$basic_string_view@D@v8@fmt@@@Z$rtcName$0 DB 06cH ; spdlog::logger::log
	DB	06fH
	DB	067H
	DB	05fH
	DB	06dH
	DB	073H
	DB	067H
	DB	00H
	ORG $+8
?log@logger@spdlog@@QEAAXUsource_loc@2@W4level_enum@level@2@V?$basic_string_view@D@v8@fmt@@@Z$rtcVarDesc DD 080H ; spdlog::logger::log
	DD	060H
	DQ	FLAT:?log@logger@spdlog@@QEAAXUsource_loc@2@W4level_enum@level@2@V?$basic_string_view@D@v8@fmt@@@Z$rtcName$0
	ORG $+48
?log@logger@spdlog@@QEAAXUsource_loc@2@W4level_enum@level@2@V?$basic_string_view@D@v8@fmt@@@Z$rtcFrameData DD 01H ; spdlog::logger::log
	DD	00H
	DQ	FLAT:?log@logger@spdlog@@QEAAXUsource_loc@2@W4level_enum@level@2@V?$basic_string_view@D@v8@fmt@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	03bH
	DB	0d6H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z DB 0aH
	DB	00H
	DB	00H
	DB	0c4H
	DB	02H
	DB	't'
	DB	04H
	DB	'('
	DB	02H
	DB	01aH
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0??push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0??push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z DB 028H
	DD	imagerel $stateUnwindMap$?push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z
	DD	imagerel $ip2state$?push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z DD 025054219H
	DD	01132318H
	DD	0700c0059H
	DD	0500bH
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z
	DD	02b2H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z$rtcName$0 DB 06cH ; spdlog::details::backtracer::push_back
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+11
?push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z$rtcVarDesc DD 028H ; spdlog::details::backtracer::push_back
	DD	08H
	DQ	FLAT:?push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z$rtcName$0
	ORG $+48
?push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z$rtcFrameData DD 01H ; spdlog::details::backtracer::push_back
	DD	00H
	DQ	FLAT:?push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?enabled@backtracer@details@spdlog@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$circular_q@Vlog_msg_buffer@details@spdlog@@@details@spdlog@@QEAAX$$QEAVlog_msg_buffer@23@@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$vector@Vlog_msg_buffer@details@spdlog@@V?$allocator@Vlog_msg_buffer@details@spdlog@@@std@@@std@@QEAAAEAVlog_msg_buffer@details@spdlog@@_K@Z DD 035051801H
	DD	01133318H
	DD	0700c0023H
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	03aH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?load@?$_Atomic_storage@_N$00@std@@QEBA_NW4memory_order@2@@Z DD 025051701H
	DD	01122317H
	DD	0700b0025H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAV?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@@std@@YA$$QEAV?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@AEAV123@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$append@D@?$buffer@D@detail@v8@fmt@@QEAAXPEBD0@Z DD 025061e01H
	DD	0119231eH
	DD	070120038H
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1log_msg_buffer@details@spdlog@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??4log_msg_buffer@details@spdlog@@QEAAAEAV012@$$QEAV012@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??4log_msg_buffer@details@spdlog@@QEAAAEAV012@$$QEAV012@@Z DB 060H
	DD	imagerel $ip2state$??4log_msg_buffer@details@spdlog@@QEAAAEAV012@$$QEAV012@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4log_msg_buffer@details@spdlog@@QEAAAEAV012@$$QEAV012@@Z DD 025061919H
	DD	01142319H
	DD	0700d001cH
	DD	0500b600cH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??4log_msg_buffer@details@spdlog@@QEAAAEAV012@$$QEAV012@@Z
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0log_msg_buffer@details@spdlog@@QEAA@AEBUlog_msg@12@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0log_msg_buffer@details@spdlog@@QEAA@AEBUlog_msg@12@@Z DB 06H
	DB	00H
	DB	00H
	DB	0d0H
	DB	02H
	DB	0fdH, 02H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0log_msg_buffer@details@spdlog@@QEAA@AEBUlog_msg@12@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0log_msg_buffer@details@spdlog@@QEAA@AEBUlog_msg@12@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0log_msg_buffer@details@spdlog@@QEAA@AEBUlog_msg@12@@Z DB 028H
	DD	imagerel $stateUnwindMap$??0log_msg_buffer@details@spdlog@@QEAA@AEBUlog_msg@12@@Z
	DD	imagerel $ip2state$??0log_msg_buffer@details@spdlog@@QEAA@AEBUlog_msg@12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0log_msg_buffer@details@spdlog@@QEAA@AEBUlog_msg@12@@Z DD 025061911H
	DD	01142319H
	DD	0700d0022H
	DD	0500b600cH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0log_msg_buffer@details@spdlog@@QEAA@AEBUlog_msg@12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?update_string_views@log_msg_buffer@details@spdlog@@AEAAXXZ DD 025061401H
	DD	010f2314H
	DD	07008002aH
	DD	050066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?thread_id@os@details@spdlog@@YA_KXZ DD 025050f01H
	DD	010a230fH
	DD	07003001fH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_thread_id@os@details@spdlog@@YA_KXZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?now@os@details@spdlog@@YA?AV?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0log_msg@details@spdlog@@QEAA@Usource_loc@2@V?$basic_string_view@D@v8@fmt@@W4level_enum@level@2@1@Z DD 035062301H
	DD	011e3323H
	DD	070170090H
	DD	050156016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0log_msg@details@spdlog@@QEAA@V?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@Usource_loc@2@V?$basic_string_view@D@v8@fmt@@W4level_enum@level@2@2@Z DD 025062301H
	DD	011e2323H
	DD	07017001cH
	DD	050156016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get@?$_Ptr_base@Vlogger@spdlog@@@std@@IEBAPEAVlogger@spdlog@@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$lock_guard@Vmutex@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$lock_guard@Vmutex@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1?$lock_guard@Vmutex@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$lock_guard@Vmutex@std@@@std@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$lock_guard@Vmutex@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$lock_guard@Vmutex@std@@@std@@QEAA@AEAVmutex@1@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Mymtx@_Mutex_base@std@@AEAAPEAU_Mtx_internal_imp_t@@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?unlock@_Mutex_base@std@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?lock@_Mutex_base@std@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAAX_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??4?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAAAEAV012@$$QEAV012@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??4?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAAAEAV012@$$QEAV012@@Z DB 060H
	DD	imagerel $ip2state$??4?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAAAEAV012@$$QEAV012@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAAAEAV012@$$QEAV012@@Z DD 025051819H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??4?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAAAEAV012@$$QEAV012@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?move@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@AEAAXAEAV123@@Z DD 025061901H
	DD	01142319H
	DD	0700d003cH
	DD	0500b600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAA@AEBV?$allocator@D@std@@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?grow@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@MEAAX_K@Z DD 025061901H
	DD	01142319H
	DD	0700d004aH
	DD	0500b600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@AEAAXXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0source_loc@spdlog@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Adl_verify_range@PEADPEAD@std@@YAXAEBQEAD0@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0id@locale@std@@QEAA@_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?end@?$basic_string_view@D@v8@fmt@@QEBAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?begin@?$basic_string_view@D@v8@fmt@@QEBAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$basic_string_view@D@v8@fmt@@QEBA_KXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string_view@D@v8@fmt@@QEAA@PEBD@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string_view@D@v8@fmt@@QEAA@PEBD_K@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$to_unsigned@_J@detail@v8@fmt@@YA_K_J@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?try_reserve@?$buffer@D@detail@v8@fmt@@QEAAX_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?try_resize@?$buffer@D@detail@v8@fmt@@QEAAX_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?data@?$buffer@D@detail@v8@fmt@@QEAAPEADXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?capacity@?$buffer@D@detail@v8@fmt@@QEBA_KXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$buffer@D@detail@v8@fmt@@QEBA_KXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?set@?$buffer@D@detail@v8@fmt@@IEAAXPEAD_K@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$buffer@D@detail@v8@fmt@@IEAA@PEAD_K1@Z DD 025052201H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assert_fail@detail@v8@fmt@@YAXPEBDH0@Z DD 035051c01H
	DD	0117331cH
	DD	07010001fH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?is_constant_evaluated@detail@v8@fmt@@YA_NXZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAPEADAEAV?$allocator@D@2@_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@D@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD 035051801H
	DD	01133318H
	DD	0700c002fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Throw_bad_array_new_length@std@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	070030023H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_array_new_length@std@@UEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_alloc@std@@UEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@AEAA@QEBD@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBDH@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0_J$0A@@?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@chrono@std@@QEAA@AEB_J@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@QEAA@AEBV?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@12@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?now@system_clock@chrono@std@@SA?AV?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@23@XZ DD 025051301H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fprintf DD 025053b01H
	DD	011d2322H
	DD	070160029H
	DD	05015H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
fprintf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
fprintf$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:fprintf$rtcName$0
	ORG $+48
fprintf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:fprintf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 035052201H
	DD	011d3322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Load_barrier@std@@YAXW4memory_order@1@@Z DD 035051201H
	DD	010d3312H
	DD	070060021H
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Check_C_return@std@@YAHH@Z DD 025051201H
	DD	010d2312H
	DD	07006001dH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KPEAX@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD 025052201H
	DD	011d2322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
??id$initializer$@?$numpunct@D@std@@2P6AXXZEA@@3P6AXXZEA DQ FLAT:??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; ??id$initializer$@?$numpunct@D@std@@2P6AXXZEA@@3P6AXXZEA
CRT$XCU	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ
text$di	SEGMENT
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<char>::id'', COMDAT

; 263  : __PURE_APPDOMAIN_GLOBAL locale::id numpunct<_Elem>::id;

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E85225E0_xlocnum
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001b	33 d2		 xor	 edx, edx
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
  00024	e8 00 00 00 00	 call	 ??0id@locale@std@@QEAA@_K@Z ; std::locale::id::id
  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<char>::id''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Voidify_iter@PEAD@std@@YAPEAXPEAD@Z
_TEXT	SEGMENT
_It$ = 224
??$_Voidify_iter@PEAD@std@@YAPEAXPEAD@Z PROC		; std::_Voidify_iter<char *>, COMDAT

; 130  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7CE971A6_xutility
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 131  :     if constexpr (is_pointer_v<_Iter>) {
; 132  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _It$[rbp]

; 133  :     } else {
; 134  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 135  :     }
; 136  : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$_Voidify_iter@PEAD@std@@YAPEAXPEAD@Z ENDP		; std::_Voidify_iter<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPEADAEAD@Z
_TEXT	SEGMENT
_Val$ = 224
??$addressof@D@std@@YAPEADAEAD@Z PROC			; std::addressof<char>, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__40B2458B_xstddef
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 275  :     return __builtin_addressof(_Val);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]

; 276  : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$addressof@D@std@@YAPEADAEAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Construct_in_place@DAEAD@std@@YAXAEAD0@Z
_TEXT	SEGMENT
$T1 = 200
_Obj$ = 256
<_Args_0>$ = 264
??$_Construct_in_place@DAEAD@std@@YAXAEAD0@Z PROC	; std::_Construct_in_place<char,char &>, COMDAT

; 151  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7CE971A6_xutility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Obj$[rbp]
  0002b	e8 00 00 00 00	 call	 ??$addressof@D@std@@YAPEADAEAD@Z ; std::addressof<char>
  00030	48 8b c8	 mov	 rcx, rax
  00033	e8 00 00 00 00	 call	 ??$_Voidify_iter@PEAD@std@@YAPEAXPEAD@Z ; std::_Voidify_iter<char *>
  00038	48 8b d0	 mov	 rdx, rax
  0003b	b9 01 00 00 00	 mov	 ecx, 1
  00040	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  00045	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  0004c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR <_Args_0>$[rbp]
  00053	e8 00 00 00 00	 call	 ??$forward@AEAD@std@@YAAEADAEAD@Z ; std::forward<char &>
  00058	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR $T1[rbp]
  0005f	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00062	88 01		 mov	 BYTE PTR [rcx], al

; 152  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 153  :     if (_STD is_constant_evaluated()) {
; 154  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 155  :     } else
; 156  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 157  :     {
; 158  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);
; 159  :     }
; 160  : }

  00064	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006b	5f		 pop	 rdi
  0006c	5d		 pop	 rbp
  0006d	c3		 ret	 0
??$_Construct_in_place@DAEAD@std@@YAXAEAD0@Z ENDP	; std::_Construct_in_place<char,char &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\type_traits
;	COMDAT ??$forward@AEAD@std@@YAAEADAEAD@Z
_TEXT	SEGMENT
_Arg$ = 224
??$forward@AEAD@std@@YAAEADAEAD@Z PROC			; std::forward<char &>, COMDAT

; 1443 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D1154D4E_type_traits
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1444 :     return static_cast<_Ty&&>(_Arg);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]

; 1445 : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$forward@AEAD@std@@YAAEADAEAD@Z ENDP			; std::forward<char &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_To_address@PEAD@std@@YA?A_PAEBQEAD@Z
_TEXT	SEGMENT
_Val$ = 224
??$_To_address@PEAD@std@@YA?A_PAEBQEAD@Z PROC		; std::_To_address<char *>, COMDAT

; 4074 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7CE971A6_xutility
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4075 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 4076 :     return _Val;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]
  00026	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 4077 : }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
??$_To_address@PEAD@std@@YA?A_PAEBQEAD@Z ENDP		; std::_To_address<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_To_address@PEBD@std@@YA?A_PAEBQEBD@Z
_TEXT	SEGMENT
_Val$ = 224
??$_To_address@PEBD@std@@YA?A_PAEBQEBD@Z PROC		; std::_To_address<char const *>, COMDAT

; 4074 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7CE971A6_xutility
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4075 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 4076 :     return _Val;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]
  00026	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 4077 : }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
??$_To_address@PEBD@std@@YA?A_PAEBQEBD@Z ENDP		; std::_To_address<char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xlocnum
;	COMDAT ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ
text$di	SEGMENT
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	; `dynamic initializer for 'std::numpunct<wchar_t>::id'', COMDAT

; 263  : __PURE_APPDOMAIN_GLOBAL locale::id numpunct<_Elem>::id;

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E85225E0_xlocnum
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001b	33 d2		 xor	 edx, edx
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
  00024	e8 00 00 00 00	 call	 ??0id@locale@std@@QEAA@_K@Z ; std::locale::id::id
  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ENDP	; `dynamic initializer for 'std::numpunct<wchar_t>::id''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Destroy_range@PEADPEAD@std@@YAXPEADQEAD@Z
_TEXT	SEGMENT
_First$ = 224
_Last$ = 232
??$_Destroy_range@PEADPEAD@std@@YAXPEADQEAD@Z PROC	; std::_Destroy_range<char *,char *>, COMDAT

; 957  : _CONSTEXPR20_DYNALLOC void _Destroy_range(_NoThrowFwdIt _First, const _NoThrowSentinel _Last) noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DD38B15A_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 958  :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 959  :     if constexpr (!is_trivially_destructible_v<_Iter_value_t<_NoThrowFwdIt>>) {
; 960  :         for (; _First != _Last; ++_First) {
; 961  :             _Destroy_in_place(*_First);
; 962  :         }
; 963  :     }
; 964  : }

  00024	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002b	5f		 pop	 rdi
  0002c	5d		 pop	 rbp
  0002d	c3		 ret	 0
??$_Destroy_range@PEADPEAD@std@@YAXPEADQEAD@Z ENDP	; std::_Destroy_range<char *,char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\type_traits
;	COMDAT ??$forward@PEAD@std@@YA$$QEAPEADAEAPEAD@Z
_TEXT	SEGMENT
_Arg$ = 224
??$forward@PEAD@std@@YA$$QEAPEADAEAPEAD@Z PROC		; std::forward<char *>, COMDAT

; 1443 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D1154D4E_type_traits
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1444 :     return static_cast<_Ty&&>(_Arg);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]

; 1445 : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$forward@PEAD@std@@YA$$QEAPEADAEAPEAD@Z ENDP		; std::forward<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Emplace_back@AEAD@?$_Uninitialized_backout@PEAD@std@@QEAAXAEAD@Z
_TEXT	SEGMENT
tv72 = 192
tv70 = 200
this$ = 240
<_Vals_0>$ = 248
??$_Emplace_back@AEAD@?$_Uninitialized_backout@PEAD@std@@QEAAXAEAD@Z PROC ; std::_Uninitialized_backout<char *>::_Emplace_back<char &>, COMDAT

; 1472 :     _CONSTEXPR20_DYNALLOC void _Emplace_back(_Types&&... _Vals) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DD38B15A_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1473 :         // construct a new element at *_Last and increment
; 1474 :         _Construct_in_place(*_Last, _STD forward<_Types>(_Vals)...);

  00024	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR <_Vals_0>$[rbp]
  0002b	e8 00 00 00 00	 call	 ??$forward@AEAD@std@@YAAEADAEAD@Z ; std::forward<char &>
  00030	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv72[rbp], rax
  00037	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00042	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv70[rbp], rax
  00049	48 8b 95 c0 00
	00 00		 mov	 rdx, QWORD PTR tv72[rbp]
  00050	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR tv70[rbp]
  00057	e8 00 00 00 00	 call	 ??$_Construct_in_place@DAEAD@std@@YAXAEAD0@Z ; std::_Construct_in_place<char,char &>

; 1475 :         ++_Last;

  0005c	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00063	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00067	48 ff c0	 inc	 rax
  0006a	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00071	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 1476 :     }

  00075	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0007c	5f		 pop	 rdi
  0007d	5d		 pop	 rbp
  0007e	c3		 ret	 0
??$_Emplace_back@AEAD@?$_Uninitialized_backout@PEAD@std@@QEAAXAEAD@Z ENDP ; std::_Uninitialized_backout<char *>::_Emplace_back<char &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout@PEAD@std@@QEAAPEADXZ
_TEXT	SEGMENT
this$ = 224
?_Release@?$_Uninitialized_backout@PEAD@std@@QEAAPEADXZ PROC ; std::_Uninitialized_backout<char *>::_Release, COMDAT

; 1478 :     constexpr _NoThrowFwdIt _Release() { // suppress any exception handling backout and return _Last

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DD38B15A_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1479 :         _First = _Last;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002d	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00031	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1480 :         return _Last;

  00034	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]

; 1481 :     }

  0003f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00046	5f		 pop	 rdi
  00047	5d		 pop	 rbp
  00048	c3		 ret	 0
?_Release@?$_Uninitialized_backout@PEAD@std@@QEAAPEADXZ ENDP ; std::_Uninitialized_backout<char *>::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout@PEAD@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$_Uninitialized_backout@PEAD@std@@QEAA@XZ PROC	; std::_Uninitialized_backout<char *>::~_Uninitialized_backout<char *>, COMDAT

; 1467 :     _CONSTEXPR20_DYNALLOC ~_Uninitialized_backout() {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DD38B15A_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1468 :         _Destroy_range(_First, _Last);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0002a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00031	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00034	e8 00 00 00 00	 call	 ??$_Destroy_range@PEADPEAD@std@@YAXPEADQEAD@Z ; std::_Destroy_range<char *,char *>

; 1469 :     }

  00039	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
??1?$_Uninitialized_backout@PEAD@std@@QEAA@XZ ENDP	; std::_Uninitialized_backout<char *>::~_Uninitialized_backout<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout@PEAD@std@@QEAA@PEAD@Z
_TEXT	SEGMENT
this$ = 224
_Dest$ = 232
??0?$_Uninitialized_backout@PEAD@std@@QEAA@PEAD@Z PROC	; std::_Uninitialized_backout<char *>::_Uninitialized_backout<char *>, COMDAT

; 1460 :     constexpr explicit _Uninitialized_backout(_NoThrowFwdIt _Dest) : _First(_Dest), _Last(_Dest) {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DD38B15A_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Dest$[rbp]
  00032	48 89 08	 mov	 QWORD PTR [rax], rcx
  00035	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Dest$[rbp]
  00043	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00047	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00055	5f		 pop	 rdi
  00056	5d		 pop	 rbp
  00057	c3		 ret	 0
??0?$_Uninitialized_backout@PEAD@std@@QEAA@PEAD@Z ENDP	; std::_Uninitialized_backout<char *>::_Uninitialized_backout<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Copy_memmove@PEADPEAD@std@@YAPEADPEAD00@Z
_TEXT	SEGMENT
_FirstPtr$ = 8
_LastPtr$ = 40
_DestPtr$ = 72
_First_ch$ = 104
_Last_ch$ = 136
_Dest_ch$ = 168
_Count$ = 200
_First$ = 448
_Last$ = 456
_Dest$ = 464
??$_Copy_memmove@PEADPEAD@std@@YAPEADPEAD00@Z PROC	; std::_Copy_memmove<char *,char *>, COMDAT

; 4153 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec c8 01
	00 00		 sub	 rsp, 456		; 000001c8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7CE971A6_xutility
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4154 :     auto _FirstPtr              = _To_address(_First);

  00029	48 8d 8d c0 01
	00 00		 lea	 rcx, QWORD PTR _First$[rbp]
  00030	e8 00 00 00 00	 call	 ??$_To_address@PEAD@std@@YA?A_PAEBQEAD@Z ; std::_To_address<char *>
  00035	48 89 45 08	 mov	 QWORD PTR _FirstPtr$[rbp], rax

; 4155 :     auto _LastPtr               = _To_address(_Last);

  00039	48 8d 8d c8 01
	00 00		 lea	 rcx, QWORD PTR _Last$[rbp]
  00040	e8 00 00 00 00	 call	 ??$_To_address@PEAD@std@@YA?A_PAEBQEAD@Z ; std::_To_address<char *>
  00045	48 89 45 28	 mov	 QWORD PTR _LastPtr$[rbp], rax

; 4156 :     auto _DestPtr               = _To_address(_Dest);

  00049	48 8d 8d d0 01
	00 00		 lea	 rcx, QWORD PTR _Dest$[rbp]
  00050	e8 00 00 00 00	 call	 ??$_To_address@PEAD@std@@YA?A_PAEBQEAD@Z ; std::_To_address<char *>
  00055	48 89 45 48	 mov	 QWORD PTR _DestPtr$[rbp], rax

; 4157 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

  00059	48 8b 45 08	 mov	 rax, QWORD PTR _FirstPtr$[rbp]
  0005d	48 89 45 68	 mov	 QWORD PTR _First_ch$[rbp], rax

; 4158 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

  00061	48 8b 45 28	 mov	 rax, QWORD PTR _LastPtr$[rbp]
  00065	48 89 85 88 00
	00 00		 mov	 QWORD PTR _Last_ch$[rbp], rax

; 4159 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

  0006c	48 8b 45 48	 mov	 rax, QWORD PTR _DestPtr$[rbp]
  00070	48 89 85 a8 00
	00 00		 mov	 QWORD PTR _Dest_ch$[rbp], rax

; 4160 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00077	48 8b 45 68	 mov	 rax, QWORD PTR _First_ch$[rbp]
  0007b	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _Last_ch$[rbp]
  00082	48 2b c8	 sub	 rcx, rax
  00085	48 8b c1	 mov	 rax, rcx
  00088	48 89 85 c8 00
	00 00		 mov	 QWORD PTR _Count$[rbp], rax

; 4161 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  0008f	4c 8b 85 c8 00
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00096	48 8b 55 68	 mov	 rdx, QWORD PTR _First_ch$[rbp]
  0009a	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Dest_ch$[rbp]
  000a1	e8 00 00 00 00	 call	 memmove

; 4162 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4163 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  000a6	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  000ad	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Dest_ch$[rbp]
  000b4	48 03 c8	 add	 rcx, rax
  000b7	48 8b c1	 mov	 rax, rcx

; 4164 :     } else {
; 4165 :         return _Dest + (_LastPtr - _FirstPtr);
; 4166 :     }
; 4167 : }

  000ba	48 8d a5 a8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+424]
  000c1	5f		 pop	 rdi
  000c2	5d		 pop	 rbp
  000c3	c3		 ret	 0
??$_Copy_memmove@PEADPEAD@std@@YAPEADPEAD00@Z ENDP	; std::_Copy_memmove<char *,char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Seek_wrapped@V?$checked_array_iterator@PEAD@stdext@@AEAPEAD@std@@YAXAEAV?$checked_array_iterator@PEAD@stdext@@AEAPEAD@Z
_TEXT	SEGMENT
_It$ = 224
_UIt$ = 232
??$_Seek_wrapped@V?$checked_array_iterator@PEAD@stdext@@AEAPEAD@std@@YAXAEAV?$checked_array_iterator@PEAD@stdext@@AEAPEAD@Z PROC ; std::_Seek_wrapped<stdext::checked_array_iterator<char *>,char * &>, COMDAT

; 1427 : constexpr void _Seek_wrapped(_Iter& _It, _UIter&& _UIt) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7CE971A6_xutility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1428 :     if constexpr (_Wrapped_seekable_v<_Iter, _UIter>) {
; 1429 :         _It._Seek_to(_STD forward<_UIter>(_UIt));

  00024	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _UIt$[rbp]
  0002b	e8 00 00 00 00	 call	 ??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z ; std::forward<char * &>
  00030	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00033	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _It$[rbp]
  0003a	e8 00 00 00 00	 call	 ?_Seek_to@?$checked_array_iterator@PEAD@stdext@@QEAAXPEAD@Z ; stdext::checked_array_iterator<char *>::_Seek_to

; 1430 :     } else {
; 1431 :         _It = _STD forward<_UIter>(_UIt);
; 1432 :     }
; 1433 : }

  0003f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00046	5f		 pop	 rdi
  00047	5d		 pop	 rbp
  00048	c3		 ret	 0
??$_Seek_wrapped@V?$checked_array_iterator@PEAD@stdext@@AEAPEAD@std@@YAXAEAV?$checked_array_iterator@PEAD@stdext@@AEAPEAD@Z ENDP ; std::_Seek_wrapped<stdext::checked_array_iterator<char *>,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Copy_memmove@PEBDPEAD@std@@YAPEADPEBD0PEAD@Z
_TEXT	SEGMENT
_FirstPtr$ = 8
_LastPtr$ = 40
_DestPtr$ = 72
_First_ch$ = 104
_Last_ch$ = 136
_Dest_ch$ = 168
_Count$ = 200
_First$ = 448
_Last$ = 456
_Dest$ = 464
??$_Copy_memmove@PEBDPEAD@std@@YAPEADPEBD0PEAD@Z PROC	; std::_Copy_memmove<char const *,char *>, COMDAT

; 4153 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec c8 01
	00 00		 sub	 rsp, 456		; 000001c8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7CE971A6_xutility
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4154 :     auto _FirstPtr              = _To_address(_First);

  00029	48 8d 8d c0 01
	00 00		 lea	 rcx, QWORD PTR _First$[rbp]
  00030	e8 00 00 00 00	 call	 ??$_To_address@PEBD@std@@YA?A_PAEBQEBD@Z ; std::_To_address<char const *>
  00035	48 89 45 08	 mov	 QWORD PTR _FirstPtr$[rbp], rax

; 4155 :     auto _LastPtr               = _To_address(_Last);

  00039	48 8d 8d c8 01
	00 00		 lea	 rcx, QWORD PTR _Last$[rbp]
  00040	e8 00 00 00 00	 call	 ??$_To_address@PEBD@std@@YA?A_PAEBQEBD@Z ; std::_To_address<char const *>
  00045	48 89 45 28	 mov	 QWORD PTR _LastPtr$[rbp], rax

; 4156 :     auto _DestPtr               = _To_address(_Dest);

  00049	48 8d 8d d0 01
	00 00		 lea	 rcx, QWORD PTR _Dest$[rbp]
  00050	e8 00 00 00 00	 call	 ??$_To_address@PEAD@std@@YA?A_PAEBQEAD@Z ; std::_To_address<char *>
  00055	48 89 45 48	 mov	 QWORD PTR _DestPtr$[rbp], rax

; 4157 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

  00059	48 8b 45 08	 mov	 rax, QWORD PTR _FirstPtr$[rbp]
  0005d	48 89 45 68	 mov	 QWORD PTR _First_ch$[rbp], rax

; 4158 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

  00061	48 8b 45 28	 mov	 rax, QWORD PTR _LastPtr$[rbp]
  00065	48 89 85 88 00
	00 00		 mov	 QWORD PTR _Last_ch$[rbp], rax

; 4159 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

  0006c	48 8b 45 48	 mov	 rax, QWORD PTR _DestPtr$[rbp]
  00070	48 89 85 a8 00
	00 00		 mov	 QWORD PTR _Dest_ch$[rbp], rax

; 4160 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

  00077	48 8b 45 68	 mov	 rax, QWORD PTR _First_ch$[rbp]
  0007b	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR _Last_ch$[rbp]
  00082	48 2b c8	 sub	 rcx, rax
  00085	48 8b c1	 mov	 rax, rcx
  00088	48 89 85 c8 00
	00 00		 mov	 QWORD PTR _Count$[rbp], rax

; 4161 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

  0008f	4c 8b 85 c8 00
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00096	48 8b 55 68	 mov	 rdx, QWORD PTR _First_ch$[rbp]
  0009a	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Dest_ch$[rbp]
  000a1	e8 00 00 00 00	 call	 memmove

; 4162 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4163 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

  000a6	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  000ad	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Dest_ch$[rbp]
  000b4	48 03 c8	 add	 rcx, rax
  000b7	48 8b c1	 mov	 rax, rcx

; 4164 :     } else {
; 4165 :         return _Dest + (_LastPtr - _FirstPtr);
; 4166 :     }
; 4167 : }

  000ba	48 8d a5 a8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+424]
  000c1	5f		 pop	 rdi
  000c2	5d		 pop	 rbp
  000c3	c3		 ret	 0
??$_Copy_memmove@PEBDPEAD@std@@YAPEADPEBD0PEAD@Z ENDP	; std::_Copy_memmove<char const *,char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Get_unwrapped_n@AEAV?$checked_array_iterator@PEAD@stdext@@_K@std@@YA?A_TAEAV?$checked_array_iterator@PEAD@stdext@@_K@Z
_TEXT	SEGMENT
_COff$1 = 8
_It$ = 256
_Off$ = 264
??$_Get_unwrapped_n@AEAV?$checked_array_iterator@PEAD@stdext@@_K@std@@YA?A_TAEAV?$checked_array_iterator@PEAD@stdext@@_K@Z PROC ; std::_Get_unwrapped_n<stdext::checked_array_iterator<char *> &,unsigned __int64>, COMDAT

; 1392 : _NODISCARD constexpr decltype(auto) _Get_unwrapped_n(_Iter&& _It, const _Diff _Off) {

$LN12:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  00013	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7CE971A6_xutility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1393 :     if constexpr (is_pointer_v<decay_t<_Iter>>) {
; 1394 :         return _It + 0;
; 1395 :     } else if constexpr (_Unwrappable_for_offset_v<_Iter> && is_integral_v<_Diff>) {
; 1396 :         // ask an iterator to assert that the iterator moved _Off positions is valid, and unwrap
; 1397 :         using _IDiff     = _Iter_diff_t<_Remove_cvref_t<_Iter>>;
; 1398 :         using _CDiff     = common_type_t<_Diff, _IDiff>;
; 1399 :         const auto _COff = static_cast<_CDiff>(_Off);

  00024	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Off$[rbp]
  0002b	48 89 45 08	 mov	 QWORD PTR _COff$1[rbp], rax
$LN4@Get_unwrap:

; 1400 : 
; 1401 :         _STL_ASSERT(_COff <= static_cast<_CDiff>(_Max_possible_v<_IDiff>)

  0002f	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00039	48 39 45 08	 cmp	 QWORD PTR _COff$1[rbp], rax
  0003d	77 09		 ja	 SHORT $LN8@Get_unwrap
  0003f	33 c0		 xor	 eax, eax
  00041	83 f8 01	 cmp	 eax, 1
  00044	74 02		 je	 SHORT $LN8@Get_unwrap
  00046	eb 69		 jmp	 SHORT $LN9@Get_unwrap
$LN8@Get_unwrap:
$LN7@Get_unwrap:
  00048	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BB@KBEKGHFK@integer?5overflow@
  0004f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00054	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0005b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00060	45 33 c9	 xor	 r9d, r9d
  00063	41 b8 7b 05 00
	00		 mov	 r8d, 1403		; 0000057bH
  00069	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GJ@LJDCNNIF@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00070	b9 02 00 00 00	 mov	 ecx, 2
  00075	e8 00 00 00 00	 call	 _CrtDbgReport
  0007a	83 f8 01	 cmp	 eax, 1
  0007d	75 03		 jne	 SHORT $LN11@Get_unwrap
  0007f	cc		 int	 3
  00080	33 c0		 xor	 eax, eax
$LN11@Get_unwrap:
  00082	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0008b	41 b9 7b 05 00
	00		 mov	 r9d, 1403		; 0000057bH
  00091	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NC@HPCGBKBF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00098	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@MJCLAPGA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAG?$AAe?$AAt?$AA_?$AAu?$AAn?$AAw?$AAr?$AAa@
  0009f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@NMONALKO@?$AA?$CC?$AAi?$AAn?$AAt?$AAe?$AAg?$AAe?$AAr?$AA?5?$AAo?$AAv?$AAe?$AAr?$AAf?$AAl@
  000a6	e8 00 00 00 00	 call	 _invalid_parameter
  000ab	33 c0		 xor	 eax, eax
  000ad	85 c0		 test	 eax, eax
  000af	75 97		 jne	 SHORT $LN7@Get_unwrap
$LN9@Get_unwrap:
  000b1	33 c0		 xor	 eax, eax
  000b3	85 c0		 test	 eax, eax
  000b5	0f 85 74 ff ff
	ff		 jne	 $LN4@Get_unwrap

; 1402 :                         && (is_unsigned_v<_Diff> || static_cast<_CDiff>(_Min_possible_v<_IDiff>) <= _COff),
; 1403 :             "integer overflow");
; 1404 :         (void) _COff;
; 1405 : 
; 1406 :         _It._Verify_offset(static_cast<_IDiff>(_Off));

  000bb	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Off$[rbp]
  000c2	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _It$[rbp]
  000c9	e8 00 00 00 00	 call	 ?_Verify_offset@?$checked_array_iterator@PEAD@stdext@@QEBAX_J@Z ; stdext::checked_array_iterator<char *>::_Verify_offset

; 1407 :         return static_cast<_Iter&&>(_It)._Unwrapped();

  000ce	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _It$[rbp]
  000d5	e8 00 00 00 00	 call	 ?_Unwrapped@?$checked_array_iterator@PEAD@stdext@@QEBAPEADXZ ; stdext::checked_array_iterator<char *>::_Unwrapped

; 1408 :     } else if constexpr (_Unwrappable_for_unverified_v<_Iter>) {
; 1409 :         // iterator doesn't support offset-based asserts, or offset unknown; defer to unverified unwrap
; 1410 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1411 :     } else {
; 1412 :         // pass through iterator that doesn't participate in checking
; 1413 :         return static_cast<_Iter&&>(_It);
; 1414 :     }
; 1415 : }

  000da	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000e1	5f		 pop	 rdi
  000e2	5d		 pop	 rbp
  000e3	c3		 ret	 0
??$_Get_unwrapped_n@AEAV?$checked_array_iterator@PEAD@stdext@@_K@std@@YA?A_TAEAV?$checked_array_iterator@PEAD@stdext@@_K@Z ENDP ; std::_Get_unwrapped_n<stdext::checked_array_iterator<char *> &,unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Get_unwrapped_n@AEBQEBD_K@std@@YA?A_TAEBQEBD_K@Z
_TEXT	SEGMENT
_It$ = 224
_Off$ = 232
??$_Get_unwrapped_n@AEBQEBD_K@std@@YA?A_TAEBQEBD_K@Z PROC ; std::_Get_unwrapped_n<char const * const &,unsigned __int64>, COMDAT

; 1392 : _NODISCARD constexpr decltype(auto) _Get_unwrapped_n(_Iter&& _It, const _Diff _Off) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7CE971A6_xutility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1393 :     if constexpr (is_pointer_v<decay_t<_Iter>>) {
; 1394 :         return _It + 0;

  00024	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _It$[rbp]
  0002b	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 1395 :     } else if constexpr (_Unwrappable_for_offset_v<_Iter> && is_integral_v<_Diff>) {
; 1396 :         // ask an iterator to assert that the iterator moved _Off positions is valid, and unwrap
; 1397 :         using _IDiff     = _Iter_diff_t<_Remove_cvref_t<_Iter>>;
; 1398 :         using _CDiff     = common_type_t<_Diff, _IDiff>;
; 1399 :         const auto _COff = static_cast<_CDiff>(_Off);
; 1400 : 
; 1401 :         _STL_ASSERT(_COff <= static_cast<_CDiff>(_Max_possible_v<_IDiff>)
; 1402 :                         && (is_unsigned_v<_Diff> || static_cast<_CDiff>(_Min_possible_v<_IDiff>) <= _COff),
; 1403 :             "integer overflow");
; 1404 :         (void) _COff;
; 1405 : 
; 1406 :         _It._Verify_offset(static_cast<_IDiff>(_Off));
; 1407 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1408 :     } else if constexpr (_Unwrappable_for_unverified_v<_Iter>) {
; 1409 :         // iterator doesn't support offset-based asserts, or offset unknown; defer to unverified unwrap
; 1410 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1411 :     } else {
; 1412 :         // pass through iterator that doesn't participate in checking
; 1413 :         return static_cast<_Iter&&>(_It);
; 1414 :     }
; 1415 : }

  0002e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00035	5f		 pop	 rdi
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
??$_Get_unwrapped_n@AEBQEBD_K@std@@YA?A_TAEBQEBD_K@Z ENDP ; std::_Get_unwrapped_n<char const * const &,unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Block_size$ = 8
_Ptr_container$ = 40
_Ptr$ = 72
_Bytes$ = 320
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 134  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DD38B15A_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 135  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 136  :     const size_t _Block_size = _Non_user_size + _Bytes;

  0001f	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR _Bytes$[rbp]
  00026	48 83 c0 2f	 add	 rax, 47			; 0000002fH
  0002a	48 89 45 08	 mov	 QWORD PTR _Block_size$[rbp], rax

; 137  :     if (_Block_size <= _Bytes) {

  0002e	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR _Bytes$[rbp]
  00035	48 39 45 08	 cmp	 QWORD PTR _Block_size$[rbp], rax
  00039	77 05		 ja	 SHORT $LN8@Allocate_m

; 138  :         _Throw_bad_array_new_length(); // add overflow

  0003b	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 139  :     }
; 140  : 
; 141  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00040	48 8b 4d 08	 mov	 rcx, QWORD PTR _Block_size$[rbp]
  00044	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
  00049	48 89 45 28	 mov	 QWORD PTR _Ptr_container$[rbp], rax
$LN4@Allocate_m:

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0004d	48 83 7d 28 00	 cmp	 QWORD PTR _Ptr_container$[rbp], 0
  00052	74 02		 je	 SHORT $LN9@Allocate_m
  00054	eb 69		 jmp	 SHORT $LN10@Allocate_m
$LN9@Allocate_m:
$LN7@Allocate_m:
  00056	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
  0005d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00062	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  00069	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006e	45 33 c9	 xor	 r9d, r9d
  00071	41 b8 8e 00 00
	00		 mov	 r8d, 142		; 0000008eH
  00077	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GI@KDIDHNIL@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  0007e	b9 02 00 00 00	 mov	 ecx, 2
  00083	e8 00 00 00 00	 call	 _CrtDbgReport
  00088	83 f8 01	 cmp	 eax, 1
  0008b	75 03		 jne	 SHORT $LN12@Allocate_m
  0008d	cc		 int	 3
  0008e	33 c0		 xor	 eax, eax
$LN12@Allocate_m:
  00090	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00099	41 b9 8e 00 00
	00		 mov	 r9d, 142		; 0000008eH
  0009f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NA@FOAKNOEL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  000a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@
  000ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  000b4	e8 00 00 00 00	 call	 _invalid_parameter
  000b9	33 c0		 xor	 eax, eax
  000bb	85 c0		 test	 eax, eax
  000bd	75 97		 jne	 SHORT $LN7@Allocate_m
$LN10@Allocate_m:
  000bf	33 c0		 xor	 eax, eax
  000c1	85 c0		 test	 eax, eax
  000c3	75 88		 jne	 SHORT $LN4@Allocate_m

; 143  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  000c5	48 8b 45 28	 mov	 rax, QWORD PTR _Ptr_container$[rbp]
  000c9	48 83 c0 2f	 add	 rax, 47			; 0000002fH
  000cd	48 83 e0 e0	 and	 rax, -32		; ffffffffffffffe0H
  000d1	48 89 45 48	 mov	 QWORD PTR _Ptr$[rbp], rax

; 144  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  000d5	b8 08 00 00 00	 mov	 eax, 8
  000da	48 6b c0 ff	 imul	 rax, rax, -1
  000de	48 8b 4d 48	 mov	 rcx, QWORD PTR _Ptr$[rbp]
  000e2	48 8b 55 28	 mov	 rdx, QWORD PTR _Ptr_container$[rbp]
  000e6	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 145  : 
; 146  : #ifdef _DEBUG
; 147  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

  000ea	b8 08 00 00 00	 mov	 eax, 8
  000ef	48 6b c0 fe	 imul	 rax, rax, -2
  000f3	48 8b 4d 48	 mov	 rcx, QWORD PTR _Ptr$[rbp]
  000f7	48 ba fa fa fa
	fa fa fa fa fa	 mov	 rdx, -361700864190383366 ; fafafafafafafafaH
  00101	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 148  : #endif // _DEBUG
; 149  :     return _Ptr;

  00105	48 8b 45 48	 mov	 rax, QWORD PTR _Ptr$[rbp]
$LN11@Allocate_m:

; 150  : }

  00109	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  00110	5f		 pop	 rdi
  00111	5d		 pop	 rbp
  00112	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\type_traits
;	COMDAT ??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z
_TEXT	SEGMENT
_Arg$ = 224
??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z PROC		; std::forward<char * &>, COMDAT

; 1443 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D1154D4E_type_traits
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1444 :     return static_cast<_Ty&&>(_Arg);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]

; 1445 : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Seek_wrapped@V?$checked_array_iterator@PEAD@stdext@@PEAD@std@@YAXAEAV?$checked_array_iterator@PEAD@stdext@@$$QEAPEAD@Z
_TEXT	SEGMENT
_It$ = 224
_UIt$ = 232
??$_Seek_wrapped@V?$checked_array_iterator@PEAD@stdext@@PEAD@std@@YAXAEAV?$checked_array_iterator@PEAD@stdext@@$$QEAPEAD@Z PROC ; std::_Seek_wrapped<stdext::checked_array_iterator<char *>,char *>, COMDAT

; 1427 : constexpr void _Seek_wrapped(_Iter& _It, _UIter&& _UIt) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7CE971A6_xutility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1428 :     if constexpr (_Wrapped_seekable_v<_Iter, _UIter>) {
; 1429 :         _It._Seek_to(_STD forward<_UIter>(_UIt));

  00024	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _UIt$[rbp]
  0002b	e8 00 00 00 00	 call	 ??$forward@PEAD@std@@YA$$QEAPEADAEAPEAD@Z ; std::forward<char *>
  00030	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00033	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _It$[rbp]
  0003a	e8 00 00 00 00	 call	 ?_Seek_to@?$checked_array_iterator@PEAD@stdext@@QEAAXPEAD@Z ; stdext::checked_array_iterator<char *>::_Seek_to

; 1430 :     } else {
; 1431 :         _It = _STD forward<_UIter>(_UIt);
; 1432 :     }
; 1433 : }

  0003f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00046	5f		 pop	 rdi
  00047	5d		 pop	 rbp
  00048	c3		 ret	 0
??$_Seek_wrapped@V?$checked_array_iterator@PEAD@stdext@@PEAD@std@@YAXAEAV?$checked_array_iterator@PEAD@stdext@@$$QEAPEAD@Z ENDP ; std::_Seek_wrapped<stdext::checked_array_iterator<char *>,char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Uninitialized_copy_unchecked@PEADPEAD@std@@YAPEADPEADQEAD0@Z
_TEXT	SEGMENT
_Backout$ = 8
$T4 = 248
_First$ = 304
_Last$ = 312
_Dest$ = 320
??$_Uninitialized_copy_unchecked@PEADPEAD@std@@YAPEADPEADQEAD0@Z PROC ; std::_Uninitialized_copy_unchecked<char *,char *>, COMDAT

; 1660 :     _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {

$LN7:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00022	b9 16 00 00 00	 mov	 ecx, 22
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR [rsp+344]
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DD38B15A_xmemory
  0003d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1661 :     // copy [_First, _Last) to raw [_Dest, ...)
; 1662 :     if constexpr (_Ptr_copy_cat<_InIt, _NoThrowFwdIt>::_Really_trivial) {
; 1663 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1664 :         if (!_STD is_constant_evaluated())
; 1665 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1666 :         {
; 1667 :             return _Copy_memmove(_First, _Last, _Dest);

  00042	4c 8b 85 40 01
	00 00		 mov	 r8, QWORD PTR _Dest$[rbp]
  00049	48 8b 95 38 01
	00 00		 mov	 rdx, QWORD PTR _Last$[rbp]
  00050	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR _First$[rbp]
  00057	e8 00 00 00 00	 call	 ??$_Copy_memmove@PEADPEAD@std@@YAPEADPEAD00@Z ; std::_Copy_memmove<char *,char *>
  0005c	eb 65		 jmp	 SHORT $LN1@Uninitiali

; 1668 :         }
; 1669 :     }
; 1670 : 
; 1671 :     _Uninitialized_backout<_NoThrowFwdIt> _Backout{_Dest};

  0005e	48 8b 95 40 01
	00 00		 mov	 rdx, QWORD PTR _Dest$[rbp]
  00065	48 8d 4d 08	 lea	 rcx, QWORD PTR _Backout$[rbp]
  00069	e8 00 00 00 00	 call	 ??0?$_Uninitialized_backout@PEAD@std@@QEAA@PEAD@Z ; std::_Uninitialized_backout<char *>::_Uninitialized_backout<char *>

; 1672 :     for (; _First != _Last; ++_First) {

  0006e	eb 11		 jmp	 SHORT $LN4@Uninitiali
$LN2@Uninitiali:
  00070	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR _First$[rbp]
  00077	48 ff c0	 inc	 rax
  0007a	48 89 85 30 01
	00 00		 mov	 QWORD PTR _First$[rbp], rax
$LN4@Uninitiali:
  00081	48 8b 85 38 01
	00 00		 mov	 rax, QWORD PTR _Last$[rbp]
  00088	48 39 85 30 01
	00 00		 cmp	 QWORD PTR _First$[rbp], rax
  0008f	74 12		 je	 SHORT $LN3@Uninitiali

; 1673 :         _Backout._Emplace_back(*_First);

  00091	48 8b 95 30 01
	00 00		 mov	 rdx, QWORD PTR _First$[rbp]
  00098	48 8d 4d 08	 lea	 rcx, QWORD PTR _Backout$[rbp]
  0009c	e8 00 00 00 00	 call	 ??$_Emplace_back@AEAD@?$_Uninitialized_backout@PEAD@std@@QEAAXAEAD@Z ; std::_Uninitialized_backout<char *>::_Emplace_back<char &>

; 1674 :     }

  000a1	eb cd		 jmp	 SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1675 : 
; 1676 :     return _Backout._Release();

  000a3	48 8d 4d 08	 lea	 rcx, QWORD PTR _Backout$[rbp]
  000a7	e8 00 00 00 00	 call	 ?_Release@?$_Uninitialized_backout@PEAD@std@@QEAAPEADXZ ; std::_Uninitialized_backout<char *>::_Release
  000ac	48 89 85 f8 00
	00 00		 mov	 QWORD PTR $T4[rbp], rax
  000b3	48 8d 4d 08	 lea	 rcx, QWORD PTR _Backout$[rbp]
  000b7	e8 00 00 00 00	 call	 ??1?$_Uninitialized_backout@PEAD@std@@QEAA@XZ ; std::_Uninitialized_backout<char *>::~_Uninitialized_backout<char *>
  000bc	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR $T4[rbp]
$LN1@Uninitiali:

; 1677 : }

  000c3	48 8b f8	 mov	 rdi, rax
  000c6	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Uninitialized_copy_unchecked@PEADPEAD@std@@YAPEADPEADQEAD0@Z$rtcFrameData
  000d1	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000d6	48 8b c7	 mov	 rax, rdi
  000d9	48 8d a5 18 01
	00 00		 lea	 rsp, QWORD PTR [rbp+280]
  000e0	5f		 pop	 rdi
  000e1	5d		 pop	 rbp
  000e2	c3		 ret	 0
??$_Uninitialized_copy_unchecked@PEADPEAD@std@@YAPEADPEADQEAD0@Z ENDP ; std::_Uninitialized_copy_unchecked<char *,char *>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Backout$ = 8
$T4 = 248
_First$ = 304
_Last$ = 312
_Dest$ = 320
?dtor$0@?0???$_Uninitialized_copy_unchecked@PEADPEAD@std@@YAPEADPEADQEAD0@Z@4HA PROC ; `std::_Uninitialized_copy_unchecked<char *,char *>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR _Backout$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$_Uninitialized_backout@PEAD@std@@QEAA@XZ ; std::_Uninitialized_backout<char *>::~_Uninitialized_backout<char *>
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$_Uninitialized_copy_unchecked@PEADPEAD@std@@YAPEADPEADQEAD0@Z@4HA ENDP ; `std::_Uninitialized_copy_unchecked<char *,char *>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_Backout$ = 8
$T4 = 248
_First$ = 304
_Last$ = 312
_Dest$ = 320
?dtor$0@?0???$_Uninitialized_copy_unchecked@PEADPEAD@std@@YAPEADPEADQEAD0@Z@4HA PROC ; `std::_Uninitialized_copy_unchecked<char *,char *>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR _Backout$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$_Uninitialized_backout@PEAD@std@@QEAA@XZ ; std::_Uninitialized_backout<char *>::~_Uninitialized_backout<char *>
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$_Uninitialized_copy_unchecked@PEADPEAD@std@@YAPEADPEADQEAD0@Z@4HA ENDP ; `std::_Uninitialized_copy_unchecked<char *,char *>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Get_unwrapped_n@AEAV?$checked_array_iterator@PEAD@stdext@@_J@std@@YA?A_TAEAV?$checked_array_iterator@PEAD@stdext@@_J@Z
_TEXT	SEGMENT
_COff$1 = 8
_It$ = 256
_Off$ = 264
??$_Get_unwrapped_n@AEAV?$checked_array_iterator@PEAD@stdext@@_J@std@@YA?A_TAEAV?$checked_array_iterator@PEAD@stdext@@_J@Z PROC ; std::_Get_unwrapped_n<stdext::checked_array_iterator<char *> &,__int64>, COMDAT

; 1392 : _NODISCARD constexpr decltype(auto) _Get_unwrapped_n(_Iter&& _It, const _Diff _Off) {

$LN13:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  00013	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7CE971A6_xutility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1393 :     if constexpr (is_pointer_v<decay_t<_Iter>>) {
; 1394 :         return _It + 0;
; 1395 :     } else if constexpr (_Unwrappable_for_offset_v<_Iter> && is_integral_v<_Diff>) {
; 1396 :         // ask an iterator to assert that the iterator moved _Off positions is valid, and unwrap
; 1397 :         using _IDiff     = _Iter_diff_t<_Remove_cvref_t<_Iter>>;
; 1398 :         using _CDiff     = common_type_t<_Diff, _IDiff>;
; 1399 :         const auto _COff = static_cast<_CDiff>(_Off);

  00024	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Off$[rbp]
  0002b	48 89 45 08	 mov	 QWORD PTR _COff$1[rbp], rax
$LN4@Get_unwrap:

; 1400 : 
; 1401 :         _STL_ASSERT(_COff <= static_cast<_CDiff>(_Max_possible_v<_IDiff>)

  0002f	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00039	48 39 45 08	 cmp	 QWORD PTR _COff$1[rbp], rax
  0003d	7f 18		 jg	 SHORT $LN8@Get_unwrap
  0003f	33 c0		 xor	 eax, eax
  00041	85 c0		 test	 eax, eax
  00043	75 10		 jne	 SHORT $LN10@Get_unwrap
  00045	48 b8 00 00 00
	00 00 00 00 80	 mov	 rax, -9223372036854775808 ; 8000000000000000H
  0004f	48 39 45 08	 cmp	 QWORD PTR _COff$1[rbp], rax
  00053	7c 02		 jl	 SHORT $LN8@Get_unwrap
$LN10@Get_unwrap:
  00055	eb 69		 jmp	 SHORT $LN9@Get_unwrap
$LN8@Get_unwrap:
$LN7@Get_unwrap:
  00057	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BB@KBEKGHFK@integer?5overflow@
  0005e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00063	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0006a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006f	45 33 c9	 xor	 r9d, r9d
  00072	41 b8 7b 05 00
	00		 mov	 r8d, 1403		; 0000057bH
  00078	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GJ@LJDCNNIF@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  0007f	b9 02 00 00 00	 mov	 ecx, 2
  00084	e8 00 00 00 00	 call	 _CrtDbgReport
  00089	83 f8 01	 cmp	 eax, 1
  0008c	75 03		 jne	 SHORT $LN12@Get_unwrap
  0008e	cc		 int	 3
  0008f	33 c0		 xor	 eax, eax
$LN12@Get_unwrap:
  00091	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0009a	41 b9 7b 05 00
	00		 mov	 r9d, 1403		; 0000057bH
  000a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NC@HPCGBKBF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  000a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@MJCLAPGA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAG?$AAe?$AAt?$AA_?$AAu?$AAn?$AAw?$AAr?$AAa@
  000ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@NMONALKO@?$AA?$CC?$AAi?$AAn?$AAt?$AAe?$AAg?$AAe?$AAr?$AA?5?$AAo?$AAv?$AAe?$AAr?$AAf?$AAl@
  000b5	e8 00 00 00 00	 call	 _invalid_parameter
  000ba	33 c0		 xor	 eax, eax
  000bc	85 c0		 test	 eax, eax
  000be	75 97		 jne	 SHORT $LN7@Get_unwrap
$LN9@Get_unwrap:
  000c0	33 c0		 xor	 eax, eax
  000c2	85 c0		 test	 eax, eax
  000c4	0f 85 65 ff ff
	ff		 jne	 $LN4@Get_unwrap

; 1402 :                         && (is_unsigned_v<_Diff> || static_cast<_CDiff>(_Min_possible_v<_IDiff>) <= _COff),
; 1403 :             "integer overflow");
; 1404 :         (void) _COff;
; 1405 : 
; 1406 :         _It._Verify_offset(static_cast<_IDiff>(_Off));

  000ca	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Off$[rbp]
  000d1	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _It$[rbp]
  000d8	e8 00 00 00 00	 call	 ?_Verify_offset@?$checked_array_iterator@PEAD@stdext@@QEBAX_J@Z ; stdext::checked_array_iterator<char *>::_Verify_offset

; 1407 :         return static_cast<_Iter&&>(_It)._Unwrapped();

  000dd	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _It$[rbp]
  000e4	e8 00 00 00 00	 call	 ?_Unwrapped@?$checked_array_iterator@PEAD@stdext@@QEBAPEADXZ ; stdext::checked_array_iterator<char *>::_Unwrapped

; 1408 :     } else if constexpr (_Unwrappable_for_unverified_v<_Iter>) {
; 1409 :         // iterator doesn't support offset-based asserts, or offset unknown; defer to unverified unwrap
; 1410 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1411 :     } else {
; 1412 :         // pass through iterator that doesn't participate in checking
; 1413 :         return static_cast<_Iter&&>(_It);
; 1414 :     }
; 1415 : }

  000e9	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000f0	5f		 pop	 rdi
  000f1	5d		 pop	 rbp
  000f2	c3		 ret	 0
??$_Get_unwrapped_n@AEAV?$checked_array_iterator@PEAD@stdext@@_J@std@@YA?A_TAEAV?$checked_array_iterator@PEAD@stdext@@_J@Z ENDP ; std::_Get_unwrapped_n<stdext::checked_array_iterator<char *> &,__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Idl_distance@PEADPEAD@std@@YA?A_PAEBQEAD0@Z
_TEXT	SEGMENT
_First$ = 224
_Last$ = 232
??$_Idl_distance@PEADPEAD@std@@YA?A_PAEBQEAD0@Z PROC	; std::_Idl_distance<char *,char *>, COMDAT

; 1476 : _NODISCARD constexpr auto _Idl_distance(const _Iter& _First, const _Iter& _Last) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7CE971A6_xutility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1477 :     // tries to get the distance between _First and _Last if they are random-access iterators
; 1478 :     if constexpr (_Is_random_iter_v<_Iter>) {
; 1479 :         return static_cast<_Iter_diff_t<_Checked>>(_Last - _First);

  00024	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Last$[rbp]
  0002b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _First$[rbp]
  00032	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00035	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00038	48 2b c1	 sub	 rax, rcx

; 1480 :     } else {
; 1481 :         return _Distance_unknown{};
; 1482 :     }
; 1483 : }

  0003b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00042	5f		 pop	 rdi
  00043	5d		 pop	 rbp
  00044	c3		 ret	 0
??$_Idl_distance@PEADPEAD@std@@YA?A_PAEBQEAD0@Z ENDP	; std::_Idl_distance<char *,char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Get_unwrapped@AEBQEAD@std@@YA?A_TAEBQEAD@Z
_TEXT	SEGMENT
_It$ = 224
??$_Get_unwrapped@AEBQEAD@std@@YA?A_TAEBQEAD@Z PROC	; std::_Get_unwrapped<char * const &>, COMDAT

; 1324 : _NODISCARD constexpr decltype(auto) _Get_unwrapped(_Iter&& _It) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7CE971A6_xutility
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1325 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1326 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1327 :         return _It + 0;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _It$[rbp]
  00026	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 1328 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1329 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1330 :     } else {
; 1331 :         return static_cast<_Iter&&>(_It);
; 1332 :     }
; 1333 : }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
??$_Get_unwrapped@AEBQEAD@std@@YA?A_TAEBQEAD@Z ENDP	; std::_Get_unwrapped<char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\logger.h
;	COMDAT ??$log@$$BY0CC@D@logger@spdlog@@QEAAXW4level_enum@level@1@AEAY0CC@$$CBD@Z
_TEXT	SEGMENT
$T1 = 200
$T2 = 248
$T3 = 280
$T4 = 328
$T5 = 376
$T6 = 432
$T7 = 496
this$ = 560
lvl$ = 568
msg$ = 576
??$log@$$BY0CC@D@logger@spdlog@@QEAAXW4level_enum@level@1@AEAY0CC@$$CBD@Z PROC ; spdlog::logger::log<char [34]>, COMDAT

; 101  :     {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 30 02
	00 00		 sub	 rsp, 560		; 00000230H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__40D449C1_logger@h
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 102  :         log(source_loc{}, lvl, msg);

  00029	48 8d 85 c8 00
	00 00		 lea	 rax, QWORD PTR $T1[rbp]
  00030	48 89 85 f8 00
	00 00		 mov	 QWORD PTR $T2[rbp], rax
  00037	48 8d 85 18 01
	00 00		 lea	 rax, QWORD PTR $T3[rbp]
  0003e	48 8b f8	 mov	 rdi, rax
  00041	33 c0		 xor	 eax, eax
  00043	b9 18 00 00 00	 mov	 ecx, 24
  00048	f3 aa		 rep stosb
  0004a	48 8b 95 40 02
	00 00		 mov	 rdx, QWORD PTR msg$[rbp]
  00051	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR $T2[rbp]
  00058	e8 00 00 00 00	 call	 ??0?$basic_string_view@D@v8@fmt@@QEAA@PEBD@Z ; fmt::v8::basic_string_view<char>::basic_string_view<char>
  0005d	48 8d 8d 78 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00064	48 8b f9	 mov	 rdi, rcx
  00067	48 8b f0	 mov	 rsi, rax
  0006a	b9 10 00 00 00	 mov	 ecx, 16
  0006f	f3 a4		 rep movsb
  00071	48 8d 8d 18 01
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  00078	e8 00 00 00 00	 call	 ??0source_loc@spdlog@@QEAA@XZ ; spdlog::source_loc::source_loc
  0007d	48 8d 8d 48 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00084	48 8b f9	 mov	 rdi, rcx
  00087	48 8b f0	 mov	 rsi, rax
  0008a	b9 18 00 00 00	 mov	 ecx, 24
  0008f	f3 a4		 rep movsb
  00091	48 8d 85 f0 01
	00 00		 lea	 rax, QWORD PTR $T7[rbp]
  00098	48 8d 8d 78 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  0009f	48 8b f8	 mov	 rdi, rax
  000a2	48 8b f1	 mov	 rsi, rcx
  000a5	b9 10 00 00 00	 mov	 ecx, 16
  000aa	f3 a4		 rep movsb
  000ac	48 8d 85 b0 01
	00 00		 lea	 rax, QWORD PTR $T6[rbp]
  000b3	48 8d 8d 48 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  000ba	48 8b f8	 mov	 rdi, rax
  000bd	48 8b f1	 mov	 rsi, rcx
  000c0	b9 18 00 00 00	 mov	 ecx, 24
  000c5	f3 a4		 rep movsb
  000c7	4c 8d 8d f0 01
	00 00		 lea	 r9, QWORD PTR $T7[rbp]
  000ce	44 8b 85 38 02
	00 00		 mov	 r8d, DWORD PTR lvl$[rbp]
  000d5	48 8d 95 b0 01
	00 00		 lea	 rdx, QWORD PTR $T6[rbp]
  000dc	48 8b 8d 30 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000e3	e8 00 00 00 00	 call	 ?log@logger@spdlog@@QEAAXUsource_loc@2@W4level_enum@level@2@V?$basic_string_view@D@v8@fmt@@@Z ; spdlog::logger::log

; 103  :     }

  000e8	48 8d a5 10 02
	00 00		 lea	 rsp, QWORD PTR [rbp+528]
  000ef	5f		 pop	 rdi
  000f0	5e		 pop	 rsi
  000f1	5d		 pop	 rbp
  000f2	c3		 ret	 0
??$log@$$BY0CC@D@logger@spdlog@@QEAAXW4level_enum@level@1@AEAY0CC@$$CBD@Z ENDP ; spdlog::logger::log<char [34]>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\memory
;	COMDAT ??$uninitialized_copy_n@PEBD_KV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEBD_KV12@@Z
_TEXT	SEGMENT
_Count$ = 8
_UFirst$ = 40
_UDest$ = 72
__$ReturnUdt$ = 320
_First$ = 328
_Count_raw$ = 336
_Dest$ = 344
??$uninitialized_copy_n@PEBD_KV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEBD_KV12@@Z PROC ; std::uninitialized_copy_n<char const *,unsigned __int64,stdext::checked_array_iterator<char *> >, COMDAT

; 103  : _NoThrowFwdIt uninitialized_copy_n(const _InIt _First, const _Diff _Count_raw, _NoThrowFwdIt _Dest) {

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec 40 01
	00 00		 sub	 rsp, 320		; 00000140H
  0001e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00023	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00028	b9 18 00 00 00	 mov	 ecx, 24
  0002d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00032	f3 ab		 rep stosd
  00034	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F82802EA_memory
  00043	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 104  :     // copy [_First, _First + _Count) to [_Dest, ...)
; 105  :     _Algorithm_int_t<_Diff> _Count = _Count_raw;

  00048	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR _Count_raw$[rbp]
  0004f	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax

; 106  :     if (_Count <= 0) {

  00053	48 83 7d 08 00	 cmp	 QWORD PTR _Count$[rbp], 0
  00058	77 1e		 ja	 SHORT $LN2@uninitiali

; 107  :         return _Dest;

  0005a	48 8b bd 40 01
	00 00		 mov	 rdi, QWORD PTR __$ReturnUdt$[rbp]
  00061	48 8b b5 58 01
	00 00		 mov	 rsi, QWORD PTR _Dest$[rbp]
  00068	b9 18 00 00 00	 mov	 ecx, 24
  0006d	f3 a4		 rep movsb
  0006f	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  00076	eb 76		 jmp	 SHORT $LN1@uninitiali
$LN2@uninitiali:

; 108  :     }
; 109  : 
; 110  :     auto _UFirst = _Get_unwrapped_n(_First, _Count);

  00078	48 8b 55 08	 mov	 rdx, QWORD PTR _Count$[rbp]
  0007c	48 8d 8d 48 01
	00 00		 lea	 rcx, QWORD PTR _First$[rbp]
  00083	e8 00 00 00 00	 call	 ??$_Get_unwrapped_n@AEBQEBD_K@std@@YA?A_TAEBQEBD_K@Z ; std::_Get_unwrapped_n<char const * const &,unsigned __int64>
  00088	48 89 45 28	 mov	 QWORD PTR _UFirst$[rbp], rax

; 111  :     auto _UDest  = _Get_unwrapped_n(_Dest, _Count);

  0008c	48 8b 55 08	 mov	 rdx, QWORD PTR _Count$[rbp]
  00090	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR _Dest$[rbp]
  00097	e8 00 00 00 00	 call	 ??$_Get_unwrapped_n@AEAV?$checked_array_iterator@PEAD@stdext@@_K@std@@YA?A_TAEAV?$checked_array_iterator@PEAD@stdext@@_K@Z ; std::_Get_unwrapped_n<stdext::checked_array_iterator<char *> &,unsigned __int64>
  0009c	48 89 45 48	 mov	 QWORD PTR _UDest$[rbp], rax

; 112  :     if constexpr (_Ptr_copy_cat<decltype(_UFirst), decltype(_UDest)>::_Really_trivial) {
; 113  :         _UDest = _Copy_memmove(_UFirst, _UFirst + _Count, _UDest);

  000a0	48 8b 45 08	 mov	 rax, QWORD PTR _Count$[rbp]
  000a4	48 8b 4d 28	 mov	 rcx, QWORD PTR _UFirst$[rbp]
  000a8	48 03 c8	 add	 rcx, rax
  000ab	48 8b c1	 mov	 rax, rcx
  000ae	4c 8b 45 48	 mov	 r8, QWORD PTR _UDest$[rbp]
  000b2	48 8b d0	 mov	 rdx, rax
  000b5	48 8b 4d 28	 mov	 rcx, QWORD PTR _UFirst$[rbp]
  000b9	e8 00 00 00 00	 call	 ??$_Copy_memmove@PEBDPEAD@std@@YAPEADPEBD0PEAD@Z ; std::_Copy_memmove<char const *,char *>
  000be	48 89 45 48	 mov	 QWORD PTR _UDest$[rbp], rax

; 114  :     } else {
; 115  :         _Uninitialized_backout<decltype(_UDest)> _Backout{_UDest};
; 116  : 
; 117  :         for (; _Count > 0; --_Count, (void) ++_UFirst) {
; 118  :             _Backout._Emplace_back(*_UFirst);
; 119  :         }
; 120  : 
; 121  :         _UDest = _Backout._Release();
; 122  :     }
; 123  : 
; 124  :     _Seek_wrapped(_Dest, _UDest);

  000c2	48 8d 55 48	 lea	 rdx, QWORD PTR _UDest$[rbp]
  000c6	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR _Dest$[rbp]
  000cd	e8 00 00 00 00	 call	 ??$_Seek_wrapped@V?$checked_array_iterator@PEAD@stdext@@AEAPEAD@std@@YAXAEAV?$checked_array_iterator@PEAD@stdext@@AEAPEAD@Z ; std::_Seek_wrapped<stdext::checked_array_iterator<char *>,char * &>

; 125  :     return _Dest;

  000d2	48 8b bd 40 01
	00 00		 mov	 rdi, QWORD PTR __$ReturnUdt$[rbp]
  000d9	48 8b b5 58 01
	00 00		 mov	 rsi, QWORD PTR _Dest$[rbp]
  000e0	b9 18 00 00 00	 mov	 ecx, 24
  000e5	f3 a4		 rep movsb
  000e7	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
$LN1@uninitiali:

; 126  : }

  000ee	48 8b f8	 mov	 rdi, rax
  000f1	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$uninitialized_copy_n@PEBD_KV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEBD_KV12@@Z$rtcFrameData
  000fc	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00101	48 8b c7	 mov	 rax, rdi
  00104	48 8d a5 20 01
	00 00		 lea	 rsp, QWORD PTR [rbp+288]
  0010b	5f		 pop	 rdi
  0010c	5e		 pop	 rsi
  0010d	5d		 pop	 rbp
  0010e	c3		 ret	 0
??$uninitialized_copy_n@PEBD_KV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEBD_KV12@@Z ENDP ; std::uninitialized_copy_n<char const *,unsigned __int64,stdext::checked_array_iterator<char *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Verify_range@D@std@@YAXQEBD0@Z
_TEXT	SEGMENT
_First$ = 224
_Last$ = 232
??$_Verify_range@D@std@@YAXQEBD0@Z PROC			; std::_Verify_range<char>, COMDAT

; 1285 : constexpr void _Verify_range(const _Ty* const _First, const _Ty* const _Last) noexcept {

$LN12:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7CE971A6_xutility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
$LN4@Verify_ran:

; 1286 :     // special case range verification for pointers
; 1287 :     _STL_VERIFY(_First <= _Last, "transposed pointer range");

  00024	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Last$[rbp]
  0002b	48 39 85 e0 00
	00 00		 cmp	 QWORD PTR _First$[rbp], rax
  00032	77 02		 ja	 SHORT $LN7@Verify_ran
  00034	eb 69		 jmp	 SHORT $LN9@Verify_ran
$LN7@Verify_ran:
  00036	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BJ@HAJGEHKO@transposed?5pointer?5range@
  0003d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00042	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  00049	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0004e	45 33 c9	 xor	 r9d, r9d
  00051	41 b8 07 05 00
	00		 mov	 r8d, 1287		; 00000507H
  00057	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GJ@LJDCNNIF@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  0005e	b9 02 00 00 00	 mov	 ecx, 2
  00063	e8 00 00 00 00	 call	 _CrtDbgReport
  00068	83 f8 01	 cmp	 eax, 1
  0006b	75 03		 jne	 SHORT $LN11@Verify_ran
  0006d	cc		 int	 3
  0006e	33 c0		 xor	 eax, eax
$LN11@Verify_ran:
  00070	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00079	41 b9 07 05 00
	00		 mov	 r9d, 1287		; 00000507H
  0007f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NC@HPCGBKBF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00086	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@LJCPDKEJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAr?$AAi?$AAf?$AAy?$AA_?$AAr?$AAa@
  0008d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@FJIKMGFD@?$AA?$CC?$AAt?$AAr?$AAa?$AAn?$AAs?$AAp?$AAo?$AAs?$AAe?$AAd?$AA?5?$AAp?$AAo?$AAi@
  00094	e8 00 00 00 00	 call	 _invalid_parameter
  00099	33 c0		 xor	 eax, eax
  0009b	85 c0		 test	 eax, eax
  0009d	75 97		 jne	 SHORT $LN7@Verify_ran
$LN9@Verify_ran:
  0009f	33 c0		 xor	 eax, eax
  000a1	85 c0		 test	 eax, eax
  000a3	0f 85 7b ff ff
	ff		 jne	 $LN4@Verify_ran

; 1288 : }

  000a9	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000b0	5f		 pop	 rdi
  000b1	5d		 pop	 rbp
  000b2	c3		 ret	 0
??$_Verify_range@D@std@@YAXQEBD0@Z ENDP			; std::_Verify_range<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Get_size_of_n@$00@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 4
_Count$ = 256
??$_Get_size_of_n@$00@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<1>, COMDAT

; 59   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DD38B15A_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 60   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  0001f	c6 45 04 00	 mov	 BYTE PTR _Overflow_is_possible$[rbp], 0

; 61   : 
; 62   :     if constexpr (_Overflow_is_possible) {
; 63   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 64   :         if (_Count > _Max_possible) {
; 65   :             _Throw_bad_array_new_length(); // multiply overflow
; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  00023	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]

; 70   : }

  0002a	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00031	5f		 pop	 rdi
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
??$_Get_size_of_n@$00@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
_TEXT	SEGMENT
_Ptr$ = 224
_Bytes$ = 232
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z PROC		; std::_Deallocate<16,0>, COMDAT

; 251  : _CONSTEXPR20_DYNALLOC void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DD38B15A_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 252  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 253  : #ifdef __cpp_lib_constexpr_dynamic_alloc // TRANSITION, GH-1532
; 254  :     if (_STD is_constant_evaluated()) {
; 255  :         ::operator delete(_Ptr);
; 256  :     } else
; 257  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 258  :     {
; 259  : #if defined(_M_IX86) || defined(_M_X64)
; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00024	48 81 bd e8 00
	00 00 00 10 00
	00		 cmp	 QWORD PTR _Bytes$[rbp], 4096 ; 00001000H
  0002f	72 13		 jb	 SHORT $LN2@Deallocate

; 261  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  00031	48 8d 95 e8 00
	00 00		 lea	 rdx, QWORD PTR _Bytes$[rbp]
  00038	48 8d 8d e0 00
	00 00		 lea	 rcx, QWORD PTR _Ptr$[rbp]
  0003f	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
$LN2@Deallocate:

; 262  :         }
; 263  : #endif // defined(_M_IX86) || defined(_M_X64)
; 264  :         ::operator delete(_Ptr, _Bytes);

  00044	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Bytes$[rbp]
  0004b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00052	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00057	90		 npad	 1

; 265  :     }
; 266  : }

  00058	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005f	5f		 pop	 rdi
  00060	5d		 pop	 rbp
  00061	c3		 ret	 0
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ENDP		; std::_Deallocate<16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 224
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z PROC ; std::_Allocate<16,std::_Default_allocate_traits,0>, COMDAT

; 230  : __declspec(allocator) _CONSTEXPR20_DYNALLOC void* _Allocate(const size_t _Bytes) {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DD38B15A_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 231  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 232  : #if defined(_M_IX86) || defined(_M_X64)
; 233  : #ifdef __cpp_lib_constexpr_dynamic_alloc // TRANSITION, GH-1532
; 234  :     if (!_STD is_constant_evaluated())
; 235  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 236  :     {
; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001f	48 81 bd e0 00
	00 00 00 10 00
	00		 cmp	 QWORD PTR _Bytes$[rbp], 4096 ; 00001000H
  0002a	72 0e		 jb	 SHORT $LN2@Allocate

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0002c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  00033	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00038	eb 1a		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  0003a	48 83 bd e0 00
	00 00 00	 cmp	 QWORD PTR _Bytes$[rbp], 0
  00042	74 0e		 je	 SHORT $LN3@Allocate

; 244  :         return _Traits::_Allocate(_Bytes);

  00044	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  0004b	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
  00050	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  00052	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 248  : }

  00054	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ENDP ; std::_Allocate<16,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPEADPEAD@Z
_TEXT	SEGMENT
_Ptr$ = 224
??$_Unfancy@D@std@@YAPEADPEAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 288  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__40B2458B_xstddef
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 289  :     return _Ptr;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]

; 290  : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$_Unfancy@D@std@@YAPEADPEAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??$uninitialized_copy@PEADV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEAD0V12@@Z
_TEXT	SEGMENT
_UFirst$ = 8
_ULast$ = 40
_UDest$ = 72
$T5 = 296
tv79 = 312
tv77 = 320
__$ReturnUdt$ = 368
_First$ = 376
_Last$ = 384
_Dest$ = 392
??$uninitialized_copy@PEADV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEAD0V12@@Z PROC ; std::uninitialized_copy<char *,stdext::checked_array_iterator<char *> >, COMDAT

; 1680 : _NoThrowFwdIt uninitialized_copy(const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest) {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec 70 01
	00 00		 sub	 rsp, 368		; 00000170H
  0001e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00023	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00028	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  0002d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00032	f3 ab		 rep stosd
  00034	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR [rsp+408]
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DD38B15A_xmemory
  00043	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1681 :     // copy [_First, _Last) to raw [_Dest, ...)
; 1682 :     _Adl_verify_range(_First, _Last);

  00048	48 8d 95 80 01
	00 00		 lea	 rdx, QWORD PTR _Last$[rbp]
  0004f	48 8d 8d 78 01
	00 00		 lea	 rcx, QWORD PTR _First$[rbp]
  00056	e8 00 00 00 00	 call	 ??$_Adl_verify_range@PEADPEAD@std@@YAXAEBQEAD0@Z ; std::_Adl_verify_range<char *,char *>

; 1683 :     auto _UFirst      = _Get_unwrapped(_First);

  0005b	48 8d 8d 78 01
	00 00		 lea	 rcx, QWORD PTR _First$[rbp]
  00062	e8 00 00 00 00	 call	 ??$_Get_unwrapped@AEBQEAD@std@@YA?A_TAEBQEAD@Z ; std::_Get_unwrapped<char * const &>
  00067	48 89 45 08	 mov	 QWORD PTR _UFirst$[rbp], rax

; 1684 :     const auto _ULast = _Get_unwrapped(_Last);

  0006b	48 8d 8d 80 01
	00 00		 lea	 rcx, QWORD PTR _Last$[rbp]
  00072	e8 00 00 00 00	 call	 ??$_Get_unwrapped@AEBQEAD@std@@YA?A_TAEBQEAD@Z ; std::_Get_unwrapped<char * const &>
  00077	48 89 45 28	 mov	 QWORD PTR _ULast$[rbp], rax

; 1685 :     auto _UDest       = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));

  0007b	48 8d 55 28	 lea	 rdx, QWORD PTR _ULast$[rbp]
  0007f	48 8d 4d 08	 lea	 rcx, QWORD PTR _UFirst$[rbp]
  00083	e8 00 00 00 00	 call	 ??$_Idl_distance@PEADPEAD@std@@YA?A_PAEBQEAD0@Z ; std::_Idl_distance<char *,char *>
  00088	48 89 85 38 01
	00 00		 mov	 QWORD PTR tv79[rbp], rax
  0008f	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR _Dest$[rbp]
  00096	48 89 85 40 01
	00 00		 mov	 QWORD PTR tv77[rbp], rax
  0009d	48 8b 95 38 01
	00 00		 mov	 rdx, QWORD PTR tv79[rbp]
  000a4	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR tv77[rbp]
  000ab	e8 00 00 00 00	 call	 ??$_Get_unwrapped_n@AEAV?$checked_array_iterator@PEAD@stdext@@_J@std@@YA?A_TAEAV?$checked_array_iterator@PEAD@stdext@@_J@Z ; std::_Get_unwrapped_n<stdext::checked_array_iterator<char *> &,__int64>
  000b0	48 89 45 48	 mov	 QWORD PTR _UDest$[rbp], rax

; 1686 :     _Seek_wrapped(_Dest, _Uninitialized_copy_unchecked(_UFirst, _ULast, _UDest));

  000b4	4c 8b 45 48	 mov	 r8, QWORD PTR _UDest$[rbp]
  000b8	48 8b 55 28	 mov	 rdx, QWORD PTR _ULast$[rbp]
  000bc	48 8b 4d 08	 mov	 rcx, QWORD PTR _UFirst$[rbp]
  000c0	e8 00 00 00 00	 call	 ??$_Uninitialized_copy_unchecked@PEADPEAD@std@@YAPEADPEADQEAD0@Z ; std::_Uninitialized_copy_unchecked<char *,char *>
  000c5	48 89 85 28 01
	00 00		 mov	 QWORD PTR $T5[rbp], rax
  000cc	48 8d 95 28 01
	00 00		 lea	 rdx, QWORD PTR $T5[rbp]
  000d3	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR _Dest$[rbp]
  000da	e8 00 00 00 00	 call	 ??$_Seek_wrapped@V?$checked_array_iterator@PEAD@stdext@@PEAD@std@@YAXAEAV?$checked_array_iterator@PEAD@stdext@@$$QEAPEAD@Z ; std::_Seek_wrapped<stdext::checked_array_iterator<char *>,char *>

; 1687 :     return _Dest;

  000df	48 8b bd 70 01
	00 00		 mov	 rdi, QWORD PTR __$ReturnUdt$[rbp]
  000e6	48 8b b5 88 01
	00 00		 mov	 rsi, QWORD PTR _Dest$[rbp]
  000ed	b9 18 00 00 00	 mov	 ecx, 24
  000f2	f3 a4		 rep movsb
  000f4	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 1688 : }

  000fb	48 8b f8	 mov	 rdi, rax
  000fe	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00102	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$uninitialized_copy@PEADV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEAD0V12@@Z$rtcFrameData
  00109	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0010e	48 8b c7	 mov	 rax, rdi
  00111	48 8d a5 50 01
	00 00		 lea	 rsp, QWORD PTR [rbp+336]
  00118	5f		 pop	 rdi
  00119	5e		 pop	 rsi
  0011a	5d		 pop	 rbp
  0011b	c3		 ret	 0
??$uninitialized_copy@PEADV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEAD0V12@@Z ENDP ; std::uninitialized_copy<char *,stdext::checked_array_iterator<char *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\iterator
;	COMDAT ?_Seek_to@?$checked_array_iterator@PEAD@stdext@@QEAAXPEAD@Z
_TEXT	SEGMENT
this$ = 224
_It$ = 232
?_Seek_to@?$checked_array_iterator@PEAD@stdext@@QEAAXPEAD@Z PROC ; stdext::checked_array_iterator<char *>::_Seek_to, COMDAT

; 1554 :     constexpr void _Seek_to(_Ptr _It) noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__6D45C6E6_iterator
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1555 :         _Myindex = static_cast<size_t>(_It - _Myarray);

  00024	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002e	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _It$[rbp]
  00035	48 2b c8	 sub	 rcx, rax
  00038	48 8b c1	 mov	 rax, rcx
  0003b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00042	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 1556 :     }

  00046	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004d	5f		 pop	 rdi
  0004e	5d		 pop	 rbp
  0004f	c3		 ret	 0
?_Seek_to@?$checked_array_iterator@PEAD@stdext@@QEAAXPEAD@Z ENDP ; stdext::checked_array_iterator<char *>::_Seek_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\iterator
;	COMDAT ?_Unwrapped@?$checked_array_iterator@PEAD@stdext@@QEBAPEADXZ
_TEXT	SEGMENT
this$ = 224
?_Unwrapped@?$checked_array_iterator@PEAD@stdext@@QEBAPEADXZ PROC ; stdext::checked_array_iterator<char *>::_Unwrapped, COMDAT

; 1550 :     _NODISCARD constexpr _Ptr _Unwrapped() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__6D45C6E6_iterator
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1551 :         return _Myarray + _Myindex;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00029	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00030	48 03 41 10	 add	 rax, QWORD PTR [rcx+16]

; 1552 :     }

  00034	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003b	5f		 pop	 rdi
  0003c	5d		 pop	 rbp
  0003d	c3		 ret	 0
?_Unwrapped@?$checked_array_iterator@PEAD@stdext@@QEBAPEADXZ ENDP ; stdext::checked_array_iterator<char *>::_Unwrapped
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\iterator
;	COMDAT ?_Verify_offset@?$checked_array_iterator@PEAD@stdext@@QEBAX_J@Z
_TEXT	SEGMENT
this$ = 224
_Off$ = 232
?_Verify_offset@?$checked_array_iterator@PEAD@stdext@@QEBAX_J@Z PROC ; stdext::checked_array_iterator<char *>::_Verify_offset, COMDAT

; 1536 :     constexpr void _Verify_offset(const difference_type _Off) const noexcept {

$LN23:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__6D45C6E6_iterator
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1537 :         if (_Off < 0) {

  00024	48 83 bd e8 00
	00 00 00	 cmp	 QWORD PTR _Off$[rbp], 0
  0002c	0f 8d 8b 00 00
	00		 jge	 $LN14@Verify_off
$LN4@Verify_off:

; 1538 :             _STL_VERIFY(_Myindex >= size_t{0} - static_cast<size_t>(_Off),

  00032	33 c0		 xor	 eax, eax
  00034	48 2b 85 e8 00
	00 00		 sub	 rax, QWORD PTR _Off$[rbp]
  0003b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00042	48 39 41 10	 cmp	 QWORD PTR [rcx+16], rax
  00046	72 02		 jb	 SHORT $LN7@Verify_off
  00048	eb 69		 jmp	 SHORT $LN16@Verify_off
$LN7@Verify_off:
  0004a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0DJ@IMDMDBOM@cannot?5seek?5checked_array_itera@
  00051	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00056	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0005d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00062	45 33 c9	 xor	 r9d, r9d
  00065	41 b8 03 06 00
	00		 mov	 r8d, 1539		; 00000603H
  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GJ@MPPPDAKC@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00072	b9 02 00 00 00	 mov	 ecx, 2
  00077	e8 00 00 00 00	 call	 _CrtDbgReport
  0007c	83 f8 01	 cmp	 eax, 1
  0007f	75 03		 jne	 SHORT $LN21@Verify_off
  00081	cc		 int	 3
  00082	33 c0		 xor	 eax, eax
$LN21@Verify_off:
  00084	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0008d	41 b9 03 06 00
	00		 mov	 r9d, 1539		; 00000603H
  00093	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NC@DKNICPIG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0009a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GO@KEIDFPGF@?$AAs?$AAt?$AAd?$AAe?$AAx?$AAt?$AA?3?$AA?3?$AAc?$AAh?$AAe?$AAc?$AAk?$AAe?$AAd@
  000a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1HG@FONEJMKF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAc?$AAh@
  000a8	e8 00 00 00 00	 call	 _invalid_parameter
  000ad	33 c0		 xor	 eax, eax
  000af	85 c0		 test	 eax, eax
  000b1	75 97		 jne	 SHORT $LN7@Verify_off
$LN16@Verify_off:
  000b3	33 c0		 xor	 eax, eax
  000b5	85 c0		 test	 eax, eax
  000b7	0f 85 75 ff ff
	ff		 jne	 $LN4@Verify_off
$LN14@Verify_off:

; 1539 :                 "cannot seek checked_array_iterator iterator before begin");
; 1540 :         }
; 1541 : 
; 1542 :         if (_Off > 0) {

  000bd	48 83 bd e8 00
	00 00 00	 cmp	 QWORD PTR _Off$[rbp], 0
  000c5	0f 8e 97 00 00
	00		 jle	 $LN17@Verify_off
$LN10@Verify_off:

; 1543 :             _STL_VERIFY(_Mysize - _Myindex >= static_cast<size_t>(_Off),

  000cb	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000d2	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d9	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  000dd	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000e1	48 2b c1	 sub	 rax, rcx
  000e4	48 3b 85 e8 00
	00 00		 cmp	 rax, QWORD PTR _Off$[rbp]
  000eb	72 02		 jb	 SHORT $LN13@Verify_off
  000ed	eb 69		 jmp	 SHORT $LN19@Verify_off
$LN13@Verify_off:
  000ef	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0DG@GKAODMBN@cannot?5seek?5checked_array_itera@
  000f6	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000fb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  00102	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00107	45 33 c9	 xor	 r9d, r9d
  0010a	41 b8 08 06 00
	00		 mov	 r8d, 1544		; 00000608H
  00110	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GJ@MPPPDAKC@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00117	b9 02 00 00 00	 mov	 ecx, 2
  0011c	e8 00 00 00 00	 call	 _CrtDbgReport
  00121	83 f8 01	 cmp	 eax, 1
  00124	75 03		 jne	 SHORT $LN22@Verify_off
  00126	cc		 int	 3
  00127	33 c0		 xor	 eax, eax
$LN22@Verify_off:
  00129	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00132	41 b9 08 06 00
	00		 mov	 r9d, 1544		; 00000608H
  00138	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NC@DKNICPIG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  0013f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1GO@KEIDFPGF@?$AAs?$AAt?$AAd?$AAe?$AAx?$AAt?$AA?3?$AA?3?$AAc?$AAh?$AAe?$AAc?$AAk?$AAe?$AAd@
  00146	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1HA@NOCFBGDF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAe?$AAe?$AAk?$AA?5?$AAc?$AAh@
  0014d	e8 00 00 00 00	 call	 _invalid_parameter
  00152	33 c0		 xor	 eax, eax
  00154	85 c0		 test	 eax, eax
  00156	75 97		 jne	 SHORT $LN13@Verify_off
$LN19@Verify_off:
  00158	33 c0		 xor	 eax, eax
  0015a	85 c0		 test	 eax, eax
  0015c	0f 85 69 ff ff
	ff		 jne	 $LN10@Verify_off
$LN17@Verify_off:

; 1544 :                 "cannot seek checked_array_iterator iterator after end");
; 1545 :         }
; 1546 :     }

  00162	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00169	5f		 pop	 rdi
  0016a	5d		 pop	 rbp
  0016b	c3		 ret	 0
?_Verify_offset@?$checked_array_iterator@PEAD@stdext@@QEBAX_J@Z ENDP ; stdext::checked_array_iterator<char *>::_Verify_offset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\iterator
;	COMDAT ??0?$checked_array_iterator@PEAD@stdext@@QEAA@QEAD_K1@Z
_TEXT	SEGMENT
this$ = 224
_Array$ = 232
_Size$ = 240
_Index$ = 248
??0?$checked_array_iterator@PEAD@stdext@@QEAA@QEAD_K1@Z PROC ; stdext::checked_array_iterator<char *>::checked_array_iterator<char *>, COMDAT

; 1382 :         : _Myarray(_Array), _Mysize(_Size), _Myindex(_Index) {

$LN12:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__6D45C6E6_iterator
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Array$[rbp]
  0003c	48 89 08	 mov	 QWORD PTR [rax], rcx
  0003f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00046	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR _Size$[rbp]
  0004d	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00051	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00058	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _Index$[rbp]
  0005f	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
$LN4@checked_ar:

; 1383 :         _STL_VERIFY(_Index <= _Size, "checked_array_iterator construction index out of range");

  00063	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Size$[rbp]
  0006a	48 39 85 f8 00
	00 00		 cmp	 QWORD PTR _Index$[rbp], rax
  00071	77 02		 ja	 SHORT $LN7@checked_ar
  00073	eb 69		 jmp	 SHORT $LN9@checked_ar
$LN7@checked_ar:
  00075	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0DH@NPIEPPEB@checked_array_iterator?5construc@
  0007c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00081	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  00088	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0008d	45 33 c9	 xor	 r9d, r9d
  00090	41 b8 67 05 00
	00		 mov	 r8d, 1383		; 00000567H
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GJ@MPPPDAKC@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  0009d	b9 02 00 00 00	 mov	 ecx, 2
  000a2	e8 00 00 00 00	 call	 _CrtDbgReport
  000a7	83 f8 01	 cmp	 eax, 1
  000aa	75 03		 jne	 SHORT $LN11@checked_ar
  000ac	cc		 int	 3
  000ad	33 c0		 xor	 eax, eax
$LN11@checked_ar:
  000af	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000b8	41 b9 67 05 00
	00		 mov	 r9d, 1383		; 00000567H
  000be	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NC@DKNICPIG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  000c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1HO@MKKPHLPN@?$AAs?$AAt?$AAd?$AAe?$AAx?$AAt?$AA?3?$AA?3?$AAc?$AAh?$AAe?$AAc?$AAk?$AAe?$AAd@
  000cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1HC@HFANKADA@?$AA?$CC?$AAc?$AAh?$AAe?$AAc?$AAk?$AAe?$AAd?$AA_?$AAa?$AAr?$AAr?$AAa?$AAy?$AA_@
  000d3	e8 00 00 00 00	 call	 _invalid_parameter
  000d8	33 c0		 xor	 eax, eax
  000da	85 c0		 test	 eax, eax
  000dc	75 97		 jne	 SHORT $LN7@checked_ar
$LN9@checked_ar:
  000de	33 c0		 xor	 eax, eax
  000e0	85 c0		 test	 eax, eax
  000e2	0f 85 7b ff ff
	ff		 jne	 $LN4@checked_ar

; 1384 :     }

  000e8	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ef	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000f6	5f		 pop	 rdi
  000f7	5d		 pop	 rbp
  000f8	c3		 ret	 0
??0?$checked_array_iterator@PEAD@stdext@@QEAA@QEAD_K1@Z ENDP ; stdext::checked_array_iterator<char *>::checked_array_iterator<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\fmt\bundled\format.h
;	COMDAT ??$make_checked@D@detail@v8@fmt@@YA?AV?$checked_array_iterator@PEAD@stdext@@PEAD_K@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 224
p$ = 232
size$ = 240
??$make_checked@D@detail@v8@fmt@@YA?AV?$checked_array_iterator@PEAD@stdext@@PEAD_K@Z PROC ; fmt::v8::detail::make_checked<char>, COMDAT

; 342  : template <typename T> auto make_checked(T* p, size_t size) -> checked_ptr<T> {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ACE4895D_format@h
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 343  :   return {p, size};

  00029	45 33 c9	 xor	 r9d, r9d
  0002c	4c 8b 85 f0 00
	00 00		 mov	 r8, QWORD PTR size$[rbp]
  00033	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR p$[rbp]
  0003a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00041	e8 00 00 00 00	 call	 ??0?$checked_array_iterator@PEAD@stdext@@QEAA@QEAD_K1@Z ; stdext::checked_array_iterator<char *>::checked_array_iterator<char *>
  00046	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 344  : }

  0004d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00054	5f		 pop	 rdi
  00055	5d		 pop	 rbp
  00056	c3		 ret	 0
??$make_checked@D@detail@v8@fmt@@YA?AV?$checked_array_iterator@PEAD@stdext@@PEAD_K@Z ENDP ; fmt::v8::detail::make_checked<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\type_traits
;	COMDAT ??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 224
??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z PROC ; std::move<std::allocator<char> &>, COMDAT

; 1455 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D1154D4E_type_traits
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1456 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]

; 1457 : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z ENDP ; std::move<std::allocator<char> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\fmt\bundled\core.h
;	COMDAT ??$const_check@_N@detail@v8@fmt@@YA_N_N@Z
_TEXT	SEGMENT
value$ = 224
??$const_check@_N@detail@v8@fmt@@YA_N_N@Z PROC		; fmt::v8::detail::const_check<bool>, COMDAT

; 361  : template <typename T> constexpr auto const_check(T value) -> T { return value; }

$LN3:
  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__256F9D9D_core@h
  00019	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001e	0f b6 85 e0 00
	00 00		 movzx	 eax, BYTE PTR value$[rbp]
  00025	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002c	5f		 pop	 rdi
  0002d	5d		 pop	 rbp
  0002e	c3		 ret	 0
??$const_check@_N@detail@v8@fmt@@YA_N_N@Z ENDP		; fmt::v8::detail::const_check<bool>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xatomic.h
;	COMDAT ??$_Atomic_address_as@DU?$_Atomic_padded@_N@std@@@std@@YAPEDDAEBU?$_Atomic_padded@_N@0@@Z
_TEXT	SEGMENT
_Source$ = 224
??$_Atomic_address_as@DU?$_Atomic_padded@_N@std@@@std@@YAPEDDAEBU?$_Atomic_padded@_N@0@@Z PROC ; std::_Atomic_address_as<char,std::_Atomic_padded<bool> >, COMDAT

; 102  : _NODISCARD const volatile _Integral* _Atomic_address_as(const _Ty& _Source) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83FB8DDC_xatomic@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 103  :     // gets a pointer to the argument as an integral type (to pass to intrinsics)
; 104  :     static_assert(is_integral_v<_Integral>, "Tried to reinterpret memory as non-integral");
; 105  :     return &reinterpret_cast<const volatile _Integral&>(_Source);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Source$[rbp]

; 106  : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$_Atomic_address_as@DU?$_Atomic_padded@_N@std@@@std@@YAPEDDAEBU?$_Atomic_padded@_N@0@@Z ENDP ; std::_Atomic_address_as<char,std::_Atomic_padded<bool> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\type_traits
;	COMDAT ??$move@AEAVlog_msg_buffer@details@spdlog@@@std@@YA$$QEAVlog_msg_buffer@details@spdlog@@AEAV123@@Z
_TEXT	SEGMENT
_Arg$ = 224
??$move@AEAVlog_msg_buffer@details@spdlog@@@std@@YA$$QEAVlog_msg_buffer@details@spdlog@@AEAV123@@Z PROC ; std::move<spdlog::details::log_msg_buffer &>, COMDAT

; 1455 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D1154D4E_type_traits
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1456 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]

; 1457 : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$move@AEAVlog_msg_buffer@details@spdlog@@@std@@YA$$QEAVlog_msg_buffer@details@spdlog@@AEAV123@@Z ENDP ; std::move<spdlog::details::log_msg_buffer &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xatomic.h
;	COMDAT ??$_Atomic_address_as@HU?$_Atomic_padded@H@std@@@std@@YAPEDHAEBU?$_Atomic_padded@H@0@@Z
_TEXT	SEGMENT
_Source$ = 224
??$_Atomic_address_as@HU?$_Atomic_padded@H@std@@@std@@YAPEDHAEBU?$_Atomic_padded@H@0@@Z PROC ; std::_Atomic_address_as<int,std::_Atomic_padded<int> >, COMDAT

; 102  : _NODISCARD const volatile _Integral* _Atomic_address_as(const _Ty& _Source) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__83FB8DDC_xatomic@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 103  :     // gets a pointer to the argument as an integral type (to pass to intrinsics)
; 104  :     static_assert(is_integral_v<_Integral>, "Tried to reinterpret memory as non-integral");
; 105  :     return &reinterpret_cast<const volatile _Integral&>(_Source);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Source$[rbp]

; 106  : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$_Atomic_address_as@HU?$_Atomic_padded@H@std@@@std@@YAPEDHAEBU?$_Atomic_padded@H@0@@Z ENDP ; std::_Atomic_address_as<int,std::_Atomic_padded<int> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\logger.h
;	COMDAT ??$info@$$BY0CC@D@logger@spdlog@@QEAAXAEAY0CC@$$CBD@Z
_TEXT	SEGMENT
this$ = 224
msg$ = 232
??$info@$$BY0CC@D@logger@spdlog@@QEAAXAEAY0CC@$$CBD@Z PROC ; spdlog::logger::info<char [34]>, COMDAT

; 278  :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__40D449C1_logger@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 279  :         log(level::info, msg);

  00024	4c 8b 85 e8 00
	00 00		 mov	 r8, QWORD PTR msg$[rbp]
  0002b	ba 02 00 00 00	 mov	 edx, 2
  00030	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00037	e8 00 00 00 00	 call	 ??$log@$$BY0CC@D@logger@spdlog@@QEAAXW4level_enum@level@1@AEAY0CC@$$CBD@Z ; spdlog::logger::log<char [34]>

; 280  :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
??$info@$$BY0CC@D@logger@spdlog@@QEAAXAEAY0CC@$$CBD@Z ENDP ; spdlog::logger::info<char [34]>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_EApplication@Motus@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_EApplication@Motus@@UEAAPEAXI@Z PROC			; Motus::Application::`vector deleting destructor', COMDAT
$LN6:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  0001d	83 e0 02	 and	 eax, 2
  00020	85 c0		 test	 eax, eax
  00022	74 63		 je	 SHORT $LN2@vector
  00024	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??1Application@Motus@@UEAA@XZ ; Motus::Application::~Application
  0002b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00032	4c 8b 40 f8	 mov	 r8, QWORD PTR [rax-8]
  00036	ba 08 00 00 00	 mov	 edx, 8
  0003b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00042	e8 00 00 00 00	 call	 ??_M@YAXPEAX_K1P6AX0@Z@Z
  00047	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  0004d	83 e0 01	 and	 eax, 1
  00050	85 c0		 test	 eax, eax
  00052	74 26		 je	 SHORT $LN3@vector
  00054	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005b	48 8b 40 f8	 mov	 rax, QWORD PTR [rax-8]
  0005f	48 8d 04 c5 08
	00 00 00	 lea	 rax, QWORD PTR [rax*8+8]
  00067	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006e	48 83 e9 08	 sub	 rcx, 8
  00072	48 8b d0	 mov	 rdx, rax
  00075	e8 00 00 00 00	 call	 ??_V@YAXPEAX_K@Z	; operator delete[]
$LN3@vector:
  0007a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00081	48 83 e8 08	 sub	 rax, 8
  00085	eb 31		 jmp	 SHORT $LN1@vector
$LN2@vector:
  00087	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008e	e8 00 00 00 00	 call	 ??1Application@Motus@@UEAA@XZ ; Motus::Application::~Application
  00093	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00099	83 e0 01	 and	 eax, 1
  0009c	85 c0		 test	 eax, eax
  0009e	74 11		 je	 SHORT $LN4@vector
  000a0	ba 08 00 00 00	 mov	 edx, 8
  000a5	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ac	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN4@vector:
  000b1	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
$LN1@vector:
  000b8	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000bf	5f		 pop	 rdi
  000c0	5d		 pop	 rbp
  000c1	c3		 ret	 0
??_EApplication@Motus@@UEAAPEAXI@Z ENDP			; Motus::Application::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GApplication@Motus@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_GApplication@Motus@@UEAAPEAXI@Z PROC			; Motus::Application::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001e	e8 00 00 00 00	 call	 ??1Application@Motus@@UEAA@XZ ; Motus::Application::~Application
  00023	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00029	83 e0 01	 and	 eax, 1
  0002c	85 c0		 test	 eax, eax
  0002e	74 11		 je	 SHORT $LN2@scalar
  00030	ba 08 00 00 00	 mov	 edx, 8
  00035	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00041	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
??_GApplication@Motus@@UEAAPEAXI@Z ENDP			; Motus::Application::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4Application@Motus@@QEAAAEAV01@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
__that$ = 232
??4Application@Motus@@QEAAAEAV01@AEBV01@@Z PROC		; Motus::Application::operator=, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0001d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
??4Application@Motus@@QEAAAEAV01@AEBV01@@Z ENDP		; Motus::Application::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0Application@Motus@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
__that$ = 232
??0Application@Motus@@QEAA@AEBV01@@Z PROC		; Motus::Application::Application, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7Application@Motus@@6B@
  00024	48 89 08	 mov	 QWORD PTR [rax], rcx
  00027	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00035	5f		 pop	 rdi
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
??0Application@Motus@@QEAA@AEBV01@@Z ENDP		; Motus::Application::Application
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\src\Motus\Application.cpp
;	COMDAT ?Run@Application@Motus@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?Run@Application@Motus@@QEAAXXZ PROC			; Motus::Application::Run, COMDAT

; 14   : 	{

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CD889865_Application@cpp
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
$LN2@Run:

; 15   : 		while (true)

  0001f	33 c0		 xor	 eax, eax
  00021	83 f8 01	 cmp	 eax, 1
  00024	74 02		 je	 SHORT $LN3@Run

; 16   : 		{
; 17   : 
; 18   : 		}

  00026	eb f7		 jmp	 SHORT $LN2@Run
$LN3@Run:

; 19   : 	}

  00028	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002f	5f		 pop	 rdi
  00030	5d		 pop	 rbp
  00031	c3		 ret	 0
?Run@Application@Motus@@QEAAXXZ ENDP			; Motus::Application::Run
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\src\Motus\Application.cpp
;	COMDAT ??1Application@Motus@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1Application@Motus@@UEAA@XZ PROC			; Motus::Application::~Application, COMDAT

; 10   : 	{

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CD889865_Application@cpp
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7Application@Motus@@6B@
  0002d	48 89 08	 mov	 QWORD PTR [rax], rcx

; 11   : 	}

  00030	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00037	5f		 pop	 rdi
  00038	5d		 pop	 rbp
  00039	c3		 ret	 0
??1Application@Motus@@UEAA@XZ ENDP			; Motus::Application::~Application
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\src\Motus\Application.cpp
;	COMDAT ??0Application@Motus@@QEAA@XZ
_TEXT	SEGMENT
tv71 = 192
this$ = 240
??0Application@Motus@@QEAA@XZ PROC			; Motus::Application::Application, COMDAT

; 5    : 	{

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CD889865_Application@cpp
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7Application@Motus@@6B@
  0002d	48 89 08	 mov	 QWORD PTR [rax], rcx

; 6    : 		MT_CLIENT_INFO("Application created successfully.");

  00030	e8 00 00 00 00	 call	 ?GetClientLogger@Logger@Motus@@SAAEAV?$shared_ptr@Vlogger@spdlog@@@std@@XZ ; Motus::Logger::GetClientLogger
  00035	48 8b c8	 mov	 rcx, rax
  00038	e8 00 00 00 00	 call	 ??$?CVlogger@spdlog@@$0A@@?$shared_ptr@Vlogger@spdlog@@@std@@QEBAPEAVlogger@spdlog@@XZ ; std::shared_ptr<spdlog::logger>::operator-><spdlog::logger,0>
  0003d	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv71[rbp], rax
  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@MLJOHFGA@Application?5created?5successfull@
  0004b	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv71[rbp]
  00052	e8 00 00 00 00	 call	 ??$info@$$BY0CC@D@logger@spdlog@@QEAAXAEAY0CC@$$CBD@Z ; spdlog::logger::info<char [34]>

; 7    : 	}

  00057	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005e	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00065	5f		 pop	 rdi
  00066	5d		 pop	 rbp
  00067	c3		 ret	 0
??0Application@Motus@@QEAA@XZ ENDP			; Motus::Application::Application
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4Logger@Motus@@QEAAAEAV01@$$QEAV01@@Z
_TEXT	SEGMENT
this$ = 224
__that$ = 232
??4Logger@Motus@@QEAAAEAV01@$$QEAV01@@Z PROC		; Motus::Logger::operator=, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0001d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
??4Logger@Motus@@QEAAAEAV01@$$QEAV01@@Z ENDP		; Motus::Logger::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4Logger@Motus@@QEAAAEAV01@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
__that$ = 232
??4Logger@Motus@@QEAAAEAV01@AEBV01@@Z PROC		; Motus::Logger::operator=, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0001d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
??4Logger@Motus@@QEAAAEAV01@AEBV01@@Z ENDP		; Motus::Logger::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\src\Motus\Logger.h
;	COMDAT ?GetClientLogger@Logger@Motus@@SAAEAV?$shared_ptr@Vlogger@spdlog@@@std@@XZ
_TEXT	SEGMENT
?GetClientLogger@Logger@Motus@@SAAEAV?$shared_ptr@Vlogger@spdlog@@@std@@XZ PROC ; Motus::Logger::GetClientLogger, COMDAT

; 13   : 		inline static std::shared_ptr<spdlog::logger>& GetClientLogger() { return s_ClientLogger; };

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__08C15978_Logger@h
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?s_ClientLogger@Logger@Motus@@0V?$shared_ptr@Vlogger@spdlog@@@std@@A ; Motus::Logger::s_ClientLogger
  00022	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00029	5f		 pop	 rdi
  0002a	5d		 pop	 rbp
  0002b	c3		 ret	 0
?GetClientLogger@Logger@Motus@@SAAEAV?$shared_ptr@Vlogger@spdlog@@@std@@XZ ENDP ; Motus::Logger::GetClientLogger
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\src\Motus\Logger.h
;	COMDAT ?GetCoreLogger@Logger@Motus@@SAAEAV?$shared_ptr@Vlogger@spdlog@@@std@@XZ
_TEXT	SEGMENT
?GetCoreLogger@Logger@Motus@@SAAEAV?$shared_ptr@Vlogger@spdlog@@@std@@XZ PROC ; Motus::Logger::GetCoreLogger, COMDAT

; 12   : 		inline static std::shared_ptr<spdlog::logger>& GetCoreLogger() { return s_CoreLogger; };

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__08C15978_Logger@h
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?s_CoreLogger@Logger@Motus@@0V?$shared_ptr@Vlogger@spdlog@@@std@@A ; Motus::Logger::s_CoreLogger
  00022	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00029	5f		 pop	 rdi
  0002a	5d		 pop	 rbp
  0002b	c3		 ret	 0
?GetCoreLogger@Logger@Motus@@SAAEAV?$shared_ptr@Vlogger@spdlog@@@std@@XZ ENDP ; Motus::Logger::GetCoreLogger
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\memory
;	COMDAT ??$?CVlogger@spdlog@@$0A@@?$shared_ptr@Vlogger@spdlog@@@std@@QEBAPEAVlogger@spdlog@@XZ
_TEXT	SEGMENT
this$ = 224
??$?CVlogger@spdlog@@$0A@@?$shared_ptr@Vlogger@spdlog@@@std@@QEBAPEAVlogger@spdlog@@XZ PROC ; std::shared_ptr<spdlog::logger>::operator-><spdlog::logger,0>, COMDAT

; 1698 :     _NODISCARD _Ty2* operator->() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F82802EA_memory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1699 :         return get();

  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?get@?$_Ptr_base@Vlogger@spdlog@@@std@@IEBAPEAVlogger@spdlog@@XZ ; std::_Ptr_base<spdlog::logger>::get

; 1700 :     }

  0002b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
??$?CVlogger@spdlog@@$0A@@?$shared_ptr@Vlogger@spdlog@@@std@@QEBAPEAVlogger@spdlog@@XZ ENDP ; std::shared_ptr<spdlog::logger>::operator-><spdlog::logger,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\fmt\bundled\core.h
;	COMDAT ??$?0U?$char_traits@D@std@@V?$allocator@D@1@@?$basic_string_view@D@v8@fmt@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
this$ = 224
s$ = 232
??$?0U?$char_traits@D@std@@V?$allocator@D@1@@?$basic_string_view@D@v8@fmt@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; fmt::v8::basic_string_view<char>::basic_string_view<char><std::char_traits<char>,std::allocator<char> >, COMDAT

; 473  :         size_(s.size()) {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__256F9D9D_core@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 472  :       : data_(s.data()),

  00024	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR s$[rbp]
  0002b	e8 00 00 00 00	 call	 ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
  00030	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00037	48 89 01	 mov	 QWORD PTR [rcx], rax

; 473  :         size_(s.size()) {}

  0003a	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR s$[rbp]
  00041	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00046	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004d	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00051	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00058	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005f	5f		 pop	 rdi
  00060	5d		 pop	 rbp
  00061	c3		 ret	 0
??$?0U?$char_traits@D@std@@V?$allocator@D@1@@?$basic_string_view@D@v8@fmt@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; fmt::v8::basic_string_view<char>::basic_string_view<char><std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\logger-inl.h
;	COMDAT ?log_it_@logger@spdlog@@IEAAXAEBUlog_msg@details@2@_N1@Z
_TEXT	SEGMENT
tv78 = 192
tv71 = 192
this$ = 240
log_msg$ = 248
log_enabled$ = 256
traceback_enabled$ = 264
?log_it_@logger@spdlog@@IEAAXAEBUlog_msg@details@2@_N1@Z PROC ; spdlog::logger::log_it_, COMDAT

; 167  : {

$LN5:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__4B9C778B_logger-inl@h
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 168  :     if (log_enabled)

  0002e	0f b6 85 00 01
	00 00		 movzx	 eax, BYTE PTR log_enabled$[rbp]
  00035	85 c0		 test	 eax, eax
  00037	74 29		 je	 SHORT $LN2@log_it_

; 169  :     {
; 170  :         sink_it_(log_msg);

  00039	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00043	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00047	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv71[rbp], rax
  0004e	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR log_msg$[rbp]
  00055	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005c	ff 95 c0 00 00
	00		 call	 QWORD PTR tv71[rbp]
$LN2@log_it_:

; 171  :     }
; 172  :     if (traceback_enabled)

  00062	0f b6 85 08 01
	00 00		 movzx	 eax, BYTE PTR traceback_enabled$[rbp]
  00069	85 c0		 test	 eax, eax
  0006b	74 27		 je	 SHORT $LN3@log_it_

; 173  :     {
; 174  :         tracer_.push_back(log_msg);

  0006d	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00074	48 05 98 00 00
	00		 add	 rax, 152		; 00000098H
  0007a	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv78[rbp], rax
  00081	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR log_msg$[rbp]
  00088	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv78[rbp]
  0008f	e8 00 00 00 00	 call	 ?push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z ; spdlog::details::backtracer::push_back
$LN3@log_it_:

; 175  :     }
; 176  : }

  00094	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0009b	5f		 pop	 rdi
  0009c	5d		 pop	 rbp
  0009d	c3		 ret	 0
?log_it_@logger@spdlog@@IEAAXAEBUlog_msg@details@2@_N1@Z ENDP ; spdlog::logger::log_it_
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\atomic
;	COMDAT ?load@?$_Atomic_storage@H$03@std@@QEBAHW4memory_order@2@@Z
_TEXT	SEGMENT
_Mem$ = 8
_As_bytes$ = 36
this$ = 288
_Order$ = 296
?load@?$_Atomic_storage@H$03@std@@QEBAHW4memory_order@2@@Z PROC ; std::_Atomic_storage<int,4>::load, COMDAT

; 1015 :     _NODISCARD _TVal load(const memory_order _Order) const noexcept { // load with given memory order

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2FB352A6_atomic
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1016 :         const auto _Mem = _Atomic_address_as<int>(_Storage);

  00023	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002a	48 8b c8	 mov	 rcx, rax
  0002d	e8 00 00 00 00	 call	 ??$_Atomic_address_as@HU?$_Atomic_padded@H@std@@@std@@YAPEDHAEBU?$_Atomic_padded@H@0@@Z ; std::_Atomic_address_as<int,std::_Atomic_padded<int> >
  00032	48 89 45 08	 mov	 QWORD PTR _Mem$[rbp], rax

; 1017 :         auto _As_bytes  = __iso_volatile_load32(_Mem);

  00036	48 8b 45 08	 mov	 rax, QWORD PTR _Mem$[rbp]
  0003a	8b 00		 mov	 eax, DWORD PTR [rax]
  0003c	89 45 24	 mov	 DWORD PTR _As_bytes$[rbp], eax

; 1018 :         _Load_barrier(_Order);

  0003f	8b 8d 28 01 00
	00		 mov	 ecx, DWORD PTR _Order$[rbp]
  00045	e8 00 00 00 00	 call	 ?_Load_barrier@std@@YAXW4memory_order@1@@Z ; std::_Load_barrier

; 1019 :         return reinterpret_cast<_TVal&>(_As_bytes);

  0004a	8b 45 24	 mov	 eax, DWORD PTR _As_bytes$[rbp]

; 1020 :     }

  0004d	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00054	5f		 pop	 rdi
  00055	5d		 pop	 rbp
  00056	c3		 ret	 0
?load@?$_Atomic_storage@H$03@std@@QEBAHW4memory_order@2@@Z ENDP ; std::_Atomic_storage<int,4>::load
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\logger.h
;	COMDAT ?should_log@logger@spdlog@@QEBA_NW4level_enum@level@2@@Z
_TEXT	SEGMENT
tv73 = 192
tv75 = 200
this$ = 240
msg_level$ = 248
?should_log@logger@spdlog@@QEBA_NW4level_enum@level@2@@Z PROC ; spdlog::logger::should_log, COMDAT

; 302  :     {

$LN5:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__40D449C1_logger@h
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 303  :         return msg_level >= level_.load(std::memory_order_relaxed);

  00023	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002a	48 83 c0 50	 add	 rax, 80			; 00000050H
  0002e	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv73[rbp], rax
  00035	33 d2		 xor	 edx, edx
  00037	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv73[rbp]
  0003e	e8 00 00 00 00	 call	 ?load@?$_Atomic_storage@H$03@std@@QEBAHW4memory_order@2@@Z ; std::_Atomic_storage<int,4>::load
  00043	39 85 f8 00 00
	00		 cmp	 DWORD PTR msg_level$[rbp], eax
  00049	7c 0c		 jl	 SHORT $LN3@should_log
  0004b	c7 85 c8 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv75[rbp], 1
  00055	eb 0a		 jmp	 SHORT $LN4@should_log
$LN3@should_log:
  00057	c7 85 c8 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv75[rbp], 0
$LN4@should_log:
  00061	0f b6 85 c8 00
	00 00		 movzx	 eax, BYTE PTR tv75[rbp]

; 304  :     }

  00068	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0006f	5f		 pop	 rdi
  00070	5d		 pop	 rbp
  00071	c3		 ret	 0
?should_log@logger@spdlog@@QEBA_NW4level_enum@level@2@@Z ENDP ; spdlog::logger::should_log
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\logger.h
;	COMDAT ?log@logger@spdlog@@QEAAXUsource_loc@2@W4level_enum@level@2@V?$basic_string_view@D@v8@fmt@@@Z
_TEXT	SEGMENT
log_enabled$ = 4
traceback_enabled$ = 36
log_msg$ = 80
$T4 = 584
$T5 = 632
$T6 = 664
$T7 = 712
$T8 = 760
$T9 = 808
$T10 = 856
$T11 = 904
$T12 = 960
$T13 = 1024
$T14 = 1072
this$ = 1136
loc$ = 1144
lvl$ = 1152
msg$ = 1160
?log@logger@spdlog@@QEAAXUsource_loc@2@W4level_enum@level@2@V?$basic_string_view@D@v8@fmt@@@Z PROC ; spdlog::logger::log, COMDAT

; 126  :     {

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec 80 04
	00 00		 sub	 rsp, 1152		; 00000480H
  0001e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00023	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  00028	b9 b4 00 00 00	 mov	 ecx, 180		; 000000b4H
  0002d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00032	f3 ab		 rep stosd
  00034	48 8b 8c 24 a8
	04 00 00	 mov	 rcx, QWORD PTR [rsp+1192]
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__40D449C1_logger@h
  00043	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 127  :         bool log_enabled = should_log(lvl);

  00048	8b 95 80 04 00
	00		 mov	 edx, DWORD PTR lvl$[rbp]
  0004e	48 8b 8d 70 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	e8 00 00 00 00	 call	 ?should_log@logger@spdlog@@QEBA_NW4level_enum@level@2@@Z ; spdlog::logger::should_log
  0005a	88 45 04	 mov	 BYTE PTR log_enabled$[rbp], al

; 128  :         bool traceback_enabled = tracer_.enabled();

  0005d	48 8b 85 70 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00064	48 05 98 00 00
	00		 add	 rax, 152		; 00000098H
  0006a	48 8b c8	 mov	 rcx, rax
  0006d	e8 00 00 00 00	 call	 ?enabled@backtracer@details@spdlog@@QEBA_NXZ ; spdlog::details::backtracer::enabled
  00072	88 45 24	 mov	 BYTE PTR traceback_enabled$[rbp], al

; 129  :         if (!log_enabled && !traceback_enabled)

  00075	0f b6 45 04	 movzx	 eax, BYTE PTR log_enabled$[rbp]
  00079	85 c0		 test	 eax, eax
  0007b	75 0d		 jne	 SHORT $LN2@log
  0007d	0f b6 45 24	 movzx	 eax, BYTE PTR traceback_enabled$[rbp]
  00081	85 c0		 test	 eax, eax
  00083	75 05		 jne	 SHORT $LN2@log

; 130  :         {
; 131  :             return;

  00085	e9 52 01 00 00	 jmp	 $LN1@log
$LN2@log:

; 132  :         }
; 133  : 
; 134  :         details::log_msg log_msg(loc, name_, lvl, msg);

  0008a	48 8d 85 28 03
	00 00		 lea	 rax, QWORD PTR $T9[rbp]
  00091	48 8b f8	 mov	 rdi, rax
  00094	48 8b b5 88 04
	00 00		 mov	 rsi, QWORD PTR msg$[rbp]
  0009b	b9 10 00 00 00	 mov	 ecx, 16
  000a0	f3 a4		 rep movsb
  000a2	48 8d 85 88 03
	00 00		 lea	 rax, QWORD PTR $T11[rbp]
  000a9	48 8d 8d 28 03
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  000b0	48 8b f8	 mov	 rdi, rax
  000b3	48 8b f1	 mov	 rsi, rcx
  000b6	b9 10 00 00 00	 mov	 ecx, 16
  000bb	f3 a4		 rep movsb
  000bd	48 8d 85 48 02
	00 00		 lea	 rax, QWORD PTR $T4[rbp]
  000c4	48 89 85 78 02
	00 00		 mov	 QWORD PTR $T5[rbp], rax
  000cb	48 8b 85 70 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000d2	48 83 c0 08	 add	 rax, 8
  000d6	48 8b d0	 mov	 rdx, rax
  000d9	48 8b 8d 78 02
	00 00		 mov	 rcx, QWORD PTR $T5[rbp]
  000e0	e8 00 00 00 00	 call	 ??$?0U?$char_traits@D@std@@V?$allocator@D@1@@?$basic_string_view@D@v8@fmt@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; fmt::v8::basic_string_view<char>::basic_string_view<char><std::char_traits<char>,std::allocator<char> >
  000e5	48 8d 8d c8 02
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  000ec	48 8b f9	 mov	 rdi, rcx
  000ef	48 8b f0	 mov	 rsi, rax
  000f2	b9 10 00 00 00	 mov	 ecx, 16
  000f7	f3 a4		 rep movsb
  000f9	48 8d 85 58 03
	00 00		 lea	 rax, QWORD PTR $T10[rbp]
  00100	48 8d 8d c8 02
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00107	48 8b f8	 mov	 rdi, rax
  0010a	48 8b f1	 mov	 rsi, rcx
  0010d	b9 10 00 00 00	 mov	 ecx, 16
  00112	f3 a4		 rep movsb
  00114	48 8d 85 98 02
	00 00		 lea	 rax, QWORD PTR $T6[rbp]
  0011b	48 8b f8	 mov	 rdi, rax
  0011e	48 8b b5 78 04
	00 00		 mov	 rsi, QWORD PTR loc$[rbp]
  00125	b9 18 00 00 00	 mov	 ecx, 24
  0012a	f3 a4		 rep movsb
  0012c	48 8d 85 f8 02
	00 00		 lea	 rax, QWORD PTR $T8[rbp]
  00133	48 8d 8d 98 02
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  0013a	48 8b f8	 mov	 rdi, rax
  0013d	48 8b f1	 mov	 rsi, rcx
  00140	b9 18 00 00 00	 mov	 ecx, 24
  00145	f3 a4		 rep movsb
  00147	48 8d 85 30 04
	00 00		 lea	 rax, QWORD PTR $T14[rbp]
  0014e	48 8d 8d 88 03
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  00155	48 8b f8	 mov	 rdi, rax
  00158	48 8b f1	 mov	 rsi, rcx
  0015b	b9 10 00 00 00	 mov	 ecx, 16
  00160	f3 a4		 rep movsb
  00162	48 8d 85 00 04
	00 00		 lea	 rax, QWORD PTR $T13[rbp]
  00169	48 8d 8d 58 03
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  00170	48 8b f8	 mov	 rdi, rax
  00173	48 8b f1	 mov	 rsi, rcx
  00176	b9 10 00 00 00	 mov	 ecx, 16
  0017b	f3 a4		 rep movsb
  0017d	48 8d 85 c0 03
	00 00		 lea	 rax, QWORD PTR $T12[rbp]
  00184	48 8d 8d f8 02
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  0018b	48 8b f8	 mov	 rdi, rax
  0018e	48 8b f1	 mov	 rsi, rcx
  00191	b9 18 00 00 00	 mov	 ecx, 24
  00196	f3 a4		 rep movsb
  00198	48 8d 85 30 04
	00 00		 lea	 rax, QWORD PTR $T14[rbp]
  0019f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001a4	44 8b 8d 80 04
	00 00		 mov	 r9d, DWORD PTR lvl$[rbp]
  001ab	4c 8d 85 00 04
	00 00		 lea	 r8, QWORD PTR $T13[rbp]
  001b2	48 8d 95 c0 03
	00 00		 lea	 rdx, QWORD PTR $T12[rbp]
  001b9	48 8d 4d 50	 lea	 rcx, QWORD PTR log_msg$[rbp]
  001bd	e8 00 00 00 00	 call	 ??0log_msg@details@spdlog@@QEAA@Usource_loc@2@V?$basic_string_view@D@v8@fmt@@W4level_enum@level@2@1@Z ; spdlog::details::log_msg::log_msg

; 135  :         log_it_(log_msg, log_enabled, traceback_enabled);

  001c2	44 0f b6 4d 24	 movzx	 r9d, BYTE PTR traceback_enabled$[rbp]
  001c7	44 0f b6 45 04	 movzx	 r8d, BYTE PTR log_enabled$[rbp]
  001cc	48 8d 55 50	 lea	 rdx, QWORD PTR log_msg$[rbp]
  001d0	48 8b 8d 70 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001d7	e8 00 00 00 00	 call	 ?log_it_@logger@spdlog@@IEAAXAEBUlog_msg@details@2@_N1@Z ; spdlog::logger::log_it_
$LN1@log:

; 136  :     }

  001dc	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  001e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?log@logger@spdlog@@QEAAXUsource_loc@2@W4level_enum@level@2@V?$basic_string_view@D@v8@fmt@@@Z$rtcFrameData
  001e7	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001ec	48 8d a5 50 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1104]
  001f3	5f		 pop	 rdi
  001f4	5e		 pop	 rsi
  001f5	5d		 pop	 rbp
  001f6	c3		 ret	 0
?log@logger@spdlog@@QEAAXUsource_loc@2@W4level_enum@level@2@V?$basic_string_view@D@v8@fmt@@@Z ENDP ; spdlog::logger::log
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\details\backtracer-inl.h
;	COMDAT ?push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z
_TEXT	SEGMENT
lock$ = 8
$T4 = 240
tv78 = 632
tv65 = 640
tv82 = 648
__$ArrayPad$ = 656
this$ = 704
msg$ = 712
?push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z PROC ; spdlog::details::backtracer::push_back, COMDAT

; 52   : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 02
	00 00		 sub	 rsp, 712		; 000002c8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0001d	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 8c 24 e8
	02 00 00	 mov	 rcx, QWORD PTR [rsp+744]
  00031	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00038	48 33 c5	 xor	 rax, rbp
  0003b	48 89 85 90 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D800A915_backtracer-inl@h
  00049	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 53   :     std::lock_guard<std::mutex> lock{mutex_};

  0004e	48 8b 85 c0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00055	48 8b d0	 mov	 rdx, rax
  00058	48 8d 4d 08	 lea	 rcx, QWORD PTR lock$[rbp]
  0005c	e8 00 00 00 00	 call	 ??0?$lock_guard@Vmutex@std@@@std@@QEAA@AEAVmutex@1@@Z ; std::lock_guard<std::mutex>::lock_guard<std::mutex>
  00061	90		 npad	 1

; 54   :     messages_.push_back(log_msg_buffer{msg});

  00062	48 8b 85 c0 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00069	48 83 c0 58	 add	 rax, 88			; 00000058H
  0006d	48 89 85 78 02
	00 00		 mov	 QWORD PTR tv78[rbp], rax
  00074	48 8b 95 c8 02
	00 00		 mov	 rdx, QWORD PTR msg$[rbp]
  0007b	48 8d 8d f0 00
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00082	e8 00 00 00 00	 call	 ??0log_msg_buffer@details@spdlog@@QEAA@AEBUlog_msg@12@@Z ; spdlog::details::log_msg_buffer::log_msg_buffer
  00087	48 89 85 80 02
	00 00		 mov	 QWORD PTR tv65[rbp], rax
  0008e	48 8b 85 80 02
	00 00		 mov	 rax, QWORD PTR tv65[rbp]
  00095	48 89 85 88 02
	00 00		 mov	 QWORD PTR tv82[rbp], rax
  0009c	48 8b 95 88 02
	00 00		 mov	 rdx, QWORD PTR tv82[rbp]
  000a3	48 8b 8d 78 02
	00 00		 mov	 rcx, QWORD PTR tv78[rbp]
  000aa	e8 00 00 00 00	 call	 ?push_back@?$circular_q@Vlog_msg_buffer@details@spdlog@@@details@spdlog@@QEAAX$$QEAVlog_msg_buffer@23@@Z ; spdlog::details::circular_q<spdlog::details::log_msg_buffer>::push_back
  000af	90		 npad	 1
  000b0	48 8d 8d f0 00
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  000b7	e8 00 00 00 00	 call	 ??1log_msg_buffer@details@spdlog@@QEAA@XZ
  000bc	90		 npad	 1

; 55   : }

  000bd	48 8d 4d 08	 lea	 rcx, QWORD PTR lock$[rbp]
  000c1	e8 00 00 00 00	 call	 ??1?$lock_guard@Vmutex@std@@@std@@QEAA@XZ ; std::lock_guard<std::mutex>::~lock_guard<std::mutex>
  000c6	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z$rtcFrameData
  000d1	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000d6	48 8b 8d 90 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000dd	48 33 cd	 xor	 rcx, rbp
  000e0	e8 00 00 00 00	 call	 __security_check_cookie
  000e5	48 8d a5 a8 02
	00 00		 lea	 rsp, QWORD PTR [rbp+680]
  000ec	5f		 pop	 rdi
  000ed	5d		 pop	 rbp
  000ee	c3		 ret	 0
?push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z ENDP ; spdlog::details::backtracer::push_back
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
lock$ = 8
$T4 = 240
tv78 = 632
tv65 = 640
tv82 = 648
__$ArrayPad$ = 656
this$ = 704
msg$ = 712
?dtor$0@?0??push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z@4HA PROC ; `spdlog::details::backtracer::push_back'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR lock$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$lock_guard@Vmutex@std@@@std@@QEAA@XZ ; std::lock_guard<std::mutex>::~lock_guard<std::mutex>
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z@4HA ENDP ; `spdlog::details::backtracer::push_back'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
lock$ = 8
$T4 = 240
tv78 = 632
tv65 = 640
tv82 = 648
__$ArrayPad$ = 656
this$ = 704
msg$ = 712
?dtor$1@?0??push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z@4HA PROC ; `spdlog::details::backtracer::push_back'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d f0 00
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  0001b	e8 00 00 00 00	 call	 ??1log_msg_buffer@details@spdlog@@QEAA@XZ
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$1@?0??push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z@4HA ENDP ; `spdlog::details::backtracer::push_back'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
lock$ = 8
$T4 = 240
tv78 = 632
tv65 = 640
tv82 = 648
__$ArrayPad$ = 656
this$ = 704
msg$ = 712
?dtor$0@?0??push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z@4HA PROC ; `spdlog::details::backtracer::push_back'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR lock$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$lock_guard@Vmutex@std@@@std@@QEAA@XZ ; std::lock_guard<std::mutex>::~lock_guard<std::mutex>
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z@4HA ENDP ; `spdlog::details::backtracer::push_back'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
lock$ = 8
$T4 = 240
tv78 = 632
tv65 = 640
tv82 = 648
__$ArrayPad$ = 656
this$ = 704
msg$ = 712
?dtor$1@?0??push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z@4HA PROC ; `spdlog::details::backtracer::push_back'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d f0 00
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  0001b	e8 00 00 00 00	 call	 ??1log_msg_buffer@details@spdlog@@QEAA@XZ
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$1@?0??push_back@backtracer@details@spdlog@@QEAAXAEBUlog_msg@23@@Z@4HA ENDP ; `spdlog::details::backtracer::push_back'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\details\backtracer-inl.h
;	COMDAT ?enabled@backtracer@details@spdlog@@QEBA_NXZ
_TEXT	SEGMENT
tv73 = 192
this$ = 240
?enabled@backtracer@details@spdlog@@QEBA_NXZ PROC	; spdlog::details::backtracer::enabled, COMDAT

; 47   : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D800A915_backtracer-inl@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 48   :     return enabled_.load(std::memory_order_relaxed);

  0001f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 83 c0 50	 add	 rax, 80			; 00000050H
  0002a	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv73[rbp], rax
  00031	33 d2		 xor	 edx, edx
  00033	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv73[rbp]
  0003a	e8 00 00 00 00	 call	 ?load@?$_Atomic_storage@_N$00@std@@QEBA_NW4memory_order@2@@Z ; std::_Atomic_storage<bool,1>::load

; 49   : }

  0003f	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00046	5f		 pop	 rdi
  00047	5d		 pop	 rbp
  00048	c3		 ret	 0
?enabled@backtracer@details@spdlog@@QEBA_NXZ ENDP	; spdlog::details::backtracer::enabled
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\details\circular_q.h
;	COMDAT ?push_back@?$circular_q@Vlog_msg_buffer@details@spdlog@@@details@spdlog@@QEAAX$$QEAVlog_msg_buffer@23@@Z
_TEXT	SEGMENT
tv79 = 192
tv72 = 200
this$ = 240
item$ = 248
?push_back@?$circular_q@Vlog_msg_buffer@details@spdlog@@@details@spdlog@@QEAAX$$QEAVlog_msg_buffer@23@@Z PROC ; spdlog::details::circular_q<spdlog::details::log_msg_buffer>::push_back, COMDAT

; 50   :     {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B199D979_circular_q@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 51   :         if (max_items_ > 0)

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0002f	0f 86 cc 00 00
	00		 jbe	 $LN2@push_back

; 52   :         {
; 53   :             v_[tail_] = std::move(item);

  00035	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR item$[rbp]
  0003c	e8 00 00 00 00	 call	 ??$move@AEAVlog_msg_buffer@details@spdlog@@@std@@YA$$QEAVlog_msg_buffer@details@spdlog@@AEAV123@@Z ; std::move<spdlog::details::log_msg_buffer &>
  00041	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv79[rbp], rax
  00048	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004f	48 83 c0 20	 add	 rax, 32			; 00000020H
  00053	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv72[rbp], rax
  0005a	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00061	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  00065	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR tv72[rbp]
  0006c	e8 00 00 00 00	 call	 ??A?$vector@Vlog_msg_buffer@details@spdlog@@V?$allocator@Vlog_msg_buffer@details@spdlog@@@std@@@std@@QEAAAEAVlog_msg_buffer@details@spdlog@@_K@Z ; std::vector<spdlog::details::log_msg_buffer,std::allocator<spdlog::details::log_msg_buffer> >::operator[]
  00071	48 8b 95 c0 00
	00 00		 mov	 rdx, QWORD PTR tv79[rbp]
  00078	48 8b c8	 mov	 rcx, rax
  0007b	e8 00 00 00 00	 call	 ??4log_msg_buffer@details@spdlog@@QEAAAEAV012@$$QEAV012@@Z ; spdlog::details::log_msg_buffer::operator=

; 54   :             tail_ = (tail_ + 1) % max_items_;

  00080	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00087	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0008b	48 ff c0	 inc	 rax
  0008e	33 d2		 xor	 edx, edx
  00090	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00097	48 f7 31	 div	 QWORD PTR [rcx]
  0009a	48 8b c2	 mov	 rax, rdx
  0009d	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a4	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 55   : 
; 56   :             if (tail_ == head_) // overrun last item if full

  000a8	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000af	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b6	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000ba	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  000be	75 41		 jne	 SHORT $LN3@push_back

; 57   :             {
; 58   :                 head_ = (head_ + 1) % max_items_;

  000c0	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c7	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000cb	48 ff c0	 inc	 rax
  000ce	33 d2		 xor	 edx, edx
  000d0	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d7	48 f7 31	 div	 QWORD PTR [rcx]
  000da	48 8b c2	 mov	 rax, rdx
  000dd	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000e4	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 59   :                 ++overrun_counter_;

  000e8	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ef	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  000f3	48 ff c0	 inc	 rax
  000f6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fd	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
$LN3@push_back:
$LN2@push_back:

; 60   :             }
; 61   :         }
; 62   :     }

  00101	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00108	5f		 pop	 rdi
  00109	5d		 pop	 rbp
  0010a	c3		 ret	 0
?push_back@?$circular_q@Vlog_msg_buffer@details@spdlog@@@details@spdlog@@QEAAX$$QEAVlog_msg_buffer@23@@Z ENDP ; spdlog::details::circular_q<spdlog::details::log_msg_buffer>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vector
;	COMDAT ??A?$vector@Vlog_msg_buffer@details@spdlog@@V?$allocator@Vlog_msg_buffer@details@spdlog@@@std@@@std@@QEAAAEAVlog_msg_buffer@details@spdlog@@_K@Z
_TEXT	SEGMENT
_My_data$ = 8
this$ = 256
_Pos$ = 264
??A?$vector@Vlog_msg_buffer@details@spdlog@@V?$allocator@Vlog_msg_buffer@details@spdlog@@@std@@@std@@QEAAAEAVlog_msg_buffer@details@spdlog@@_K@Z PROC ; std::vector<spdlog::details::log_msg_buffer,std::allocator<spdlog::details::log_msg_buffer> >::operator[], COMDAT

; 1562 :     _NODISCARD _CONSTEXPR20_CONTAINER _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

$LN12:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  00013	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__092B7E84_vector
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1563 :         auto& _My_data = _Mypair._Myval2;

  00024	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax
$LN4@operator:

; 1564 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1565 :         _STL_VERIFY(

  0002f	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00033	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00037	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0003b	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0003f	48 2b c1	 sub	 rax, rcx
  00042	48 99		 cdq
  00044	b9 80 01 00 00	 mov	 ecx, 384		; 00000180H
  00049	48 f7 f9	 idiv	 rcx
  0004c	48 39 85 08 01
	00 00		 cmp	 QWORD PTR _Pos$[rbp], rax
  00053	73 02		 jae	 SHORT $LN7@operator
  00055	eb 69		 jmp	 SHORT $LN9@operator
$LN7@operator:
  00057	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
  0005e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00063	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0006a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006f	45 33 c9	 xor	 r9d, r9d
  00072	41 b8 1e 06 00
	00		 mov	 r8d, 1566		; 0000061eH
  00078	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GH@IJJCCHP@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  0007f	b9 02 00 00 00	 mov	 ecx, 2
  00084	e8 00 00 00 00	 call	 _CrtDbgReport
  00089	83 f8 01	 cmp	 eax, 1
  0008c	75 03		 jne	 SHORT $LN11@operator
  0008e	cc		 int	 3
  0008f	33 c0		 xor	 eax, eax
$LN11@operator:
  00091	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0009a	41 b9 1e 06 00
	00		 mov	 r9d, 1566		; 0000061eH
  000a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1MO@MBPFCBOF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  000a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1PK@GDDHBHML@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa@
  000ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
  000b5	e8 00 00 00 00	 call	 _invalid_parameter
  000ba	33 c0		 xor	 eax, eax
  000bc	85 c0		 test	 eax, eax
  000be	75 97		 jne	 SHORT $LN7@operator
$LN9@operator:
  000c0	33 c0		 xor	 eax, eax
  000c2	85 c0		 test	 eax, eax
  000c4	0f 85 65 ff ff
	ff		 jne	 $LN4@operator

; 1566 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1567 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1568 : 
; 1569 :         return _My_data._Myfirst[_Pos];

  000ca	48 69 85 08 01
	00 00 80 01 00
	00		 imul	 rax, QWORD PTR _Pos$[rbp], 384 ; 00000180H
  000d5	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  000d9	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]

; 1570 :     }

  000dd	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000e4	5f		 pop	 rdi
  000e5	5d		 pop	 rbp
  000e6	c3		 ret	 0
??A?$vector@Vlog_msg_buffer@details@spdlog@@V?$allocator@Vlog_msg_buffer@details@spdlog@@@std@@@std@@QEAAAEAVlog_msg_buffer@details@spdlog@@_K@Z ENDP ; std::vector<spdlog::details::log_msg_buffer,std::allocator<spdlog::details::log_msg_buffer> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\atomic
;	COMDAT ?load@?$_Atomic_storage@_N$00@std@@QEBA_NW4memory_order@2@@Z
_TEXT	SEGMENT
_Mem$ = 8
_As_bytes$ = 36
this$ = 288
_Order$ = 296
?load@?$_Atomic_storage@_N$00@std@@QEBA_NW4memory_order@2@@Z PROC ; std::_Atomic_storage<bool,1>::load, COMDAT

; 776  :     _NODISCARD _TVal load(const memory_order _Order) const noexcept { // load with given memory order

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2FB352A6_atomic
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 777  :         const auto _Mem = _Atomic_address_as<char>(_Storage);

  00023	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002a	48 8b c8	 mov	 rcx, rax
  0002d	e8 00 00 00 00	 call	 ??$_Atomic_address_as@DU?$_Atomic_padded@_N@std@@@std@@YAPEDDAEBU?$_Atomic_padded@_N@0@@Z ; std::_Atomic_address_as<char,std::_Atomic_padded<bool> >
  00032	48 89 45 08	 mov	 QWORD PTR _Mem$[rbp], rax

; 778  :         char _As_bytes  = __iso_volatile_load8(_Mem);

  00036	48 8b 45 08	 mov	 rax, QWORD PTR _Mem$[rbp]
  0003a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0003d	88 45 24	 mov	 BYTE PTR _As_bytes$[rbp], al

; 779  :         _Load_barrier(_Order);

  00040	8b 8d 28 01 00
	00		 mov	 ecx, DWORD PTR _Order$[rbp]
  00046	e8 00 00 00 00	 call	 ?_Load_barrier@std@@YAXW4memory_order@1@@Z ; std::_Load_barrier

; 780  :         return reinterpret_cast<_TVal&>(_As_bytes);

  0004b	0f b6 45 24	 movzx	 eax, BYTE PTR _As_bytes$[rbp]

; 781  :     }

  0004f	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00056	5f		 pop	 rdi
  00057	5d		 pop	 rbp
  00058	c3		 ret	 0
?load@?$_Atomic_storage@_N$00@std@@QEBA_NW4memory_order@2@@Z ENDP ; std::_Atomic_storage<bool,1>::load
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\type_traits
;	COMDAT ??$move@AEAV?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@@std@@YA$$QEAV?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@AEAV123@@Z
_TEXT	SEGMENT
_Arg$ = 224
??$move@AEAV?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@@std@@YA$$QEAV?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@AEAV123@@Z PROC ; std::move<fmt::v8::basic_memory_buffer<char,250,std::allocator<char> > &>, COMDAT

; 1455 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D1154D4E_type_traits
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1456 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]

; 1457 : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$move@AEAV?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@@std@@YA$$QEAV?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@AEAV123@@Z ENDP ; std::move<fmt::v8::basic_memory_buffer<char,250,std::allocator<char> > &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\fmt\bundled\format.h
;	COMDAT ??$append@D@?$buffer@D@detail@v8@fmt@@QEAAXPEBD0@Z
_TEXT	SEGMENT
count$1 = 8
free_cap$2 = 40
$T3 = 264
$T4 = 312
$T5 = 368
this$ = 448
begin$ = 456
end$ = 464
??$append@D@?$buffer@D@detail@v8@fmt@@QEAAXPEBD0@Z PROC	; fmt::v8::detail::buffer<char>::append<char>, COMDAT

; 577  : void buffer<T>::append(const U* begin, const U* end) {

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 81 ec c0 01
	00 00		 sub	 rsp, 448		; 000001c0H
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ACE4895D_format@h
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
$LN2@append:

; 578  :   while (begin != end) {

  0002a	48 8b 85 d0 01
	00 00		 mov	 rax, QWORD PTR end$[rbp]
  00031	48 39 85 c8 01
	00 00		 cmp	 QWORD PTR begin$[rbp], rax
  00038	0f 84 ff 00 00
	00		 je	 $LN3@append

; 579  :     auto count = to_unsigned(end - begin);

  0003e	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR begin$[rbp]
  00045	48 8b 8d d0 01
	00 00		 mov	 rcx, QWORD PTR end$[rbp]
  0004c	48 2b c8	 sub	 rcx, rax
  0004f	48 8b c1	 mov	 rax, rcx
  00052	48 8b c8	 mov	 rcx, rax
  00055	e8 00 00 00 00	 call	 ??$to_unsigned@_J@detail@v8@fmt@@YA_K_J@Z ; fmt::v8::detail::to_unsigned<__int64>
  0005a	48 89 45 08	 mov	 QWORD PTR count$1[rbp], rax

; 580  :     try_reserve(size_ + count);

  0005e	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00065	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00069	48 03 45 08	 add	 rax, QWORD PTR count$1[rbp]
  0006d	48 8b d0	 mov	 rdx, rax
  00070	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00077	e8 00 00 00 00	 call	 ?try_reserve@?$buffer@D@detail@v8@fmt@@QEAAX_K@Z ; fmt::v8::detail::buffer<char>::try_reserve

; 581  :     auto free_cap = capacity_ - size_;

  0007c	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00083	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008a	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0008e	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00092	48 2b c1	 sub	 rax, rcx
  00095	48 89 45 28	 mov	 QWORD PTR free_cap$2[rbp], rax

; 582  :     if (free_cap < count) count = free_cap;

  00099	48 8b 45 08	 mov	 rax, QWORD PTR count$1[rbp]
  0009d	48 39 45 28	 cmp	 QWORD PTR free_cap$2[rbp], rax
  000a1	73 08		 jae	 SHORT $LN4@append
  000a3	48 8b 45 28	 mov	 rax, QWORD PTR free_cap$2[rbp]
  000a7	48 89 45 08	 mov	 QWORD PTR count$1[rbp], rax
$LN4@append:

; 583  :     std::uninitialized_copy_n(begin, count, make_checked(ptr_ + size_, count));

  000ab	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b2	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000b6	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000bd	48 03 41 10	 add	 rax, QWORD PTR [rcx+16]
  000c1	4c 8b 45 08	 mov	 r8, QWORD PTR count$1[rbp]
  000c5	48 8b d0	 mov	 rdx, rax
  000c8	48 8d 8d 08 01
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  000cf	e8 00 00 00 00	 call	 ??$make_checked@D@detail@v8@fmt@@YA?AV?$checked_array_iterator@PEAD@stdext@@PEAD_K@Z ; fmt::v8::detail::make_checked<char>
  000d4	48 8d 8d 70 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  000db	48 8b f9	 mov	 rdi, rcx
  000de	48 8b f0	 mov	 rsi, rax
  000e1	b9 18 00 00 00	 mov	 ecx, 24
  000e6	f3 a4		 rep movsb
  000e8	4c 8d 8d 70 01
	00 00		 lea	 r9, QWORD PTR $T5[rbp]
  000ef	4c 8b 45 08	 mov	 r8, QWORD PTR count$1[rbp]
  000f3	48 8b 95 c8 01
	00 00		 mov	 rdx, QWORD PTR begin$[rbp]
  000fa	48 8d 8d 38 01
	00 00		 lea	 rcx, QWORD PTR $T4[rbp]
  00101	e8 00 00 00 00	 call	 ??$uninitialized_copy_n@PEBD_KV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEBD_KV12@@Z ; std::uninitialized_copy_n<char const *,unsigned __int64,stdext::checked_array_iterator<char *> >

; 584  :     size_ += count;

  00106	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0010d	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00111	48 03 45 08	 add	 rax, QWORD PTR count$1[rbp]
  00115	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011c	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 585  :     begin += count;

  00120	48 8b 45 08	 mov	 rax, QWORD PTR count$1[rbp]
  00124	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR begin$[rbp]
  0012b	48 03 c8	 add	 rcx, rax
  0012e	48 8b c1	 mov	 rax, rcx
  00131	48 89 85 c8 01
	00 00		 mov	 QWORD PTR begin$[rbp], rax

; 586  :   }

  00138	e9 ed fe ff ff	 jmp	 $LN2@append
$LN3@append:

; 587  : }

  0013d	48 8d a5 a0 01
	00 00		 lea	 rsp, QWORD PTR [rbp+416]
  00144	5f		 pop	 rdi
  00145	5e		 pop	 rsi
  00146	5d		 pop	 rbp
  00147	c3		 ret	 0
??$append@D@?$buffer@D@detail@v8@fmt@@QEAAXPEBD0@Z ENDP	; fmt::v8::detail::buffer<char>::append<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1log_msg_buffer@details@spdlog@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1log_msg_buffer@details@spdlog@@QEAA@XZ PROC		; spdlog::details::log_msg_buffer::~log_msg_buffer, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0001a	48 83 c0 60	 add	 rax, 96			; 00000060H
  0001e	48 8b c8	 mov	 rcx, rax
  00021	e8 00 00 00 00	 call	 ??1?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAA@XZ ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::~basic_memory_buffer<char,250,std::allocator<char> >
  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??1log_msg_buffer@details@spdlog@@QEAA@XZ ENDP		; spdlog::details::log_msg_buffer::~log_msg_buffer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\details\log_msg_buffer-inl.h
;	COMDAT ??4log_msg_buffer@details@spdlog@@QEAAAEAV012@$$QEAV012@@Z
_TEXT	SEGMENT
this$ = 224
other$ = 232
??4log_msg_buffer@details@spdlog@@QEAAAEAV012@$$QEAV012@@Z PROC ; spdlog::details::log_msg_buffer::operator=, COMDAT

; 44   : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	56		 push	 rsi
  0000c	57		 push	 rdi
  0000d	48 81 ec e0 00
	00 00		 sub	 rsp, 224		; 000000e0H
  00014	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F57254B2_log_msg_buffer-inl@h
  00020	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 45   :     log_msg::operator=(other);

  00025	48 8b bd e0 00
	00 00		 mov	 rdi, QWORD PTR this$[rbp]
  0002c	48 8b b5 e8 00
	00 00		 mov	 rsi, QWORD PTR other$[rbp]
  00033	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  00038	f3 a4		 rep movsb

; 46   :     buffer = std::move(other.buffer);

  0003a	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR other$[rbp]
  00041	48 83 c0 60	 add	 rax, 96			; 00000060H
  00045	48 8b c8	 mov	 rcx, rax
  00048	e8 00 00 00 00	 call	 ??$move@AEAV?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@@std@@YA$$QEAV?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@AEAV123@@Z ; std::move<fmt::v8::basic_memory_buffer<char,250,std::allocator<char> > &>
  0004d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00054	48 83 c1 60	 add	 rcx, 96			; 00000060H
  00058	48 8b d0	 mov	 rdx, rax
  0005b	e8 00 00 00 00	 call	 ??4?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAAAEAV012@$$QEAV012@@Z ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::operator=

; 47   :     update_string_views();

  00060	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00067	e8 00 00 00 00	 call	 ?update_string_views@log_msg_buffer@details@spdlog@@AEAAXXZ ; spdlog::details::log_msg_buffer::update_string_views

; 48   :     return *this;

  0006c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 49   : }

  00073	48 8d a5 c0 00
	00 00		 lea	 rsp, QWORD PTR [rbp+192]
  0007a	5f		 pop	 rdi
  0007b	5e		 pop	 rsi
  0007c	5d		 pop	 rbp
  0007d	c3		 ret	 0
??4log_msg_buffer@details@spdlog@@QEAAAEAV012@$$QEAV012@@Z ENDP ; spdlog::details::log_msg_buffer::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\details\log_msg_buffer-inl.h
;	COMDAT ??0log_msg_buffer@details@spdlog@@QEAA@AEBUlog_msg@12@@Z
_TEXT	SEGMENT
$T1 = 196
tv166 = 216
tv138 = 216
tv76 = 216
tv164 = 224
tv136 = 224
tv162 = 232
tv134 = 232
this$ = 272
orig_msg$ = 280
??0log_msg_buffer@details@spdlog@@QEAA@AEBUlog_msg@12@@Z PROC ; spdlog::details::log_msg_buffer::log_msg_buffer, COMDAT

; 15   : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	56		 push	 rsi
  0000c	57		 push	 rdi
  0000d	48 81 ec 10 01
	00 00		 sub	 rsp, 272		; 00000110H
  00014	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F57254B2_log_msg_buffer-inl@h
  00020	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 14   :     : log_msg{orig_msg}

  00025	48 8b bd 10 01
	00 00		 mov	 rdi, QWORD PTR this$[rbp]
  0002c	48 8b b5 18 01
	00 00		 mov	 rsi, QWORD PTR orig_msg$[rbp]
  00033	b9 60 00 00 00	 mov	 ecx, 96			; 00000060H
  00038	f3 a4		 rep movsb

; 15   : {

  0003a	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00041	48 83 c0 60	 add	 rax, 96			; 00000060H
  00045	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv76[rbp], rax
  0004c	48 8d 8d c4 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00053	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QEAA@XZ ; std::allocator<char>::allocator<char>
  00058	48 8b d0	 mov	 rdx, rax
  0005b	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv76[rbp]
  00062	e8 00 00 00 00	 call	 ??0?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAA@AEBV?$allocator@D@std@@@Z ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::basic_memory_buffer<char,250,std::allocator<char> >
  00067	90		 npad	 1

; 16   :     buffer.append(logger_name.begin(), logger_name.end());

  00068	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006f	48 83 c0 60	 add	 rax, 96			; 00000060H
  00073	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv138[rbp], rax
  0007a	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00081	e8 00 00 00 00	 call	 ?end@?$basic_string_view@D@v8@fmt@@QEBAPEBDXZ ; fmt::v8::basic_string_view<char>::end
  00086	48 89 85 e0 00
	00 00		 mov	 QWORD PTR tv136[rbp], rax
  0008d	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00094	e8 00 00 00 00	 call	 ?begin@?$basic_string_view@D@v8@fmt@@QEBAPEBDXZ ; fmt::v8::basic_string_view<char>::begin
  00099	48 89 85 e8 00
	00 00		 mov	 QWORD PTR tv134[rbp], rax
  000a0	4c 8b 85 e0 00
	00 00		 mov	 r8, QWORD PTR tv136[rbp]
  000a7	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR tv134[rbp]
  000ae	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv138[rbp]
  000b5	e8 00 00 00 00	 call	 ??$append@D@?$buffer@D@detail@v8@fmt@@QEAAXPEBD0@Z ; fmt::v8::detail::buffer<char>::append<char>

; 17   :     buffer.append(payload.begin(), payload.end());

  000ba	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c1	48 83 c0 60	 add	 rax, 96			; 00000060H
  000c5	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv166[rbp], rax
  000cc	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000d3	48 83 c0 50	 add	 rax, 80			; 00000050H
  000d7	48 8b c8	 mov	 rcx, rax
  000da	e8 00 00 00 00	 call	 ?end@?$basic_string_view@D@v8@fmt@@QEBAPEBDXZ ; fmt::v8::basic_string_view<char>::end
  000df	48 89 85 e0 00
	00 00		 mov	 QWORD PTR tv164[rbp], rax
  000e6	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ed	48 83 c0 50	 add	 rax, 80			; 00000050H
  000f1	48 8b c8	 mov	 rcx, rax
  000f4	e8 00 00 00 00	 call	 ?begin@?$basic_string_view@D@v8@fmt@@QEBAPEBDXZ ; fmt::v8::basic_string_view<char>::begin
  000f9	48 89 85 e8 00
	00 00		 mov	 QWORD PTR tv162[rbp], rax
  00100	4c 8b 85 e0 00
	00 00		 mov	 r8, QWORD PTR tv164[rbp]
  00107	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR tv162[rbp]
  0010e	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv166[rbp]
  00115	e8 00 00 00 00	 call	 ??$append@D@?$buffer@D@detail@v8@fmt@@QEAAXPEBD0@Z ; fmt::v8::detail::buffer<char>::append<char>

; 18   :     update_string_views();

  0011a	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00121	e8 00 00 00 00	 call	 ?update_string_views@log_msg_buffer@details@spdlog@@AEAAXXZ ; spdlog::details::log_msg_buffer::update_string_views
  00126	90		 npad	 1

; 19   : }

  00127	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0012e	48 8d a5 f0 00
	00 00		 lea	 rsp, QWORD PTR [rbp+240]
  00135	5f		 pop	 rdi
  00136	5e		 pop	 rsi
  00137	5d		 pop	 rbp
  00138	c3		 ret	 0
??0log_msg_buffer@details@spdlog@@QEAA@AEBUlog_msg@12@@Z ENDP ; spdlog::details::log_msg_buffer::log_msg_buffer
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
tv166 = 216
tv138 = 216
tv76 = 216
tv164 = 224
tv136 = 224
tv162 = 232
tv134 = 232
this$ = 272
orig_msg$ = 280
?dtor$0@?0???0log_msg_buffer@details@spdlog@@QEAA@AEBUlog_msg@12@@Z@4HA PROC ; `spdlog::details::log_msg_buffer::log_msg_buffer'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	48 83 c1 60	 add	 rcx, 96			; 00000060H
  0001f	e8 00 00 00 00	 call	 ??1?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAA@XZ ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::~basic_memory_buffer<char,250,std::allocator<char> >
  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	5f		 pop	 rdi
  00029	5d		 pop	 rbp
  0002a	c3		 ret	 0
?dtor$0@?0???0log_msg_buffer@details@spdlog@@QEAA@AEBUlog_msg@12@@Z@4HA ENDP ; `spdlog::details::log_msg_buffer::log_msg_buffer'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
tv166 = 216
tv138 = 216
tv76 = 216
tv164 = 224
tv136 = 224
tv162 = 232
tv134 = 232
this$ = 272
orig_msg$ = 280
?dtor$0@?0???0log_msg_buffer@details@spdlog@@QEAA@AEBUlog_msg@12@@Z@4HA PROC ; `spdlog::details::log_msg_buffer::log_msg_buffer'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	48 83 c1 60	 add	 rcx, 96			; 00000060H
  0001f	e8 00 00 00 00	 call	 ??1?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAA@XZ ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::~basic_memory_buffer<char,250,std::allocator<char> >
  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	5f		 pop	 rdi
  00029	5d		 pop	 rbp
  0002a	c3		 ret	 0
?dtor$0@?0???0log_msg_buffer@details@spdlog@@QEAA@AEBUlog_msg@12@@Z@4HA ENDP ; `spdlog::details::log_msg_buffer::log_msg_buffer'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\details\log_msg_buffer-inl.h
;	COMDAT ?update_string_views@log_msg_buffer@details@spdlog@@AEAAXXZ
_TEXT	SEGMENT
$T1 = 200
$T2 = 248
tv145 = 280
tv88 = 280
tv156 = 288
tv90 = 288
tv158 = 296
this$ = 336
?update_string_views@log_msg_buffer@details@spdlog@@AEAAXXZ PROC ; spdlog::details::log_msg_buffer::update_string_views, COMDAT

; 52   : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	56		 push	 rsi
  00007	57		 push	 rdi
  00008	48 81 ec 50 01
	00 00		 sub	 rsp, 336		; 00000150H
  0000f	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F57254B2_log_msg_buffer-inl@h
  0001b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 53   :     logger_name = string_view_t{buffer.data(), logger_name.size()};

  00020	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00027	48 83 c0 60	 add	 rax, 96			; 00000060H
  0002b	48 8b c8	 mov	 rcx, rax
  0002e	e8 00 00 00 00	 call	 ?data@?$buffer@D@detail@v8@fmt@@QEAAPEADXZ ; fmt::v8::detail::buffer<char>::data
  00033	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv88[rbp], rax
  0003a	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00041	e8 00 00 00 00	 call	 ?size@?$basic_string_view@D@v8@fmt@@QEBA_KXZ ; fmt::v8::basic_string_view<char>::size
  00046	48 89 85 20 01
	00 00		 mov	 QWORD PTR tv90[rbp], rax
  0004d	4c 8b 85 20 01
	00 00		 mov	 r8, QWORD PTR tv90[rbp]
  00054	48 8b 95 18 01
	00 00		 mov	 rdx, QWORD PTR tv88[rbp]
  0005b	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00062	e8 00 00 00 00	 call	 ??0?$basic_string_view@D@v8@fmt@@QEAA@PEBD_K@Z ; fmt::v8::basic_string_view<char>::basic_string_view<char>
  00067	48 8b bd 50 01
	00 00		 mov	 rdi, QWORD PTR this$[rbp]
  0006e	48 8b f0	 mov	 rsi, rax
  00071	b9 10 00 00 00	 mov	 ecx, 16
  00076	f3 a4		 rep movsb

; 54   :     payload = string_view_t{buffer.data() + logger_name.size(), payload.size()};

  00078	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007f	48 83 c0 60	 add	 rax, 96			; 00000060H
  00083	48 8b c8	 mov	 rcx, rax
  00086	e8 00 00 00 00	 call	 ?data@?$buffer@D@detail@v8@fmt@@QEAAPEADXZ ; fmt::v8::detail::buffer<char>::data
  0008b	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv145[rbp], rax
  00092	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00099	e8 00 00 00 00	 call	 ?size@?$basic_string_view@D@v8@fmt@@QEBA_KXZ ; fmt::v8::basic_string_view<char>::size
  0009e	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR tv145[rbp]
  000a5	48 03 c8	 add	 rcx, rax
  000a8	48 8b c1	 mov	 rax, rcx
  000ab	48 89 85 20 01
	00 00		 mov	 QWORD PTR tv156[rbp], rax
  000b2	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b9	48 83 c0 50	 add	 rax, 80			; 00000050H
  000bd	48 8b c8	 mov	 rcx, rax
  000c0	e8 00 00 00 00	 call	 ?size@?$basic_string_view@D@v8@fmt@@QEBA_KXZ ; fmt::v8::basic_string_view<char>::size
  000c5	48 89 85 28 01
	00 00		 mov	 QWORD PTR tv158[rbp], rax
  000cc	4c 8b 85 28 01
	00 00		 mov	 r8, QWORD PTR tv158[rbp]
  000d3	48 8b 95 20 01
	00 00		 mov	 rdx, QWORD PTR tv156[rbp]
  000da	48 8d 8d f8 00
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  000e1	e8 00 00 00 00	 call	 ??0?$basic_string_view@D@v8@fmt@@QEAA@PEBD_K@Z ; fmt::v8::basic_string_view<char>::basic_string_view<char>
  000e6	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ed	48 8d 79 50	 lea	 rdi, QWORD PTR [rcx+80]
  000f1	48 8b f0	 mov	 rsi, rax
  000f4	b9 10 00 00 00	 mov	 ecx, 16
  000f9	f3 a4		 rep movsb

; 55   : }

  000fb	48 8d a5 30 01
	00 00		 lea	 rsp, QWORD PTR [rbp+304]
  00102	5f		 pop	 rdi
  00103	5e		 pop	 rsi
  00104	5d		 pop	 rbp
  00105	c3		 ret	 0
?update_string_views@log_msg_buffer@details@spdlog@@AEAAXXZ ENDP ; spdlog::details::log_msg_buffer::update_string_views
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\details\os-inl.h
;	COMDAT ?thread_id@os@details@spdlog@@YA_KXZ
_TEXT	SEGMENT
tv93 = 192
?thread_id@os@details@spdlog@@YA_KXZ PROC		; spdlog::details::os::thread_id, COMDAT

; 365  : {

$LN4:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F755426D_os-inl@h
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 366  : #if defined(SPDLOG_NO_TLS)
; 367  :     return _thread_id();
; 368  : #else // cache thread id in tls
; 369  :     static thread_local const size_t tid = _thread_id();

  0001b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??__J?1??thread_id@os@details@spdlog@@YA_KXZ@51
  00020	8b c0		 mov	 eax, eax
  00022	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00028	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00031	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00035	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00038	83 e0 01	 and	 eax, 1
  0003b	85 c0		 test	 eax, eax
  0003d	75 71		 jne	 SHORT $LN2@thread_id
  0003f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:??__J?1??thread_id@os@details@spdlog@@YA_KXZ@51
  00044	8b c0		 mov	 eax, eax
  00046	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0004c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00055	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00059	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  0005c	83 c8 01	 or	 eax, 1
  0005f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00065	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0006e	41 b8 00 00 00
	00		 mov	 r8d, OFFSET FLAT:??__J?1??thread_id@os@details@spdlog@@YA_KXZ@51
  00074	45 8b c0	 mov	 r8d, r8d
  00077	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0007b	41 89 04 08	 mov	 DWORD PTR [r8+rcx], eax
  0007f	e8 00 00 00 00	 call	 ?_thread_id@os@details@spdlog@@YA_KXZ ; spdlog::details::os::_thread_id
  00084	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv93[rbp], rax
  0008b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?tid@?1??thread_id@os@details@spdlog@@YA_KXZ@4_KB ; `spdlog::details::os::thread_id'::`2'::tid
  00090	8b c0		 mov	 eax, eax
  00092	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00098	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000a1	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  000a5	48 8b 95 c0 00
	00 00		 mov	 rdx, QWORD PTR tv93[rbp]
  000ac	48 89 14 08	 mov	 QWORD PTR [rax+rcx], rdx
$LN2@thread_id:

; 370  :     return tid;

  000b0	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?tid@?1??thread_id@os@details@spdlog@@YA_KXZ@4_KB ; `spdlog::details::os::thread_id'::`2'::tid
  000b5	8b c0		 mov	 eax, eax
  000b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000bd	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000c6	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  000ca	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]

; 371  : #endif
; 372  : }

  000ce	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  000d5	5f		 pop	 rdi
  000d6	5d		 pop	 rbp
  000d7	c3		 ret	 0
?thread_id@os@details@spdlog@@YA_KXZ ENDP		; spdlog::details::os::thread_id
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\details\os-inl.h
;	COMDAT ?_thread_id@os@details@spdlog@@YA_KXZ
_TEXT	SEGMENT
?_thread_id@os@details@spdlog@@YA_KXZ PROC		; spdlog::details::os::_thread_id, COMDAT

; 331  : {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F755426D_os-inl@h
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 332  : #ifdef _WIN32
; 333  :     return static_cast<size_t>(::GetCurrentThreadId());

  0001b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetCurrentThreadId
  00021	8b c0		 mov	 eax, eax

; 334  : #elif defined(__linux__)
; 335  : #    if defined(__ANDROID__) && defined(__ANDROID_API__) && (__ANDROID_API__ < 21)
; 336  : #        define SYS_gettid __NR_gettid
; 337  : #    endif
; 338  :     return static_cast<size_t>(::syscall(SYS_gettid));
; 339  : #elif defined(_AIX)
; 340  :     struct __pthrdsinfo buf;
; 341  :     int reg_size = 0;
; 342  :     pthread_t pt = pthread_self();
; 343  :     int retval = pthread_getthrds_np(&pt, PTHRDSINFO_QUERY_TID, &buf, sizeof(buf), NULL, &reg_size);
; 344  :     int tid = (!retval) ? buf.__pi_tid : 0;
; 345  :     return static_cast<size_t>(tid);
; 346  : #elif defined(__DragonFly__) || defined(__FreeBSD__)
; 347  :     return static_cast<size_t>(::pthread_getthreadid_np());
; 348  : #elif defined(__NetBSD__)
; 349  :     return static_cast<size_t>(::_lwp_self());
; 350  : #elif defined(__OpenBSD__)
; 351  :     return static_cast<size_t>(::getthrid());
; 352  : #elif defined(__sun)
; 353  :     return static_cast<size_t>(::thr_self());
; 354  : #elif __APPLE__
; 355  :     uint64_t tid;
; 356  :     pthread_threadid_np(nullptr, &tid);
; 357  :     return static_cast<size_t>(tid);
; 358  : #else // Default to standard C++11 (other Unix)
; 359  :     return static_cast<size_t>(std::hash<std::thread::id>()(std::this_thread::get_id()));
; 360  : #endif
; 361  : }

  00023	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002a	5f		 pop	 rdi
  0002b	5d		 pop	 rbp
  0002c	c3		 ret	 0
?_thread_id@os@details@spdlog@@YA_KXZ ENDP		; spdlog::details::os::_thread_id
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\details\os-inl.h
;	COMDAT ?now@os@details@spdlog@@YA?AV?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@XZ
_TEXT	SEGMENT
__$ReturnUdt$ = 224
?now@os@details@spdlog@@YA?AV?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@XZ PROC ; spdlog::details::os::now, COMDAT

; 72   : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F755426D_os-inl@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 73   : 
; 74   : #if defined __linux__ && defined SPDLOG_CLOCK_COARSE
; 75   :     timespec ts;
; 76   :     ::clock_gettime(CLOCK_REALTIME_COARSE, &ts);
; 77   :     return std::chrono::time_point<log_clock, typename log_clock::duration>(
; 78   :         std::chrono::duration_cast<typename log_clock::duration>(std::chrono::seconds(ts.tv_sec) + std::chrono::nanoseconds(ts.tv_nsec)));
; 79   : 
; 80   : #else
; 81   :     return log_clock::now();

  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00026	e8 00 00 00 00	 call	 ?now@system_clock@chrono@std@@SA?AV?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@23@XZ ; std::chrono::system_clock::now
  0002b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 82   : #endif
; 83   : }

  00032	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00039	5f		 pop	 rdi
  0003a	5d		 pop	 rbp
  0003b	c3		 ret	 0
?now@os@details@spdlog@@YA?AV?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@XZ ENDP ; spdlog::details::os::now
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\details\log_msg-inl.h
;	COMDAT ??0log_msg@details@spdlog@@QEAA@Usource_loc@2@V?$basic_string_view@D@v8@fmt@@W4level_enum@level@2@1@Z
_TEXT	SEGMENT
$T1 = 392
$T2 = 424
$T3 = 456
$T4 = 504
$T5 = 536
$T6 = 584
$T7 = 616
$T8 = 664
$T9 = 712
$T10 = 760
$T11 = 808
$T12 = 856
$T13 = 904
$T14 = 960
$T15 = 1024
$T16 = 1072
this$ = 1136
loc$ = 1144
a_logger_name$ = 1152
lvl$ = 1160
msg$ = 1168
??0log_msg@details@spdlog@@QEAA@Usource_loc@2@V?$basic_string_view@D@v8@fmt@@W4level_enum@level@2@1@Z PROC ; spdlog::details::log_msg::log_msg, COMDAT

; 30   : {}

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec 80 04
	00 00		 sub	 rsp, 1152		; 00000480H
  0001e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D08F34F5_log_msg-inl@h
  0002a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 29   :     : log_msg(os::now(), loc, a_logger_name, lvl, msg)

  0002f	48 8d 85 68 02
	00 00		 lea	 rax, QWORD PTR $T7[rbp]
  00036	48 8b f8	 mov	 rdi, rax
  00039	48 8b b5 90 04
	00 00		 mov	 rsi, QWORD PTR msg$[rbp]
  00040	b9 10 00 00 00	 mov	 ecx, 16
  00045	f3 a4		 rep movsb
  00047	48 8d 85 28 03
	00 00		 lea	 rax, QWORD PTR $T11[rbp]
  0004e	48 8d 8d 68 02
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00055	48 8b f8	 mov	 rdi, rax
  00058	48 8b f1	 mov	 rsi, rcx
  0005b	b9 10 00 00 00	 mov	 ecx, 16
  00060	f3 a4		 rep movsb
  00062	48 8d 85 88 03
	00 00		 lea	 rax, QWORD PTR $T13[rbp]
  00069	48 8d 8d 28 03
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  00070	48 8b f8	 mov	 rdi, rax
  00073	48 8b f1	 mov	 rsi, rcx
  00076	b9 10 00 00 00	 mov	 ecx, 16
  0007b	f3 a4		 rep movsb
  0007d	48 8d 85 18 02
	00 00		 lea	 rax, QWORD PTR $T5[rbp]
  00084	48 8b f8	 mov	 rdi, rax
  00087	48 8b b5 80 04
	00 00		 mov	 rsi, QWORD PTR a_logger_name$[rbp]
  0008e	b9 10 00 00 00	 mov	 ecx, 16
  00093	f3 a4		 rep movsb
  00095	48 8d 85 c8 02
	00 00		 lea	 rax, QWORD PTR $T9[rbp]
  0009c	48 8d 8d 18 02
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  000a3	48 8b f8	 mov	 rdi, rax
  000a6	48 8b f1	 mov	 rsi, rcx
  000a9	b9 10 00 00 00	 mov	 ecx, 16
  000ae	f3 a4		 rep movsb
  000b0	48 8d 85 58 03
	00 00		 lea	 rax, QWORD PTR $T12[rbp]
  000b7	48 8d 8d c8 02
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  000be	48 8b f8	 mov	 rdi, rax
  000c1	48 8b f1	 mov	 rsi, rcx
  000c4	b9 10 00 00 00	 mov	 ecx, 16
  000c9	f3 a4		 rep movsb
  000cb	48 8d 85 c8 01
	00 00		 lea	 rax, QWORD PTR $T3[rbp]
  000d2	48 8b f8	 mov	 rdi, rax
  000d5	48 8b b5 78 04
	00 00		 mov	 rsi, QWORD PTR loc$[rbp]
  000dc	b9 18 00 00 00	 mov	 ecx, 24
  000e1	f3 a4		 rep movsb
  000e3	48 8d 85 98 02
	00 00		 lea	 rax, QWORD PTR $T8[rbp]
  000ea	48 8d 8d c8 01
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  000f1	48 8b f8	 mov	 rdi, rax
  000f4	48 8b f1	 mov	 rsi, rcx
  000f7	b9 18 00 00 00	 mov	 ecx, 24
  000fc	f3 a4		 rep movsb
  000fe	48 8d 85 f8 02
	00 00		 lea	 rax, QWORD PTR $T10[rbp]
  00105	48 8d 8d 98 02
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  0010c	48 8b f8	 mov	 rdi, rax
  0010f	48 8b f1	 mov	 rsi, rcx
  00112	b9 18 00 00 00	 mov	 ecx, 24
  00117	f3 a4		 rep movsb
  00119	48 8d 8d 88 01
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00120	e8 00 00 00 00	 call	 ?now@os@details@spdlog@@YA?AV?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@XZ ; spdlog::details::os::now
  00125	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00128	48 89 85 a8 01
	00 00		 mov	 QWORD PTR $T2[rbp], rax
  0012f	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR $T2[rbp]
  00136	48 89 85 f8 01
	00 00		 mov	 QWORD PTR $T4[rbp], rax
  0013d	48 8b 85 f8 01
	00 00		 mov	 rax, QWORD PTR $T4[rbp]
  00144	48 89 85 48 02
	00 00		 mov	 QWORD PTR $T6[rbp], rax
  0014b	48 8d 85 30 04
	00 00		 lea	 rax, QWORD PTR $T16[rbp]
  00152	48 8d 8d 88 03
	00 00		 lea	 rcx, QWORD PTR $T13[rbp]
  00159	48 8b f8	 mov	 rdi, rax
  0015c	48 8b f1	 mov	 rsi, rcx
  0015f	b9 10 00 00 00	 mov	 ecx, 16
  00164	f3 a4		 rep movsb
  00166	48 8d 85 00 04
	00 00		 lea	 rax, QWORD PTR $T15[rbp]
  0016d	48 8d 8d 58 03
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  00174	48 8b f8	 mov	 rdi, rax
  00177	48 8b f1	 mov	 rsi, rcx
  0017a	b9 10 00 00 00	 mov	 ecx, 16
  0017f	f3 a4		 rep movsb
  00181	48 8d 85 c0 03
	00 00		 lea	 rax, QWORD PTR $T14[rbp]
  00188	48 8d 8d f8 02
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  0018f	48 8b f8	 mov	 rdi, rax
  00192	48 8b f1	 mov	 rsi, rcx
  00195	b9 18 00 00 00	 mov	 ecx, 24
  0019a	f3 a4		 rep movsb
  0019c	48 8d 85 30 04
	00 00		 lea	 rax, QWORD PTR $T16[rbp]
  001a3	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001a8	8b 85 88 04 00
	00		 mov	 eax, DWORD PTR lvl$[rbp]
  001ae	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  001b2	4c 8d 8d 00 04
	00 00		 lea	 r9, QWORD PTR $T15[rbp]
  001b9	4c 8d 85 c0 03
	00 00		 lea	 r8, QWORD PTR $T14[rbp]
  001c0	48 8b 95 48 02
	00 00		 mov	 rdx, QWORD PTR $T6[rbp]
  001c7	48 8b 8d 70 04
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001ce	e8 00 00 00 00	 call	 ??0log_msg@details@spdlog@@QEAA@V?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@Usource_loc@2@V?$basic_string_view@D@v8@fmt@@W4level_enum@level@2@2@Z ; spdlog::details::log_msg::log_msg

; 30   : {}

  001d3	48 8b 85 70 04
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001da	48 8d a5 50 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1104]
  001e1	5f		 pop	 rdi
  001e2	5e		 pop	 rsi
  001e3	5d		 pop	 rbp
  001e4	c3		 ret	 0
??0log_msg@details@spdlog@@QEAA@Usource_loc@2@V?$basic_string_view@D@v8@fmt@@W4level_enum@level@2@1@Z ENDP ; spdlog::details::log_msg::log_msg
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\details\log_msg-inl.h
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\details\log_msg.h
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\details\log_msg-inl.h
;	COMDAT ??0log_msg@details@spdlog@@QEAA@V?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@Usource_loc@2@V?$basic_string_view@D@v8@fmt@@W4level_enum@level@2@2@Z
_TEXT	SEGMENT
this$ = 224
log_time$ = 232
loc$ = 240
a_logger_name$ = 248
lvl$ = 256
msg$ = 264
??0log_msg@details@spdlog@@QEAA@V?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@Usource_loc@2@V?$basic_string_view@D@v8@fmt@@W4level_enum@level@2@2@Z PROC ; spdlog::details::log_msg::log_msg, COMDAT

; 25   : {}

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	56		 push	 rsi
  00016	57		 push	 rdi
  00017	48 81 ec e0 00
	00 00		 sub	 rsp, 224		; 000000e0H
  0001e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D08F34F5_log_msg-inl@h
  0002a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 17   :     : logger_name(a_logger_name)

  0002f	48 8b bd e0 00
	00 00		 mov	 rdi, QWORD PTR this$[rbp]
  00036	48 8b b5 f8 00
	00 00		 mov	 rsi, QWORD PTR a_logger_name$[rbp]
  0003d	b9 10 00 00 00	 mov	 ecx, 16
  00042	f3 a4		 rep movsb

; 18   :     , level(lvl)

  00044	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	8b 8d 00 01 00
	00		 mov	 ecx, DWORD PTR lvl$[rbp]
  00051	89 48 10	 mov	 DWORD PTR [rax+16], ecx

; 19   :     , time(log_time)

  00054	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR log_time$[rbp]
  00062	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 20   : #ifndef SPDLOG_NO_THREAD_ID
; 21   :     , thread_id(os::thread_id())

  00066	e8 00 00 00 00	 call	 ?thread_id@os@details@spdlog@@YA_KXZ ; spdlog::details::os::thread_id
  0006b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00072	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\details\log_msg.h

; 26   :     mutable size_t color_range_start{0};

  00076	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007d	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0

; 27   :     mutable size_t color_range_end{0};

  00085	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 c7 40 30 00
	00 00 00	 mov	 QWORD PTR [rax+48], 0
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\details\log_msg-inl.h

; 23   :     , source(loc)

  00094	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009b	48 8d 78 38	 lea	 rdi, QWORD PTR [rax+56]
  0009f	48 8b b5 f0 00
	00 00		 mov	 rsi, QWORD PTR loc$[rbp]
  000a6	b9 18 00 00 00	 mov	 ecx, 24
  000ab	f3 a4		 rep movsb

; 24   :     , payload(msg)

  000ad	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b4	48 8d 78 50	 lea	 rdi, QWORD PTR [rax+80]
  000b8	48 8b b5 08 01
	00 00		 mov	 rsi, QWORD PTR msg$[rbp]
  000bf	b9 10 00 00 00	 mov	 ecx, 16
  000c4	f3 a4		 rep movsb

; 25   : {}

  000c6	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000cd	48 8d a5 c0 00
	00 00		 lea	 rsp, QWORD PTR [rbp+192]
  000d4	5f		 pop	 rdi
  000d5	5e		 pop	 rsi
  000d6	5d		 pop	 rbp
  000d7	c3		 ret	 0
??0log_msg@details@spdlog@@QEAA@V?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@Usource_loc@2@V?$basic_string_view@D@v8@fmt@@W4level_enum@level@2@2@Z ENDP ; spdlog::details::log_msg::log_msg
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\memory
;	COMDAT ?get@?$_Ptr_base@Vlogger@spdlog@@@std@@IEBAPEAVlogger@spdlog@@XZ
_TEXT	SEGMENT
this$ = 224
?get@?$_Ptr_base@Vlogger@spdlog@@@std@@IEBAPEAVlogger@spdlog@@XZ PROC ; std::_Ptr_base<spdlog::logger>::get, COMDAT

; 1270 :     _NODISCARD element_type* get() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F82802EA_memory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1271 :         return _Ptr;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 1272 :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?get@?$_Ptr_base@Vlogger@spdlog@@@std@@IEBAPEAVlogger@spdlog@@XZ ENDP ; std::_Ptr_base<spdlog::logger>::get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\mutex
;	COMDAT ??1?$lock_guard@Vmutex@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$lock_guard@Vmutex@std@@@std@@QEAA@XZ PROC		; std::lock_guard<std::mutex>::~lock_guard<std::mutex>, COMDAT

; 443  :     ~lock_guard() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__13784D50_mutex
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 444  :         _MyMutex.unlock();

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00029	e8 00 00 00 00	 call	 ?unlock@_Mutex_base@std@@QEAAXXZ ; std::_Mutex_base::unlock
  0002e	90		 npad	 1

; 445  :     }

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??1?$lock_guard@Vmutex@std@@@std@@QEAA@XZ ENDP		; std::lock_guard<std::mutex>::~lock_guard<std::mutex>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\mutex
;	COMDAT ??0?$lock_guard@Vmutex@std@@@std@@QEAA@AEAVmutex@1@@Z
_TEXT	SEGMENT
this$ = 224
_Mtx$ = 232
??0?$lock_guard@Vmutex@std@@@std@@QEAA@AEAVmutex@1@@Z PROC ; std::lock_guard<std::mutex>::lock_guard<std::mutex>, COMDAT

; 437  :     explicit lock_guard(_Mutex& _Mtx) : _MyMutex(_Mtx) { // construct and lock

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__13784D50_mutex
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Mtx$[rbp]
  00032	48 89 08	 mov	 QWORD PTR [rax], rcx

; 438  :         _MyMutex.lock();

  00035	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0003f	e8 00 00 00 00	 call	 ?lock@_Mutex_base@std@@QEAAXXZ ; std::_Mutex_base::lock

; 439  :     }

  00044	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00052	5f		 pop	 rdi
  00053	5d		 pop	 rbp
  00054	c3		 ret	 0
??0?$lock_guard@Vmutex@std@@@std@@QEAA@AEAVmutex@1@@Z ENDP ; std::lock_guard<std::mutex>::lock_guard<std::mutex>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\mutex
;	COMDAT ?_Mymtx@_Mutex_base@std@@AEAAPEAU_Mtx_internal_imp_t@@XZ
_TEXT	SEGMENT
this$ = 224
?_Mymtx@_Mutex_base@std@@AEAAPEAU_Mtx_internal_imp_t@@XZ PROC ; std::_Mutex_base::_Mymtx, COMDAT

; 82   :     _Mtx_t _Mymtx() noexcept { // get pointer to _Mtx_internal_imp_t inside _Mtx_storage

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__13784D50_mutex
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 83   :         return reinterpret_cast<_Mtx_t>(&_Mtx_storage);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 84   :     }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
?_Mymtx@_Mutex_base@std@@AEAAPEAU_Mtx_internal_imp_t@@XZ ENDP ; std::_Mutex_base::_Mymtx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\mutex
;	COMDAT ?unlock@_Mutex_base@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?unlock@_Mutex_base@std@@QEAAXXZ PROC			; std::_Mutex_base::unlock, COMDAT

; 66   :     void unlock() {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__13784D50_mutex
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 67   :         _Mtx_unlock(_Mymtx());

  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?_Mymtx@_Mutex_base@std@@AEAAPEAU_Mtx_internal_imp_t@@XZ ; std::_Mutex_base::_Mymtx
  0002b	48 8b c8	 mov	 rcx, rax
  0002e	e8 00 00 00 00	 call	 _Mtx_unlock

; 68   :     }

  00033	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003a	5f		 pop	 rdi
  0003b	5d		 pop	 rbp
  0003c	c3		 ret	 0
?unlock@_Mutex_base@std@@QEAAXXZ ENDP			; std::_Mutex_base::unlock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\mutex
;	COMDAT ?lock@_Mutex_base@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?lock@_Mutex_base@std@@QEAAXXZ PROC			; std::_Mutex_base::lock, COMDAT

; 50   :     void lock() {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__13784D50_mutex
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 51   :         _Check_C_return(_Mtx_lock(_Mymtx()));

  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?_Mymtx@_Mutex_base@std@@AEAAPEAU_Mtx_internal_imp_t@@XZ ; std::_Mutex_base::_Mymtx
  0002b	48 8b c8	 mov	 rcx, rax
  0002e	e8 00 00 00 00	 call	 _Mtx_lock
  00033	8b c8		 mov	 ecx, eax
  00035	e8 00 00 00 00	 call	 ?_Check_C_return@std@@YAHH@Z ; std::_Check_C_return

; 52   :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?lock@_Mutex_base@std@@QEAAXXZ ENDP			; std::_Mutex_base::lock
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\fmt\bundled\format.h
;	COMDAT ?resize@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAAX_K@Z
_TEXT	SEGMENT
this$ = 224
count$ = 232
?resize@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAAX_K@Z PROC ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::resize, COMDAT

; 698  :   void resize(size_t count) { this->try_resize(count); }

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ACE4895D_format@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR count$[rbp]
  0002b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00032	e8 00 00 00 00	 call	 ?try_resize@?$buffer@D@detail@v8@fmt@@QEAAX_K@Z ; fmt::v8::detail::buffer<char>::try_resize
  00037	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003e	5f		 pop	 rdi
  0003f	5d		 pop	 rbp
  00040	c3		 ret	 0
?resize@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAAX_K@Z ENDP ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\fmt\bundled\format.h
;	COMDAT ??4?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAAAEAV012@$$QEAV012@@Z
_TEXT	SEGMENT
this$ = 224
other$ = 232
??4?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAAAEAV012@$$QEAV012@@Z PROC ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::operator=, COMDAT

; 684  :       -> basic_memory_buffer& {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ACE4895D_format@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 685  :     FMT_ASSERT(this != &other, "");

  00024	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR other$[rbp]
  0002b	48 39 85 e0 00
	00 00		 cmp	 QWORD PTR this$[rbp], rax
  00032	74 02		 je	 SHORT $LN3@operator
  00034	eb 18		 jmp	 SHORT $LN4@operator
$LN3@operator:
  00036	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@@
  0003d	ba ad 02 00 00	 mov	 edx, 685		; 000002adH
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FK@ILDHDHAM@C?3?2Users?2DANIL?2source?2repos?2Mot@
  00049	e8 00 00 00 00	 call	 ?assert_fail@detail@v8@fmt@@YAXPEBDH0@Z ; fmt::v8::detail::assert_fail
$LN4@operator:

; 686  :     deallocate();

  0004e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	e8 00 00 00 00	 call	 ?deallocate@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@AEAAXXZ ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::deallocate

; 687  :     move(other);

  0005a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR other$[rbp]
  00061	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00068	e8 00 00 00 00	 call	 ?move@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@AEAAXAEAV123@@Z ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::move

; 688  :     return *this;

  0006d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 689  :   }

  00074	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0007b	5f		 pop	 rdi
  0007c	5d		 pop	 rbp
  0007d	c3		 ret	 0
??4?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAAAEAV012@$$QEAV012@@Z ENDP ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\fmt\bundled\format.h
;	COMDAT ?move@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@AEAAXAEAV123@@Z
_TEXT	SEGMENT
data$ = 8
size$ = 40
capacity$ = 72
$T1 = 296
$T2 = 344
$T3 = 400
this$ = 480
other$ = 488
?move@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@AEAAXAEAV123@@Z PROC ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::move, COMDAT

; 652  :   void move(basic_memory_buffer& other) {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	56		 push	 rsi
  0000c	57		 push	 rdi
  0000d	48 81 ec e0 01
	00 00		 sub	 rsp, 480		; 000001e0H
  00014	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ACE4895D_format@h
  00020	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 653  :     alloc_ = std::move(other.alloc_);

  00025	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR other$[rbp]
  0002c	48 05 1a 01 00
	00		 add	 rax, 282		; 0000011aH
  00032	48 8b c8	 mov	 rcx, rax
  00035	e8 00 00 00 00	 call	 ??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z ; std::move<std::allocator<char> &>

; 654  :     T* data = other.data();

  0003a	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR other$[rbp]
  00041	e8 00 00 00 00	 call	 ?data@?$buffer@D@detail@v8@fmt@@QEAAPEADXZ ; fmt::v8::detail::buffer<char>::data
  00046	48 89 45 08	 mov	 QWORD PTR data$[rbp], rax

; 655  :     size_t size = other.size(), capacity = other.capacity();

  0004a	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR other$[rbp]
  00051	e8 00 00 00 00	 call	 ?size@?$buffer@D@detail@v8@fmt@@QEBA_KXZ ; fmt::v8::detail::buffer<char>::size
  00056	48 89 45 28	 mov	 QWORD PTR size$[rbp], rax
  0005a	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR other$[rbp]
  00061	e8 00 00 00 00	 call	 ?capacity@?$buffer@D@detail@v8@fmt@@QEBA_KXZ ; fmt::v8::detail::buffer<char>::capacity
  00066	48 89 45 48	 mov	 QWORD PTR capacity$[rbp], rax

; 656  :     if (data == other.store_) {

  0006a	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR other$[rbp]
  00071	48 83 c0 20	 add	 rax, 32			; 00000020H
  00075	48 39 45 08	 cmp	 QWORD PTR data$[rbp], rax
  00079	0f 85 86 00 00
	00		 jne	 $LN2@move

; 657  :       this->set(store_, capacity);

  0007f	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00086	48 83 c0 20	 add	 rax, 32			; 00000020H
  0008a	4c 8b 45 48	 mov	 r8, QWORD PTR capacity$[rbp]
  0008e	48 8b d0	 mov	 rdx, rax
  00091	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00098	e8 00 00 00 00	 call	 ?set@?$buffer@D@detail@v8@fmt@@IEAAXPEAD_K@Z ; fmt::v8::detail::buffer<char>::set

; 658  :       std::uninitialized_copy(other.store_, other.store_ + size,

  0009d	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a4	48 83 c0 20	 add	 rax, 32			; 00000020H
  000a8	4c 8b 45 48	 mov	 r8, QWORD PTR capacity$[rbp]
  000ac	48 8b d0	 mov	 rdx, rax
  000af	48 8d 8d 28 01
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  000b6	e8 00 00 00 00	 call	 ??$make_checked@D@detail@v8@fmt@@YA?AV?$checked_array_iterator@PEAD@stdext@@PEAD_K@Z ; fmt::v8::detail::make_checked<char>
  000bb	48 8d 8d 90 01
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  000c2	48 8b f9	 mov	 rdi, rcx
  000c5	48 8b f0	 mov	 rsi, rax
  000c8	b9 18 00 00 00	 mov	 ecx, 24
  000cd	f3 a4		 rep movsb
  000cf	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR other$[rbp]
  000d6	48 8b 4d 28	 mov	 rcx, QWORD PTR size$[rbp]
  000da	48 8d 44 08 20	 lea	 rax, QWORD PTR [rax+rcx+32]
  000df	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR other$[rbp]
  000e6	48 83 c1 20	 add	 rcx, 32			; 00000020H
  000ea	4c 8d 8d 90 01
	00 00		 lea	 r9, QWORD PTR $T3[rbp]
  000f1	4c 8b c0	 mov	 r8, rax
  000f4	48 8b d1	 mov	 rdx, rcx
  000f7	48 8d 8d 58 01
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  000fe	e8 00 00 00 00	 call	 ??$uninitialized_copy@PEADV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEAD0V12@@Z ; std::uninitialized_copy<char *,stdext::checked_array_iterator<char *> >

; 659  :                               detail::make_checked(store_, capacity));
; 660  :     } else {

  00103	eb 31		 jmp	 SHORT $LN3@move
$LN2@move:

; 661  :       this->set(data, capacity);

  00105	4c 8b 45 48	 mov	 r8, QWORD PTR capacity$[rbp]
  00109	48 8b 55 08	 mov	 rdx, QWORD PTR data$[rbp]
  0010d	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00114	e8 00 00 00 00	 call	 ?set@?$buffer@D@detail@v8@fmt@@IEAAXPEAD_K@Z ; fmt::v8::detail::buffer<char>::set

; 662  :       // Set pointer to the inline array so that delete is not called
; 663  :       // when deallocating.
; 664  :       other.set(other.store_, 0);

  00119	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR other$[rbp]
  00120	48 83 c0 20	 add	 rax, 32			; 00000020H
  00124	45 33 c0	 xor	 r8d, r8d
  00127	48 8b d0	 mov	 rdx, rax
  0012a	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR other$[rbp]
  00131	e8 00 00 00 00	 call	 ?set@?$buffer@D@detail@v8@fmt@@IEAAXPEAD_K@Z ; fmt::v8::detail::buffer<char>::set
$LN3@move:

; 665  :     }
; 666  :     this->resize(size);

  00136	48 8b 55 28	 mov	 rdx, QWORD PTR size$[rbp]
  0013a	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00141	e8 00 00 00 00	 call	 ?resize@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAAX_K@Z ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::resize

; 667  :   }

  00146	48 8d a5 c0 01
	00 00		 lea	 rsp, QWORD PTR [rbp+448]
  0014d	5f		 pop	 rdi
  0014e	5e		 pop	 rsi
  0014f	5d		 pop	 rbp
  00150	c3		 ret	 0
?move@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@AEAAXAEAV123@@Z ENDP ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::move
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\fmt\bundled\format.h
;	COMDAT ??1?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAA@XZ PROC ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::~basic_memory_buffer<char,250,std::allocator<char> >, COMDAT

; 648  :   ~basic_memory_buffer() { deallocate(); }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ACE4895D_format@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@6B@
  0002d	48 89 08	 mov	 QWORD PTR [rax], rcx
  00030	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00037	e8 00 00 00 00	 call	 ?deallocate@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@AEAAXXZ ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::deallocate
  0003c	90		 npad	 1
  0003d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00044	5f		 pop	 rdi
  00045	5d		 pop	 rbp
  00046	c3		 ret	 0
??1?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAA@XZ ENDP ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::~basic_memory_buffer<char,250,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\fmt\bundled\format.h
;	COMDAT ??0?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAA@AEBV?$allocator@D@std@@@Z
_TEXT	SEGMENT
this$ = 224
alloc$ = 232
??0?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAA@AEBV?$allocator@D@std@@@Z PROC ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::basic_memory_buffer<char,250,std::allocator<char> >, COMDAT

; 644  :   explicit basic_memory_buffer(const Allocator& alloc = Allocator())

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ACE4895D_format@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 645  :       : alloc_(alloc) {

  00024	45 33 c9	 xor	 r9d, r9d
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	33 d2		 xor	 edx, edx
  0002c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00033	e8 00 00 00 00	 call	 ??0?$buffer@D@detail@v8@fmt@@IEAA@PEAD_K1@Z ; fmt::v8::detail::buffer<char>::buffer<char>
  00038	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@6B@
  00046	48 89 08	 mov	 QWORD PTR [rax], rcx

; 646  :     this->set(store_, SIZE);

  00049	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00050	48 83 c0 20	 add	 rax, 32			; 00000020H
  00054	41 b8 fa 00 00
	00		 mov	 r8d, 250		; 000000faH
  0005a	48 8b d0	 mov	 rdx, rax
  0005d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00064	e8 00 00 00 00	 call	 ?set@?$buffer@D@detail@v8@fmt@@IEAAXPEAD_K@Z ; fmt::v8::detail::buffer<char>::set

; 647  :   }

  00069	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00070	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00077	5f		 pop	 rdi
  00078	5d		 pop	 rbp
  00079	c3		 ret	 0
??0?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@QEAA@AEBV?$allocator@D@std@@@Z ENDP ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::basic_memory_buffer<char,250,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\fmt\bundled\format.h
;	COMDAT ?grow@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@MEAAX_K@Z
_TEXT	SEGMENT
max_size$ = 8
old_capacity$ = 40
new_capacity$ = 72
old_data$ = 104
new_data$ = 136
$T1 = 360
$T2 = 408
$T3 = 456
$T4 = 512
tv156 = 552
tv141 = 552
tv78 = 552
this$ = 592
size$ = 600
?grow@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@MEAAX_K@Z PROC ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::grow, COMDAT

; 712  : void basic_memory_buffer<T, SIZE, Allocator>::grow(size_t size) {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	56		 push	 rsi
  0000c	57		 push	 rdi
  0000d	48 81 ec 50 02
	00 00		 sub	 rsp, 592		; 00000250H
  00014	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ACE4895D_format@h
  00020	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 713  : #ifdef FMT_FUZZ
; 714  :   if (size > 5000) throw std::runtime_error("fuzz mode - won't grow that much");
; 715  : #endif
; 716  :   const size_t max_size = std::allocator_traits<Allocator>::max_size(alloc_);

  00025	48 8b 85 50 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002c	48 05 1a 01 00
	00		 add	 rax, 282		; 0000011aH
  00032	48 8b c8	 mov	 rcx, rax
  00035	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
  0003a	48 89 45 08	 mov	 QWORD PTR max_size$[rbp], rax

; 717  :   size_t old_capacity = this->capacity();

  0003e	48 8b 8d 50 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00045	e8 00 00 00 00	 call	 ?capacity@?$buffer@D@detail@v8@fmt@@QEBA_KXZ ; fmt::v8::detail::buffer<char>::capacity
  0004a	48 89 45 28	 mov	 QWORD PTR old_capacity$[rbp], rax

; 718  :   size_t new_capacity = old_capacity + old_capacity / 2;

  0004e	33 d2		 xor	 edx, edx
  00050	48 8b 45 28	 mov	 rax, QWORD PTR old_capacity$[rbp]
  00054	b9 02 00 00 00	 mov	 ecx, 2
  00059	48 f7 f1	 div	 rcx
  0005c	48 8b 4d 28	 mov	 rcx, QWORD PTR old_capacity$[rbp]
  00060	48 03 c8	 add	 rcx, rax
  00063	48 8b c1	 mov	 rax, rcx
  00066	48 89 45 48	 mov	 QWORD PTR new_capacity$[rbp], rax

; 719  :   if (size > new_capacity)

  0006a	48 8b 45 48	 mov	 rax, QWORD PTR new_capacity$[rbp]
  0006e	48 39 85 58 02
	00 00		 cmp	 QWORD PTR size$[rbp], rax
  00075	76 0d		 jbe	 SHORT $LN2@grow

; 720  :     new_capacity = size;

  00077	48 8b 85 58 02
	00 00		 mov	 rax, QWORD PTR size$[rbp]
  0007e	48 89 45 48	 mov	 QWORD PTR new_capacity$[rbp], rax
  00082	eb 3d		 jmp	 SHORT $LN3@grow
$LN2@grow:

; 721  :   else if (new_capacity > max_size)

  00084	48 8b 45 08	 mov	 rax, QWORD PTR max_size$[rbp]
  00088	48 39 45 48	 cmp	 QWORD PTR new_capacity$[rbp], rax
  0008c	76 33		 jbe	 SHORT $LN4@grow

; 722  :     new_capacity = size > max_size ? size : max_size;

  0008e	48 8b 45 08	 mov	 rax, QWORD PTR max_size$[rbp]
  00092	48 39 85 58 02
	00 00		 cmp	 QWORD PTR size$[rbp], rax
  00099	76 10		 jbe	 SHORT $LN7@grow
  0009b	48 8b 85 58 02
	00 00		 mov	 rax, QWORD PTR size$[rbp]
  000a2	48 89 85 28 02
	00 00		 mov	 QWORD PTR tv78[rbp], rax
  000a9	eb 0b		 jmp	 SHORT $LN8@grow
$LN7@grow:
  000ab	48 8b 45 08	 mov	 rax, QWORD PTR max_size$[rbp]
  000af	48 89 85 28 02
	00 00		 mov	 QWORD PTR tv78[rbp], rax
$LN8@grow:
  000b6	48 8b 85 28 02
	00 00		 mov	 rax, QWORD PTR tv78[rbp]
  000bd	48 89 45 48	 mov	 QWORD PTR new_capacity$[rbp], rax
$LN4@grow:
$LN3@grow:

; 723  :   T* old_data = this->data();

  000c1	48 8b 8d 50 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c8	e8 00 00 00 00	 call	 ?data@?$buffer@D@detail@v8@fmt@@QEAAPEADXZ ; fmt::v8::detail::buffer<char>::data
  000cd	48 89 45 68	 mov	 QWORD PTR old_data$[rbp], rax

; 724  :   T* new_data =

  000d1	48 8b 85 50 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000d8	48 05 1a 01 00
	00		 add	 rax, 282		; 0000011aH
  000de	48 8b 55 48	 mov	 rdx, QWORD PTR new_capacity$[rbp]
  000e2	48 8b c8	 mov	 rcx, rax
  000e5	e8 00 00 00 00	 call	 ?allocate@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAPEADAEAV?$allocator@D@2@_K@Z ; std::_Default_allocator_traits<std::allocator<char> >::allocate
  000ea	48 89 85 88 00
	00 00		 mov	 QWORD PTR new_data$[rbp], rax

; 725  :       std::allocator_traits<Allocator>::allocate(alloc_, new_capacity);
; 726  :   // The following code doesn't throw, so the raw pointer above doesn't leak.
; 727  :   std::uninitialized_copy(old_data, old_data + this->size(),

  000f1	4c 8b 45 48	 mov	 r8, QWORD PTR new_capacity$[rbp]
  000f5	48 8b 95 88 00
	00 00		 mov	 rdx, QWORD PTR new_data$[rbp]
  000fc	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00103	e8 00 00 00 00	 call	 ??$make_checked@D@detail@v8@fmt@@YA?AV?$checked_array_iterator@PEAD@stdext@@PEAD_K@Z ; fmt::v8::detail::make_checked<char>
  00108	48 8d 8d c8 01
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  0010f	48 8b f9	 mov	 rdi, rcx
  00112	48 8b f0	 mov	 rsi, rax
  00115	b9 18 00 00 00	 mov	 ecx, 24
  0011a	f3 a4		 rep movsb
  0011c	48 8b 8d 50 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00123	e8 00 00 00 00	 call	 ?size@?$buffer@D@detail@v8@fmt@@QEBA_KXZ ; fmt::v8::detail::buffer<char>::size
  00128	48 8b 4d 68	 mov	 rcx, QWORD PTR old_data$[rbp]
  0012c	48 03 c8	 add	 rcx, rax
  0012f	48 8b c1	 mov	 rax, rcx
  00132	48 89 85 28 02
	00 00		 mov	 QWORD PTR tv141[rbp], rax
  00139	48 8d 85 00 02
	00 00		 lea	 rax, QWORD PTR $T4[rbp]
  00140	48 8d 8d c8 01
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  00147	48 8b f8	 mov	 rdi, rax
  0014a	48 8b f1	 mov	 rsi, rcx
  0014d	b9 18 00 00 00	 mov	 ecx, 24
  00152	f3 a4		 rep movsb
  00154	4c 8d 8d 00 02
	00 00		 lea	 r9, QWORD PTR $T4[rbp]
  0015b	4c 8b 85 28 02
	00 00		 mov	 r8, QWORD PTR tv141[rbp]
  00162	48 8b 55 68	 mov	 rdx, QWORD PTR old_data$[rbp]
  00166	48 8d 8d 98 01
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  0016d	e8 00 00 00 00	 call	 ??$uninitialized_copy@PEADV?$checked_array_iterator@PEAD@stdext@@@std@@YA?AV?$checked_array_iterator@PEAD@stdext@@QEAD0V12@@Z ; std::uninitialized_copy<char *,stdext::checked_array_iterator<char *> >

; 728  :                           detail::make_checked(new_data, new_capacity));
; 729  :   this->set(new_data, new_capacity);

  00172	4c 8b 45 48	 mov	 r8, QWORD PTR new_capacity$[rbp]
  00176	48 8b 95 88 00
	00 00		 mov	 rdx, QWORD PTR new_data$[rbp]
  0017d	48 8b 8d 50 02
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00184	e8 00 00 00 00	 call	 ?set@?$buffer@D@detail@v8@fmt@@IEAAXPEAD_K@Z ; fmt::v8::detail::buffer<char>::set

; 730  :   // deallocate must not throw according to the standard, but even if it does,
; 731  :   // the buffer already uses the new storage and will deallocate it in
; 732  :   // destructor.
; 733  :   if (old_data != store_) alloc_.deallocate(old_data, old_capacity);

  00189	48 8b 85 50 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00190	48 83 c0 20	 add	 rax, 32			; 00000020H
  00194	48 39 45 68	 cmp	 QWORD PTR old_data$[rbp], rax
  00198	74 28		 je	 SHORT $LN5@grow
  0019a	48 8b 85 50 02
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001a1	48 05 1a 01 00
	00		 add	 rax, 282		; 0000011aH
  001a7	48 89 85 28 02
	00 00		 mov	 QWORD PTR tv156[rbp], rax
  001ae	4c 8b 45 28	 mov	 r8, QWORD PTR old_capacity$[rbp]
  001b2	48 8b 55 68	 mov	 rdx, QWORD PTR old_data$[rbp]
  001b6	48 8b 8d 28 02
	00 00		 mov	 rcx, QWORD PTR tv156[rbp]
  001bd	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate
$LN5@grow:

; 734  : }

  001c2	48 8d a5 30 02
	00 00		 lea	 rsp, QWORD PTR [rbp+560]
  001c9	5f		 pop	 rdi
  001ca	5e		 pop	 rsi
  001cb	5d		 pop	 rbp
  001cc	c3		 ret	 0
?grow@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@MEAAX_K@Z ENDP ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::grow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\fmt\bundled\format.h
;	COMDAT ?deallocate@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@AEAAXXZ
_TEXT	SEGMENT
data$ = 8
tv83 = 216
this$ = 256
?deallocate@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@AEAAXXZ PROC ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::deallocate, COMDAT

; 632  :   void deallocate() {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ACE4895D_format@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 633  :     T* data = this->data();

  0001f	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?data@?$buffer@D@detail@v8@fmt@@QEAAPEADXZ ; fmt::v8::detail::buffer<char>::data
  0002b	48 89 45 08	 mov	 QWORD PTR data$[rbp], rax

; 634  :     if (data != store_) alloc_.deallocate(data, this->capacity());

  0002f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 83 c0 20	 add	 rax, 32			; 00000020H
  0003a	48 39 45 08	 cmp	 QWORD PTR data$[rbp], rax
  0003e	74 33		 je	 SHORT $LN2@deallocate
  00040	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00047	48 05 1a 01 00
	00		 add	 rax, 282		; 0000011aH
  0004d	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv83[rbp], rax
  00054	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005b	e8 00 00 00 00	 call	 ?capacity@?$buffer@D@detail@v8@fmt@@QEBA_KXZ ; fmt::v8::detail::buffer<char>::capacity
  00060	4c 8b c0	 mov	 r8, rax
  00063	48 8b 55 08	 mov	 rdx, QWORD PTR data$[rbp]
  00067	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv83[rbp]
  0006e	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate
$LN2@deallocate:

; 635  :   }

  00073	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007a	5f		 pop	 rdi
  0007b	5d		 pop	 rbp
  0007c	c3		 ret	 0
?deallocate@?$basic_memory_buffer@D$0PK@V?$allocator@D@std@@@v8@fmt@@AEAAXXZ ENDP ; fmt::v8::basic_memory_buffer<char,250,std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\common.h
;	COMDAT ??0source_loc@spdlog@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0source_loc@spdlog@@QEAA@XZ PROC			; spdlog::source_loc::source_loc, COMDAT

; 292  :     SPDLOG_CONSTEXPR source_loc() = default;

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__085EDADA_common@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 293  :     SPDLOG_CONSTEXPR source_loc(const char *filename_in, int line_in, const char *funcname_in)
; 294  :         : filename{filename_in}
; 295  :         , line{line_in}
; 296  :         , funcname{funcname_in}
; 297  :     {}
; 298  : 
; 299  :     SPDLOG_CONSTEXPR bool empty() const SPDLOG_NOEXCEPT
; 300  :     {
; 301  :         return line == 0;
; 302  :     }
; 303  :     const char *filename{nullptr};

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 304  :     int line{0};

  0002d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00034	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [rax+8], 0

; 305  :     const char *funcname{nullptr};

  0003b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00042	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 292  :     SPDLOG_CONSTEXPR source_loc() = default;

  0004a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00051	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00058	5f		 pop	 rdi
  00059	5d		 pop	 rbp
  0005a	c3		 ret	 0
??0source_loc@spdlog@@QEAA@XZ ENDP			; spdlog::source_loc::source_loc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xutility
;	COMDAT ??$_Adl_verify_range@PEADPEAD@std@@YAXAEBQEAD0@Z
_TEXT	SEGMENT
_First$ = 224
_Last$ = 232
??$_Adl_verify_range@PEADPEAD@std@@YAXAEBQEAD0@Z PROC	; std::_Adl_verify_range<char *,char *>, COMDAT

; 1307 : constexpr void _Adl_verify_range(const _Iter& _First, const _Sentinel& _Last) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7CE971A6_xutility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1308 :     // check that [_First, _Last) forms an iterator range
; 1309 :     if constexpr (_Range_verifiable_v<_Iter, _Sentinel>) {
; 1310 :         _Verify_range(_First, _Last);

  00024	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Last$[rbp]
  0002b	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _First$[rbp]
  00035	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00038	e8 00 00 00 00	 call	 ??$_Verify_range@D@std@@YAXQEBD0@Z ; std::_Verify_range<char>

; 1311 :     }
; 1312 : }

  0003d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00044	5f		 pop	 rdi
  00045	5d		 pop	 rbp
  00046	c3		 ret	 0
??$_Adl_verify_range@PEADPEAD@std@@YAXAEBQEAD0@Z ENDP	; std::_Adl_verify_range<char *,char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xlocale
;	COMDAT ??0id@locale@std@@QEAA@_K@Z
_TEXT	SEGMENT
this$ = 224
_Val$ = 232
??0id@locale@std@@QEAA@_K@Z PROC			; std::locale::id::id, COMDAT

; 99   :         __CLR_OR_THIS_CALL id(size_t _Val = 0) : _Id(_Val) {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__76D543F7_xlocale
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Val$[rbp]
  00032	48 89 08	 mov	 QWORD PTR [rax], rcx
  00035	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
??0id@locale@std@@QEAA@_K@Z ENDP			; std::locale::id::id
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\fmt\bundled\core.h
;	COMDAT ?end@?$basic_string_view@D@v8@fmt@@QEBAPEBDXZ
_TEXT	SEGMENT
this$ = 224
?end@?$basic_string_view@D@v8@fmt@@QEBAPEBDXZ PROC	; fmt::v8::basic_string_view<char>::end, COMDAT

; 487  :   constexpr auto end() const -> iterator { return data_ + size_; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__256F9D9D_core@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00029	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00030	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00034	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003b	5f		 pop	 rdi
  0003c	5d		 pop	 rbp
  0003d	c3		 ret	 0
?end@?$basic_string_view@D@v8@fmt@@QEBAPEBDXZ ENDP	; fmt::v8::basic_string_view<char>::end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\fmt\bundled\core.h
;	COMDAT ?begin@?$basic_string_view@D@v8@fmt@@QEBAPEBDXZ
_TEXT	SEGMENT
this$ = 224
?begin@?$basic_string_view@D@v8@fmt@@QEBAPEBDXZ PROC	; fmt::v8::basic_string_view<char>::begin, COMDAT

; 486  :   constexpr auto begin() const -> iterator { return data_; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__256F9D9D_core@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?begin@?$basic_string_view@D@v8@fmt@@QEBAPEBDXZ ENDP	; fmt::v8::basic_string_view<char>::begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\fmt\bundled\core.h
;	COMDAT ?size@?$basic_string_view@D@v8@fmt@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 224
?size@?$basic_string_view@D@v8@fmt@@QEBA_KXZ PROC	; fmt::v8::basic_string_view<char>::size, COMDAT

; 484  :   constexpr auto size() const -> size_t { return size_; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__256F9D9D_core@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0002a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00031	5f		 pop	 rdi
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
?size@?$basic_string_view@D@v8@fmt@@QEBA_KXZ ENDP	; fmt::v8::basic_string_view<char>::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\fmt\bundled\core.h
;	COMDAT ??0?$basic_string_view@D@v8@fmt@@QEAA@PEBD@Z
_TEXT	SEGMENT
tv70 = 192
this$ = 240
s$ = 248
??0?$basic_string_view@D@v8@fmt@@QEAA@PEBD@Z PROC	; fmt::v8::basic_string_view<char>::basic_string_view<char>, COMDAT

; 460  :   basic_string_view(const Char* s) : data_(s) {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__256F9D9D_core@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR s$[rbp]
  00032	48 89 08	 mov	 QWORD PTR [rax], rcx

; 461  :     if (detail::const_check(std::is_same<Char, char>::value &&

  00035	33 c0		 xor	 eax, eax
  00037	83 f8 01	 cmp	 eax, 1
  0003a	74 15		 je	 SHORT $LN5@basic_stri
  0003c	e8 00 00 00 00	 call	 ?is_constant_evaluated@detail@v8@fmt@@YA_NXZ ; fmt::v8::detail::is_constant_evaluated
  00041	0f b6 c0	 movzx	 eax, al
  00044	85 c0		 test	 eax, eax
  00046	75 09		 jne	 SHORT $LN5@basic_stri
  00048	c6 85 c0 00 00
	00 01		 mov	 BYTE PTR tv70[rbp], 1
  0004f	eb 07		 jmp	 SHORT $LN6@basic_stri
$LN5@basic_stri:
  00051	c6 85 c0 00 00
	00 00		 mov	 BYTE PTR tv70[rbp], 0
$LN6@basic_stri:
  00058	0f b6 8d c0 00
	00 00		 movzx	 ecx, BYTE PTR tv70[rbp]
  0005f	e8 00 00 00 00	 call	 ??$const_check@_N@detail@v8@fmt@@YA_N_N@Z ; fmt::v8::detail::const_check<bool>
  00064	0f b6 c0	 movzx	 eax, al
  00067	85 c0		 test	 eax, eax
  00069	74 19		 je	 SHORT $LN2@basic_stri

; 462  :                             !detail::is_constant_evaluated()))
; 463  :       size_ = std::strlen(reinterpret_cast<const char*>(s));

  0006b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR s$[rbp]
  00072	e8 00 00 00 00	 call	 strlen
  00077	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007e	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  00082	eb 17		 jmp	 SHORT $LN3@basic_stri
$LN2@basic_stri:

; 464  :     else
; 465  :       size_ = std::char_traits<Char>::length(s);

  00084	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR s$[rbp]
  0008b	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
  00090	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00097	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
$LN3@basic_stri:

; 466  :   }

  0009b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a2	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  000a9	5f		 pop	 rdi
  000aa	5d		 pop	 rbp
  000ab	c3		 ret	 0
??0?$basic_string_view@D@v8@fmt@@QEAA@PEBD@Z ENDP	; fmt::v8::basic_string_view<char>::basic_string_view<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\fmt\bundled\core.h
;	COMDAT ??0?$basic_string_view@D@v8@fmt@@QEAA@PEBD_K@Z
_TEXT	SEGMENT
this$ = 224
s$ = 232
count$ = 240
??0?$basic_string_view@D@v8@fmt@@QEAA@PEBD_K@Z PROC	; fmt::v8::basic_string_view<char>::basic_string_view<char>, COMDAT

; 450  :         size_(count) {}

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__256F9D9D_core@h
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 449  :       : data_(s),

  00029	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00030	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR s$[rbp]
  00037	48 89 08	 mov	 QWORD PTR [rax], rcx

; 450  :         size_(count) {}

  0003a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00041	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR count$[rbp]
  00048	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  0004c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00053	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005a	5f		 pop	 rdi
  0005b	5d		 pop	 rbp
  0005c	c3		 ret	 0
??0?$basic_string_view@D@v8@fmt@@QEAA@PEBD_K@Z ENDP	; fmt::v8::basic_string_view<char>::basic_string_view<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\fmt\bundled\core.h
;	COMDAT ??$to_unsigned@_J@detail@v8@fmt@@YA_K_J@Z
_TEXT	SEGMENT
value$ = 224
??$to_unsigned@_J@detail@v8@fmt@@YA_K_J@Z PROC		; fmt::v8::detail::to_unsigned<__int64>, COMDAT

; 413  :     typename std::make_unsigned<Int>::type {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__256F9D9D_core@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 414  :   FMT_ASSERT(value >= 0, "negative value");

  0001f	48 83 bd e0 00
	00 00 00	 cmp	 QWORD PTR value$[rbp], 0
  00027	7c 02		 jl	 SHORT $LN3@to_unsigne
  00029	eb 18		 jmp	 SHORT $LN4@to_unsigne
$LN3@to_unsigne:
  0002b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@LKAHFCLP@negative?5value@
  00032	ba 9e 01 00 00	 mov	 edx, 414		; 0000019eH
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FI@IKCGCHNG@C?3?2Users?2DANIL?2source?2repos?2Mot@
  0003e	e8 00 00 00 00	 call	 ?assert_fail@detail@v8@fmt@@YAXPEBDH0@Z ; fmt::v8::detail::assert_fail
$LN4@to_unsigne:

; 415  :   return static_cast<typename std::make_unsigned<Int>::type>(value);

  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR value$[rbp]

; 416  : }

  0004a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
??$to_unsigned@_J@detail@v8@fmt@@YA_K_J@Z ENDP		; fmt::v8::detail::to_unsigned<__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\fmt\bundled\core.h
;	COMDAT ?try_reserve@?$buffer@D@detail@v8@fmt@@QEAAX_K@Z
_TEXT	SEGMENT
tv71 = 192
this$ = 240
new_capacity$ = 248
?try_reserve@?$buffer@D@detail@v8@fmt@@QEAAX_K@Z PROC	; fmt::v8::detail::buffer<char>::try_reserve, COMDAT

; 816  :   void try_reserve(size_t new_capacity) {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__256F9D9D_core@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 817  :     if (new_capacity > capacity_) grow(new_capacity);

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0002f	48 39 85 f8 00
	00 00		 cmp	 QWORD PTR new_capacity$[rbp], rax
  00036	76 28		 jbe	 SHORT $LN2@try_reserv
  00038	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00042	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00045	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv71[rbp], rax
  0004c	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR new_capacity$[rbp]
  00053	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005a	ff 95 c0 00 00
	00		 call	 QWORD PTR tv71[rbp]
$LN2@try_reserv:

; 818  :   }

  00060	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00067	5f		 pop	 rdi
  00068	5d		 pop	 rbp
  00069	c3		 ret	 0
?try_reserve@?$buffer@D@detail@v8@fmt@@QEAAX_K@Z ENDP	; fmt::v8::detail::buffer<char>::try_reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\fmt\bundled\core.h
;	COMDAT ?try_resize@?$buffer@D@detail@v8@fmt@@QEAAX_K@Z
_TEXT	SEGMENT
tv70 = 192
this$ = 240
count$ = 248
?try_resize@?$buffer@D@detail@v8@fmt@@QEAAX_K@Z PROC	; fmt::v8::detail::buffer<char>::try_resize, COMDAT

; 807  :   void try_resize(size_t count) {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__256F9D9D_core@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 808  :     try_reserve(count);

  00024	48 8b 95 f8 00
	00 00		 mov	 rdx, QWORD PTR count$[rbp]
  0002b	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00032	e8 00 00 00 00	 call	 ?try_reserve@?$buffer@D@detail@v8@fmt@@QEAAX_K@Z ; fmt::v8::detail::buffer<char>::try_reserve

; 809  :     size_ = count <= capacity_ ? count : capacity_;

  00037	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00042	48 39 85 f8 00
	00 00		 cmp	 QWORD PTR count$[rbp], rax
  00049	77 10		 ja	 SHORT $LN3@try_resize
  0004b	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR count$[rbp]
  00052	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv70[rbp], rax
  00059	eb 12		 jmp	 SHORT $LN4@try_resize
$LN3@try_resize:
  0005b	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00062	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00066	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv70[rbp], rax
$LN4@try_resize:
  0006d	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00074	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv70[rbp]
  0007b	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 810  :   }

  0007f	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00086	5f		 pop	 rdi
  00087	5d		 pop	 rbp
  00088	c3		 ret	 0
?try_resize@?$buffer@D@detail@v8@fmt@@QEAAX_K@Z ENDP	; fmt::v8::detail::buffer<char>::try_resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\fmt\bundled\core.h
;	COMDAT ?data@?$buffer@D@detail@v8@fmt@@QEAAPEADXZ
_TEXT	SEGMENT
this$ = 224
?data@?$buffer@D@detail@v8@fmt@@QEAAPEADXZ PROC		; fmt::v8::detail::buffer<char>::data, COMDAT

; 797  :   auto data() FMT_NOEXCEPT -> T* { return ptr_; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__256F9D9D_core@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0002a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00031	5f		 pop	 rdi
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
?data@?$buffer@D@detail@v8@fmt@@QEAAPEADXZ ENDP		; fmt::v8::detail::buffer<char>::data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\fmt\bundled\core.h
;	COMDAT ?capacity@?$buffer@D@detail@v8@fmt@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 224
?capacity@?$buffer@D@detail@v8@fmt@@QEBA_KXZ PROC	; fmt::v8::detail::buffer<char>::capacity, COMDAT

; 794  :   auto capacity() const FMT_NOEXCEPT -> size_t { return capacity_; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__256F9D9D_core@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0002a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00031	5f		 pop	 rdi
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
?capacity@?$buffer@D@detail@v8@fmt@@QEBA_KXZ ENDP	; fmt::v8::detail::buffer<char>::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\fmt\bundled\core.h
;	COMDAT ?size@?$buffer@D@detail@v8@fmt@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 224
?size@?$buffer@D@detail@v8@fmt@@QEBA_KXZ PROC		; fmt::v8::detail::buffer<char>::size, COMDAT

; 791  :   auto size() const FMT_NOEXCEPT -> size_t { return size_; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__256F9D9D_core@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0002a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00031	5f		 pop	 rdi
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
?size@?$buffer@D@detail@v8@fmt@@QEBA_KXZ ENDP		; fmt::v8::detail::buffer<char>::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\fmt\bundled\core.h
;	COMDAT ?set@?$buffer@D@detail@v8@fmt@@IEAAXPEAD_K@Z
_TEXT	SEGMENT
this$ = 224
buf_data$ = 232
buf_capacity$ = 240
?set@?$buffer@D@detail@v8@fmt@@IEAAXPEAD_K@Z PROC	; fmt::v8::detail::buffer<char>::set, COMDAT

; 769  :   void set(T* buf_data, size_t buf_capacity) FMT_NOEXCEPT {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__256F9D9D_core@h
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 770  :     ptr_ = buf_data;

  00029	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00030	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR buf_data$[rbp]
  00037	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 771  :     capacity_ = buf_capacity;

  0003b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00042	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR buf_capacity$[rbp]
  00049	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 772  :   }

  0004d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00054	5f		 pop	 rdi
  00055	5d		 pop	 rbp
  00056	c3		 ret	 0
?set@?$buffer@D@detail@v8@fmt@@IEAAXPEAD_K@Z ENDP	; fmt::v8::detail::buffer<char>::set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\fmt\bundled\core.h
;	COMDAT ??0?$buffer@D@detail@v8@fmt@@IEAA@PEAD_K1@Z
_TEXT	SEGMENT
this$ = 224
p$ = 232
sz$ = 240
cap$ = 248
??0?$buffer@D@detail@v8@fmt@@IEAA@PEAD_K1@Z PROC	; fmt::v8::detail::buffer<char>::buffer<char>, COMDAT

; 763  :         capacity_(cap) {}

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__256F9D9D_core@h
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0002e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$buffer@D@detail@v8@fmt@@6B@
  0003c	48 89 08	 mov	 QWORD PTR [rax], rcx

; 761  :       : ptr_(p),

  0003f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00046	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  0004d	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 762  :         size_(sz),

  00051	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00058	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR sz$[rbp]
  0005f	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 763  :         capacity_(cap) {}

  00063	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR cap$[rbp]
  00071	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx
  00075	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00083	5f		 pop	 rdi
  00084	5d		 pop	 rbp
  00085	c3		 ret	 0
??0?$buffer@D@detail@v8@fmt@@IEAA@PEAD_K1@Z ENDP	; fmt::v8::detail::buffer<char>::buffer<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\fmt\bundled\format-inl.h
;	COMDAT ?assert_fail@detail@v8@fmt@@YAXPEBDH0@Z
_TEXT	SEGMENT
file$ = 224
line$ = 232
message$ = 240
?assert_fail@detail@v8@fmt@@YAXPEBDH0@Z PROC		; fmt::v8::detail::assert_fail, COMDAT

; 34   : FMT_FUNC void assert_fail(const char* file, int line, const char* message) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00017	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__5B5F2777_format-inl@h
  00023	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 35   :   // Use unchecked std::fprintf to avoid triggering another assertion when
; 36   :   // writing to stderr fails
; 37   :   std::fprintf(stderr, "%s:%d: assertion failed: %s", file, line, message);

  00028	b9 02 00 00 00	 mov	 ecx, 2
  0002d	e8 00 00 00 00	 call	 __acrt_iob_func
  00032	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR message$[rbp]
  00039	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0003e	44 8b 8d e8 00
	00 00		 mov	 r9d, DWORD PTR line$[rbp]
  00045	4c 8b 85 e0 00
	00 00		 mov	 r8, QWORD PTR file$[rbp]
  0004c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@NGPMNKJI@?$CFs?3?$CFd?3?5assertion?5failed?3?5?$CFs@
  00053	48 8b c8	 mov	 rcx, rax
  00056	e8 00 00 00 00	 call	 fprintf

; 38   :   // Chosen instead of std::abort to satisfy Clang in CUDA mode during device
; 39   :   // code pass.
; 40   :   std::terminate();

  0005b	e8 00 00 00 00	 call	 terminate
$LN2@assert_fai:

; 41   : }

  00060	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00067	5f		 pop	 rdi
  00068	5d		 pop	 rbp
  00069	c3		 ret	 0
?assert_fail@detail@v8@fmt@@YAXPEBDH0@Z ENDP		; fmt::v8::detail::assert_fail
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\vendor\spdlog\include\spdlog\fmt\bundled\core.h
;	COMDAT ?is_constant_evaluated@detail@v8@fmt@@YA_NXZ
_TEXT	SEGMENT
?is_constant_evaluated@detail@v8@fmt@@YA_NXZ PROC	; fmt::v8::detail::is_constant_evaluated, COMDAT

; 352  : constexpr FMT_INLINE auto is_constant_evaluated() FMT_NOEXCEPT -> bool {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__256F9D9D_core@h
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 353  : #ifdef __cpp_lib_is_constant_evaluated
; 354  :   return std::is_constant_evaluated();
; 355  : #else
; 356  :   return false;

  0001b	32 c0		 xor	 al, al

; 357  : #endif
; 358  : }

  0001d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?is_constant_evaluated@detail@v8@fmt@@YA_NXZ ENDP	; fmt::v8::detail::is_constant_evaluated
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 224
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT

; 3939 :     _NODISCARD _CONSTEXPR20_CONTAINER size_type size() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A9EB37C6_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 3940 :         return _Mypair._Myval2._Mysize;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]

; 3941 :     }

  0002a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00031	5f		 pop	 rdi
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
this$ = 224
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data, COMDAT

; 3925 :     _NODISCARD _CONSTEXPR20_CONTAINER _Ret_z_ const _Elem* data() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A9EB37C6_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 3926 :         return _Mypair._Myval2._Myptr();

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b c8	 mov	 rcx, rax
  00029	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 3927 :     }

  0002e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00035	5f		 pop	 rdi
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
tv66 = 192
this$ = 240
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT

; 2313 :     _CONSTEXPR20_CONTAINER bool _Large_string_engaged() const noexcept {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A9EB37C6_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2314 : #ifdef __cpp_lib_constexpr_string
; 2315 :         if (_STD is_constant_evaluated()) {
; 2316 :             return true;
; 2317 :         }
; 2318 : #endif // __cpp_lib_constexpr_string
; 2319 :         return _BUF_SIZE <= _Myres;

  0001f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 83 78 20 10	 cmp	 QWORD PTR [rax+32], 16
  0002b	72 0c		 jb	 SHORT $LN3@Large_stri
  0002d	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv66[rbp], 1
  00037	eb 0a		 jmp	 SHORT $LN4@Large_stri
$LN3@Large_stri:
  00039	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv66[rbp], 0
$LN4@Large_stri:
  00043	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv66[rbp]

; 2320 :     }

  0004a	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
_Result$ = 8
this$ = 256
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT

; 2304 :     _CONSTEXPR20_CONTAINER const value_type* _Myptr() const noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A9EB37C6_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2305 :         const value_type* _Result = _Bx._Buf;

  0001f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 83 c0 08	 add	 rax, 8
  0002a	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax

; 2306 :         if (_Large_string_engaged()) {

  0002e	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  0003a	0f b6 c0	 movzx	 eax, al
  0003d	85 c0		 test	 eax, eax
  0003f	74 14		 je	 SHORT $LN2@Myptr

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00041	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004c	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00051	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax
$LN2@Myptr:

; 2308 :         }
; 2309 : 
; 2310 :         return _Result;

  00055	48 8b 45 08	 mov	 rax, QWORD PTR _Result$[rbp]

; 2311 :     }

  00059	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z
_TEXT	SEGMENT
__formal$ = 224
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::max_size, COMDAT

; 727  :     _NODISCARD static _CONSTEXPR20_DYNALLOC size_type max_size(const _Alloc&) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DD38B15A_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 728  :         return static_cast<size_t>(-1) / sizeof(value_type);

  0001f	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1

; 729  :     }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?allocate@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAPEADAEAV?$allocator@D@2@_K@Z
_TEXT	SEGMENT
_Al$ = 224
_Count$ = 232
?allocate@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAPEADAEAV?$allocator@D@2@_K@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::allocate, COMDAT

; 666  :         allocate(_Alloc& _Al, _CRT_GUARDOVERFLOW const size_type _Count) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DD38B15A_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 667  : #ifdef __cpp_lib_constexpr_dynamic_alloc // TRANSITION, GH-1532
; 668  :         if (_STD is_constant_evaluated()) {
; 669  :             return _Al.allocate(_Count);
; 670  :         } else
; 671  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 672  :         {
; 673  :             (void) _Al;
; 674  :             return static_cast<pointer>(

  00024	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0002b	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$00@std@@YA_K_K@Z ; std::_Get_size_of_n<1>
  00030	48 8b c8	 mov	 rcx, rax
  00033	e8 00 00 00 00	 call	 ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 675  :                 _Allocate<_New_alignof<value_type>>(_Get_size_of_n<sizeof(value_type)>(_Count)));
; 676  :         }
; 677  :     }

  00038	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003f	5f		 pop	 rdi
  00040	5d		 pop	 rbp
  00041	c3		 ret	 0
?allocate@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAPEADAEAV?$allocator@D@2@_K@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z
_TEXT	SEGMENT
this$ = 224
_Ptr$ = 232
_Count$ = 240
?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z PROC	; std::allocator<char>::deallocate, COMDAT

; 833  :     _CONSTEXPR20_DYNALLOC void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DD38B15A_xmemory
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 834  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00029	48 8b 95 f0 00
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  00030	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00037	e8 00 00 00 00	 call	 ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 836  :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ENDP	; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$allocator@D@std@@QEAA@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT

; 825  :     constexpr allocator() noexcept {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DD38B15A_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??0?$allocator@D@std@@QEAA@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
_TEXT	SEGMENT
tv68 = 192
tv69 = 200
_First$ = 240
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 396  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A9EB37C6_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 397  :         // find length of null-terminated string
; 398  : #if _HAS_CXX17
; 399  : #ifdef __cpp_char8_t
; 400  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 401  : #if _HAS_U8_INTRINSICS
; 402  :             return __builtin_u8strlen(_First);
; 403  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 404  :             return _Primary_char_traits::length(_First);
; 405  : #endif // _HAS_U8_INTRINSICS
; 406  :         } else
; 407  : #endif // __cpp_char8_t
; 408  :         {
; 409  :             return __builtin_strlen(_First);

  0001f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _First$[rbp]
  00026	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv68[rbp], rax
  0002d	48 c7 85 c8 00
	00 00 ff ff ff
	ff		 mov	 QWORD PTR tv69[rbp], -1
$LL3@length:
  00038	48 ff 85 c8 00
	00 00		 inc	 QWORD PTR tv69[rbp]
  0003f	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv68[rbp]
  00046	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR tv69[rbp]
  0004d	80 3c 08 00	 cmp	 BYTE PTR [rax+rcx], 0
  00051	75 e5		 jne	 SHORT $LL3@length
  00053	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR tv69[rbp]

; 410  :         }
; 411  : #else // _HAS_CXX17
; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));
; 413  : #endif // _HAS_CXX17
; 414  :     }

  0005a	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00061	5f		 pop	 rdi
  00062	5d		 pop	 rbp
  00063	c3		 ret	 0
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
_TEXT	SEGMENT
_Ptr_user$ = 8
_Ptr_container$ = 40
_Min_back_shift$ = 72
_Back_shift$ = 104
_Ptr$ = 352
_Bytes$ = 360
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 153  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

$LN21:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  00013	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DD38B15A_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 154  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 155  :     _Bytes += _Non_user_size;

  00024	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR _Bytes$[rbp]
  0002b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002e	48 83 c0 2f	 add	 rax, 47			; 0000002fH
  00032	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  00039	48 89 01	 mov	 QWORD PTR [rcx], rax

; 156  : 
; 157  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);

  0003c	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  00043	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00046	48 89 45 08	 mov	 QWORD PTR _Ptr_user$[rbp], rax

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0004a	b8 08 00 00 00	 mov	 eax, 8
  0004f	48 6b c0 ff	 imul	 rax, rax, -1
  00053	48 8b 4d 08	 mov	 rcx, QWORD PTR _Ptr_user$[rbp]
  00057	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0005b	48 89 45 28	 mov	 QWORD PTR _Ptr_container$[rbp], rax
$LN4@Adjust_man:

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

  0005f	b8 08 00 00 00	 mov	 eax, 8
  00064	48 6b c0 fe	 imul	 rax, rax, -2
  00068	48 8b 4d 08	 mov	 rcx, QWORD PTR _Ptr_user$[rbp]
  0006c	48 ba fa fa fa
	fa fa fa fa fa	 mov	 rdx, -361700864190383366 ; fafafafafafafafaH
  00076	48 39 14 01	 cmp	 QWORD PTR [rcx+rax], rdx
  0007a	75 02		 jne	 SHORT $LN14@Adjust_man
  0007c	eb 75		 jmp	 SHORT $LN15@Adjust_man
$LN14@Adjust_man:
$LN7@Adjust_man:
  0007e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA
  00084	83 c0 09	 add	 eax, 9
  00087	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
  0008e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0009a	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0009f	45 33 c9	 xor	 r9d, r9d
  000a2	44 8b c0	 mov	 r8d, eax
  000a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GI@KDIDHNIL@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  000ac	b9 02 00 00 00	 mov	 ecx, 2
  000b1	e8 00 00 00 00	 call	 _CrtDbgReport
  000b6	83 f8 01	 cmp	 eax, 1
  000b9	75 03		 jne	 SHORT $LN19@Adjust_man
  000bb	cc		 int	 3
  000bc	33 c0		 xor	 eax, eax
$LN19@Adjust_man:
  000be	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA
  000c4	83 c0 09	 add	 eax, 9
  000c7	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000d0	44 8b c8	 mov	 r9d, eax
  000d3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NA@FOAKNOEL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  000da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  000e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  000e8	e8 00 00 00 00	 call	 _invalid_parameter
  000ed	33 c0		 xor	 eax, eax
  000ef	85 c0		 test	 eax, eax
  000f1	75 8b		 jne	 SHORT $LN7@Adjust_man
$LN15@Adjust_man:
  000f3	33 c0		 xor	 eax, eax
  000f5	85 c0		 test	 eax, eax
  000f7	0f 85 62 ff ff
	ff		 jne	 $LN4@Adjust_man

; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

  000fd	48 c7 45 48 10
	00 00 00	 mov	 QWORD PTR _Min_back_shift$[rbp], 16

; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00105	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  0010c	48 8b 4d 28	 mov	 rcx, QWORD PTR _Ptr_container$[rbp]
  00110	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00113	48 2b c1	 sub	 rax, rcx
  00116	48 89 45 68	 mov	 QWORD PTR _Back_shift$[rbp], rax
$LN10@Adjust_man:

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0011a	48 83 7d 68 10	 cmp	 QWORD PTR _Back_shift$[rbp], 16
  0011f	72 09		 jb	 SHORT $LN16@Adjust_man
  00121	48 83 7d 68 2f	 cmp	 QWORD PTR _Back_shift$[rbp], 47 ; 0000002fH
  00126	77 02		 ja	 SHORT $LN16@Adjust_man
  00128	eb 75		 jmp	 SHORT $LN17@Adjust_man
$LN16@Adjust_man:
$LN13@Adjust_man:
  0012a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA
  00130	83 c0 13	 add	 eax, 19
  00133	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
  0013a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0013f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  00146	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0014b	45 33 c9	 xor	 r9d, r9d
  0014e	44 8b c0	 mov	 r8d, eax
  00151	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GI@KDIDHNIL@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00158	b9 02 00 00 00	 mov	 ecx, 2
  0015d	e8 00 00 00 00	 call	 _CrtDbgReport
  00162	83 f8 01	 cmp	 eax, 1
  00165	75 03		 jne	 SHORT $LN20@Adjust_man
  00167	cc		 int	 3
  00168	33 c0		 xor	 eax, eax
$LN20@Adjust_man:
  0016a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA
  00170	83 c0 13	 add	 eax, 19
  00173	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0017c	44 8b c8	 mov	 r9d, eax
  0017f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NA@FOAKNOEL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00186	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  0018d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  00194	e8 00 00 00 00	 call	 _invalid_parameter
  00199	33 c0		 xor	 eax, eax
  0019b	85 c0		 test	 eax, eax
  0019d	75 8b		 jne	 SHORT $LN13@Adjust_man
$LN17@Adjust_man:
  0019f	33 c0		 xor	 eax, eax
  001a1	85 c0		 test	 eax, eax
  001a3	0f 85 71 ff ff
	ff		 jne	 $LN10@Adjust_man

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001a9	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  001b0	48 8b 4d 28	 mov	 rcx, QWORD PTR _Ptr_container$[rbp]
  001b4	48 89 08	 mov	 QWORD PTR [rax], rcx

; 174  : }

  001b7	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  001be	5f		 pop	 rdi
  001bf	5d		 pop	 rbp
  001c0	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 224
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z PROC ; std::_Default_allocate_traits::_Allocate, COMDAT

; 84   :         void* _Allocate(const size_t _Bytes) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__DD38B15A_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 85   :         return ::operator new(_Bytes);

  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  00026	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new

; 86   :     }

  0002b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ENDP ; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = 200
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__89F7010A_exception
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 321  :     _THROW(bad_array_new_length{});

  0001b	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00022	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QEAA@XZ ; std::bad_array_new_length::bad_array_new_length
  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI3?AVbad_array_new_length@std@@
  0002e	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00035	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@Throw_bad_:

; 322  : }

  0003a	48 8d a5 f8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+248]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gbad_array_new_length@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gbad_array_new_length@std@@UEAAPEAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001e	e8 00 00 00 00	 call	 ??1bad_array_new_length@std@@UEAA@XZ
  00023	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00029	83 e0 01	 and	 eax, 1
  0002c	85 c0		 test	 eax, eax
  0002e	74 11		 je	 SHORT $LN2@scalar
  00030	ba 18 00 00 00	 mov	 edx, 24
  00035	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00041	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
??_Gbad_array_new_length@std@@UEAAPEAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
__that$ = 232
??0bad_array_new_length@std@@QEAA@AEBV01@@Z PROC	; std::bad_array_new_length::bad_array_new_length, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR __that$[rbp]
  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QEAA@AEBV01@@Z
  0002b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
  00039	48 89 08	 mov	 QWORD PTR [rax], rcx
  0003c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00043	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
??0bad_array_new_length@std@@QEAA@AEBV01@@Z ENDP	; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_array_new_length@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1bad_array_new_length@std@@UEAA@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001a	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
??1bad_array_new_length@std@@UEAA@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0bad_array_new_length@std@@QEAA@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT

; 141  :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BDCC0984_vcruntime_exception@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 140  :         : bad_alloc("bad array new length")

  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
  00026	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002d	e8 00 00 00 00	 call	 ??0bad_alloc@std@@AEAA@QEBD@Z ; std::bad_alloc::bad_alloc

; 141  :     {

  00032	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
  00040	48 89 08	 mov	 QWORD PTR [rax], rcx

; 142  :     }

  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
??0bad_array_new_length@std@@QEAA@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gbad_alloc@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gbad_alloc@std@@UEAAPEAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001e	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  00023	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00029	83 e0 01	 and	 eax, 1
  0002c	85 c0		 test	 eax, eax
  0002e	74 11		 je	 SHORT $LN2@scalar
  00030	ba 18 00 00 00	 mov	 edx, 24
  00035	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00041	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
??_Gbad_alloc@std@@UEAAPEAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_alloc@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
__that$ = 232
??0bad_alloc@std@@QEAA@AEBV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR __that$[rbp]
  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@AEBV01@@Z ; std::exception::exception
  0002b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
  00039	48 89 08	 mov	 QWORD PTR [rax], rcx
  0003c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00043	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
??0bad_alloc@std@@QEAA@AEBV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_alloc@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1bad_alloc@std@@UEAA@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001a	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
??1bad_alloc@std@@UEAA@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AEAA@QEBD@Z
_TEXT	SEGMENT
this$ = 224
_Message$ = 232
??0bad_alloc@std@@AEAA@QEBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT

; 130  :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BDCC0984_vcruntime_exception@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 129  :         : exception(_Message, 1)

  00024	41 b8 01 00 00
	00		 mov	 r8d, 1
  0002a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Message$[rbp]
  00031	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00038	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@QEBDH@Z ; std::exception::exception

; 130  :     {

  0003d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
  0004b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 131  :     }

  0004e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00055	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005c	5f		 pop	 rdi
  0005d	5d		 pop	 rbp
  0005e	c3		 ret	 0
??0bad_alloc@std@@AEAA@QEBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001e	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00023	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00029	83 e0 01	 and	 eax, 1
  0002c	85 c0		 test	 eax, eax
  0002e	74 11		 je	 SHORT $LN2@scalar
  00030	ba 18 00 00 00	 mov	 edx, 24
  00035	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00041	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 192
this$ = 240
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 94   :     {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BDCC0984_vcruntime_exception@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  0001f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0002b	74 14		 je	 SHORT $LN3@what
  0002d	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00034	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00038	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
  0003f	eb 0e		 jmp	 SHORT $LN4@what
$LN3@what:
  00041	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
  00048	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
$LN4@what:
  0004f	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv69[rbp]

; 96   :     }

  00056	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0005d	5f		 pop	 rdi
  0005e	5d		 pop	 rbp
  0005f	c3		 ret	 0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 89   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BDCC0984_vcruntime_exception@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  0002d	48 89 08	 mov	 QWORD PTR [rax], rcx

; 90   :         __std_exception_destroy(&_Data);

  00030	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00037	48 83 c0 08	 add	 rax, 8
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	e8 00 00 00 00	 call	 __std_exception_destroy

; 91   :     }

  00043	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
_Other$ = 232
??0exception@std@@QEAA@AEBV01@@Z PROC			; std::exception::exception, COMDAT

; 72   :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BDCC0984_vcruntime_exception@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00032	48 89 08	 mov	 QWORD PTR [rax], rcx

; 71   :         : _Data()

  00035	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 c0 08	 add	 rax, 8
  00040	48 8b f8	 mov	 rdi, rax
  00043	33 c0		 xor	 eax, eax
  00045	b9 10 00 00 00	 mov	 ecx, 16
  0004a	f3 aa		 rep stosb

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0004c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00053	48 83 c0 08	 add	 rax, 8
  00057	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Other$[rbp]
  0005e	48 83 c1 08	 add	 rcx, 8
  00062	48 8b d0	 mov	 rdx, rax
  00065	e8 00 00 00 00	 call	 __std_exception_copy

; 74   :     }

  0006a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00071	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00078	5f		 pop	 rdi
  00079	5d		 pop	 rbp
  0007a	c3		 ret	 0
??0exception@std@@QEAA@AEBV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBDH@Z
_TEXT	SEGMENT
this$ = 224
_Message$ = 232
__formal$ = 240
??0exception@std@@QEAA@QEBDH@Z PROC			; std::exception::exception, COMDAT

; 66   :     {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__BDCC0984_vcruntime_exception@h
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00029	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00030	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00037	48 89 08	 mov	 QWORD PTR [rax], rcx

; 65   :         : _Data()

  0003a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00041	48 83 c0 08	 add	 rax, 8
  00045	48 8b f8	 mov	 rdi, rax
  00048	33 c0		 xor	 eax, eax
  0004a	b9 10 00 00 00	 mov	 ecx, 16
  0004f	f3 aa		 rep stosb

; 67   :         _Data._What = _Message;

  00051	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00058	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Message$[rbp]
  0005f	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 68   :     }

  00063	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00071	5f		 pop	 rdi
  00072	5d		 pop	 rbp
  00073	c3		 ret	 0
??0exception@std@@QEAA@QEBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\chrono
;	COMDAT ??$?0_J$0A@@?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@chrono@std@@QEAA@AEB_J@Z
_TEXT	SEGMENT
this$ = 224
_Val$ = 232
??$?0_J$0A@@?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@chrono@std@@QEAA@AEB_J@Z PROC ; std::chrono::duration<__int64,std::ratio<1,10000000> >::duration<__int64,std::ratio<1,10000000> ><__int64,0>, COMDAT

; 121  :             : _MyRep(static_cast<_Rep>(_Val)) {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__206B08EE_chrono
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Val$[rbp]
  00032	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00035	48 89 08	 mov	 QWORD PTR [rax], rcx
  00038	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00046	5f		 pop	 rdi
  00047	5d		 pop	 rbp
  00048	c3		 ret	 0
??$?0_J$0A@@?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@chrono@std@@QEAA@AEB_J@Z ENDP ; std::chrono::duration<__int64,std::ratio<1,10000000> >::duration<__int64,std::ratio<1,10000000> ><__int64,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\chrono
;	COMDAT ??0?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@QEAA@AEBV?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@12@@Z
_TEXT	SEGMENT
this$ = 224
_Other$ = 232
??0?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@QEAA@AEBV?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@12@@Z PROC ; std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<__int64,std::ratio<1,10000000> > >::time_point<std::chrono::system_clock,std::chrono::duration<__int64,std::ratio<1,10000000> > >, COMDAT

; 226  :         constexpr explicit time_point(const _Duration& _Other) noexcept(is_arithmetic_v<rep>) // strengthened

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__206B08EE_chrono
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 227  :             : _MyDur(_Other) {}

  00024	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Other$[rbp]
  0002b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002e	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	48 89 01	 mov	 QWORD PTR [rcx], rax
  00038	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00046	5f		 pop	 rdi
  00047	5d		 pop	 rbp
  00048	c3		 ret	 0
??0?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@QEAA@AEBV?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@12@@Z ENDP ; std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<__int64,std::ratio<1,10000000> > >::time_point<std::chrono::system_clock,std::chrono::duration<__int64,std::ratio<1,10000000> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\chrono
;	COMDAT ?now@system_clock@chrono@std@@SA?AV?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@23@XZ
_TEXT	SEGMENT
$T1 = 200
$T2 = 232
__$ReturnUdt$ = 288
?now@system_clock@chrono@std@@SA?AV?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@23@XZ PROC ; std::chrono::system_clock::now, COMDAT

; 673  :         _NODISCARD static time_point now() noexcept { // get current time

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__206B08EE_chrono
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 674  :             return time_point(duration(_Xtime_get_ticks()));

  0001f	e8 00 00 00 00	 call	 _Xtime_get_ticks
  00024	48 89 85 e8 00
	00 00		 mov	 QWORD PTR $T2[rbp], rax
  0002b	48 8d 95 e8 00
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  00032	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00039	e8 00 00 00 00	 call	 ??$?0_J$0A@@?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@chrono@std@@QEAA@AEB_J@Z ; std::chrono::duration<__int64,std::ratio<1,10000000> >::duration<__int64,std::ratio<1,10000000> ><__int64,0>
  0003e	48 8b d0	 mov	 rdx, rax
  00041	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00048	e8 00 00 00 00	 call	 ??0?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@chrono@std@@QEAA@AEBV?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@12@@Z ; std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<__int64,std::ratio<1,10000000> > >::time_point<std::chrono::system_clock,std::chrono::duration<__int64,std::ratio<1,10000000> > >
  0004d	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 675  :         }

  00054	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
?now@system_clock@chrono@std@@SA?AV?$time_point@Usystem_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0JIJGIA@@std@@@23@@23@XZ ENDP ; std::chrono::system_clock::now
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT fprintf
_TEXT	SEGMENT
_Result$ = 4
_ArgList$ = 40
_Stream$ = 320
_Format$ = 328
fprintf	PROC						; COMDAT

; 835  :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00027	b9 1a 00 00 00	 mov	 ecx, 26
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd
  00033	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__AD6A91B7_stdio@h
  00042	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);

  00047	48 8d 85 50 01
	00 00		 lea	 rax, QWORD PTR _Format$[rbp+8]
  0004e	48 89 45 28	 mov	 QWORD PTR _ArgList$[rbp], rax

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

  00052	4c 8b 4d 28	 mov	 r9, QWORD PTR _ArgList$[rbp]
  00056	45 33 c0	 xor	 r8d, r8d
  00059	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR _Format$[rbp]
  00060	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Stream$[rbp]
  00067	e8 00 00 00 00	 call	 _vfprintf_l
  0006c	89 45 04	 mov	 DWORD PTR _Result$[rbp], eax

; 840  :         __crt_va_end(_ArgList);

  0006f	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR _ArgList$[rbp], 0

; 841  :         return _Result;

  00077	8b 45 04	 mov	 eax, DWORD PTR _Result$[rbp]

; 842  :     }

  0007a	8b f8		 mov	 edi, eax
  0007c	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00080	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:fprintf$rtcFrameData
  00087	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0008c	8b c7		 mov	 eax, edi
  0008e	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  00095	5f		 pop	 rdi
  00096	5d		 pop	 rbp
  00097	c3		 ret	 0
fprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 224
_Format$ = 232
_Locale$ = 240
_ArgList$ = 248
_vfprintf_l PROC					; COMDAT

; 642  :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__AD6A91B7_stdio@h
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  0002e	e8 00 00 00 00	 call	 __local_stdio_printf_options
  00033	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _ArgList$[rbp]
  0003a	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0003f	4c 8b 8d f0 00
	00 00		 mov	 r9, QWORD PTR _Locale$[rbp]
  00046	4c 8b 85 e8 00
	00 00		 mov	 r8, QWORD PTR _Format$[rbp]
  0004d	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR _Stream$[rbp]
  00054	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00057	e8 00 00 00 00	 call	 __stdio_common_vfprintf

; 644  :     }

  0005c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00063	5f		 pop	 rdi
  00064	5d		 pop	 rbp
  00065	c3		 ret	 0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 86   :     {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__F66CEB67_corecrt_stdio_config@h
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  0001b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  00022	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00029	5f		 pop	 rdi
  0002a	5d		 pop	 rbp
  0002b	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\atomic
;	COMDAT ?_Load_barrier@std@@YAXW4memory_order@1@@Z
_TEXT	SEGMENT
tv64 = 192
_Order$ = 240
?_Load_barrier@std@@YAXW4memory_order@1@@Z PROC		; std::_Load_barrier, COMDAT

; 380  : inline void _Load_barrier(const memory_order _Order) noexcept { // implement memory barrier for atomic load functions

$LN17:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__2FB352A6_atomic
  00019	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 381  :     switch (_Order) {

  0001e	8b 85 f0 00 00
	00		 mov	 eax, DWORD PTR _Order$[rbp]
  00024	89 85 c0 00 00
	00		 mov	 DWORD PTR tv64[rbp], eax
  0002a	83 bd c0 00 00
	00 05		 cmp	 DWORD PTR tv64[rbp], 5
  00031	77 1c		 ja	 SHORT $LN6@Load_barri
  00033	48 63 85 c0 00
	00 00		 movsxd	 rax, DWORD PTR tv64[rbp]
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00041	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN16@Load_barri[rcx+rax*4]
  00048	48 03 c1	 add	 rax, rcx
  0004b	ff e0		 jmp	 rax
$LN7@Load_barri:

; 382  :     case memory_order_relaxed:
; 383  :         // no barrier
; 384  :         break;

  0004d	eb 76		 jmp	 SHORT $LN2@Load_barri
$LN6@Load_barri:

; 385  :     default:
; 386  :     case memory_order_release:
; 387  :     case memory_order_acq_rel:
; 388  :         _INVALID_MEMORY_ORDER;

  0004f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Load_barrier@std@@YAXW4memory_order@2@@Z@4JA
  00055	83 c0 08	 add	 eax, 8
  00058	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@FBDAHHJI@Invalid?5memory?5order@
  0005f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00064	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0006b	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00070	45 33 c9	 xor	 r9d, r9d
  00073	44 8b c0	 mov	 r8d, eax
  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GH@NNNPPLLH@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  0007d	b9 02 00 00 00	 mov	 ecx, 2
  00082	e8 00 00 00 00	 call	 _CrtDbgReport
  00087	83 f8 01	 cmp	 eax, 1
  0008a	75 03		 jne	 SHORT $LN15@Load_barri
  0008c	cc		 int	 3
  0008d	33 c0		 xor	 eax, eax
$LN15@Load_barri:
  0008f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Load_barrier@std@@YAXW4memory_order@2@@Z@4JA
  00095	83 c0 08	 add	 eax, 8
  00098	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000a1	44 8b c8	 mov	 r9d, eax
  000a4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1MO@BCADAPLD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  000ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@GPPLBDPC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAo?$AAa?$AAd?$AA_?$AAb?$AAa?$AAr?$AAr@
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@JOMFDNFG@?$AA?$CC?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy@
  000b9	e8 00 00 00 00	 call	 _invalid_parameter
  000be	33 c0		 xor	 eax, eax
  000c0	85 c0		 test	 eax, eax
  000c2	75 8b		 jne	 SHORT $LN6@Load_barri
$LN13@Load_barri:

; 389  :         // [[fallthrough]];
; 390  :     case memory_order_consume:
; 391  :     case memory_order_acquire:
; 392  :     case memory_order_seq_cst:
; 393  :         _Compiler_or_memory_barrier();

  000c4	90		 npad	 1
$LN2@Load_barri:

; 394  :         break;
; 395  :     }
; 396  : }

  000c5	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  000cc	5f		 pop	 rdi
  000cd	5d		 pop	 rbp
  000ce	c3		 ret	 0
  000cf	90		 npad	 1
$LN16@Load_barri:
  000d0	00 00 00 00	 DD	 $LN7@Load_barri
  000d4	00 00 00 00	 DD	 $LN13@Load_barri
  000d8	00 00 00 00	 DD	 $LN13@Load_barri
  000dc	00 00 00 00	 DD	 $LN6@Load_barri
  000e0	00 00 00 00	 DD	 $LN6@Load_barri
  000e4	00 00 00 00	 DD	 $LN13@Load_barri
?_Load_barrier@std@@YAXW4memory_order@1@@Z ENDP		; std::_Load_barrier
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xthreads.h
;	COMDAT ?_Check_C_return@std@@YAHH@Z
_TEXT	SEGMENT
_Res$ = 224
?_Check_C_return@std@@YAHH@Z PROC			; std::_Check_C_return, COMDAT

; 129  : inline int _Check_C_return(int _Res) { // throw exception on failure

$LN4:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__8476F639_xthreads@h
  00019	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 130  :     if (_Res != _Thrd_success) {

  0001e	83 bd e0 00 00
	00 00		 cmp	 DWORD PTR _Res$[rbp], 0
  00025	74 0b		 je	 SHORT $LN2@Check_C_re

; 131  :         _Throw_C_error(_Res);

  00027	8b 8d e0 00 00
	00		 mov	 ecx, DWORD PTR _Res$[rbp]
  0002d	e8 00 00 00 00	 call	 ?_Throw_C_error@std@@YAXH@Z ; std::_Throw_C_error
$LN2@Check_C_re:

; 132  :     }
; 133  : 
; 134  :     return _Res;

  00032	8b 85 e0 00 00
	00		 mov	 eax, DWORD PTR _Res$[rbp]
$LN3@Check_C_re:

; 135  : }

  00038	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003f	5f		 pop	 rdi
  00040	5d		 pop	 rbp
  00041	c3		 ret	 0
?_Check_C_return@std@@YAHH@Z ENDP			; std::_Check_C_return
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\vcruntime_new.h
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
_Size$ = 224
_Where$ = 232
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 167  :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__02E23235_vcruntime_new@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 168  :         (void)_Size;
; 169  :         return _Where;

  00024	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Where$[rbp]

; 170  :     }

  0002b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\src\Motus\Application.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
__formal$ = 240
?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z PROC ; __empty_global_delete, COMDAT

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CD889865_Application@cpp
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?__empty_global_delete@@YAXPEAX_KW4align_val_t@std@@@Z ENDP ; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\src\Motus\Application.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z PROC ; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CD889865_Application@cpp
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002b	5f		 pop	 rdi
  0002c	5d		 pop	 rbp
  0002d	c3		 ret	 0
?__empty_global_delete@@YAXPEAXW4align_val_t@std@@@Z ENDP ; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\src\Motus\Application.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CD889865_Application@cpp
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002b	5f		 pop	 rdi
  0002c	5d		 pop	 rbp
  0002d	c3		 ret	 0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\DANIL\source\repos\Motus\Motus\src\Motus\Application.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 224
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CD889865_Application@cpp
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_H@YAXPEAX_K1P6APEAX0@Z@Z
_TEXT	SEGMENT
tv72 = 192
tv66 = 192
tv67 = 200
__t$ = 240
__s$ = 248
__n$ = 256
__f$ = 264
??_H@YAXPEAX_K1P6APEAX0@Z@Z PROC			; `vector constructor iterator', COMDAT
$LN7:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
$LN2@vector:
  00022	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR __n$[rbp]
  00029	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv66[rbp], rax
  00030	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR __n$[rbp]
  00037	48 ff c8	 dec	 rax
  0003a	48 89 85 00 01
	00 00		 mov	 QWORD PTR __n$[rbp], rax
  00041	48 83 bd c0 00
	00 00 00	 cmp	 QWORD PTR tv66[rbp], 0
  00049	76 0c		 jbe	 SHORT $LN5@vector
  0004b	c7 85 c8 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv67[rbp], 1
  00055	eb 0a		 jmp	 SHORT $LN6@vector
$LN5@vector:
  00057	c7 85 c8 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv67[rbp], 0
$LN6@vector:
  00061	83 bd c8 00 00
	00 00		 cmp	 DWORD PTR tv67[rbp], 0
  00068	74 38		 je	 SHORT $LN3@vector
  0006a	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR __f$[rbp]
  00071	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv72[rbp], rax
  00078	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR __t$[rbp]
  0007f	ff 95 c0 00 00
	00		 call	 QWORD PTR tv72[rbp]
  00085	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR __s$[rbp]
  0008c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR __t$[rbp]
  00093	48 03 c8	 add	 rcx, rax
  00096	48 8b c1	 mov	 rax, rcx
  00099	48 89 85 f0 00
	00 00		 mov	 QWORD PTR __t$[rbp], rax
  000a0	eb 80		 jmp	 SHORT $LN2@vector
$LN3@vector:
  000a2	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  000a9	5f		 pop	 rdi
  000aa	5d		 pop	 rbp
  000ab	c3		 ret	 0
??_H@YAXPEAX_K1P6APEAX0@Z@Z ENDP			; `vector constructor iterator'
_TEXT	ENDS
END
